{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":2270712,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270712","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":2270712,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270712","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":2270712,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270712","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":2270712,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270712","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":""}
{"id":740696,"website":"24-sata","url":"https://www.24sata.hr/a-740696","content":"CgoKCgoKCgoKCjwhRE9DVFlQRSBodG1sPgoKPGh0bWwgbGFuZz0iaHIiPgo8aGVhZD4KCiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9ImllPWVkZ2UiPjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4od2luZG93Lk5SRVVNfHwoTlJFVU09e30pKS5pbml0PXthamF4OntkZW55X2xpc3Q6WyJiYW0tY2VsbC5uci1kYXRhLm5ldCJdfX07KHdpbmRvdy5OUkVVTXx8KE5SRVVNPXt9KSkubG9hZGVyX2NvbmZpZz17bGljZW5zZUtleToiYTI5MjM2OTFmNCIsYXBwbGljYXRpb25JRDoiMjY2NjIxODUzIn07d2luZG93Lk5SRVVNfHwoTlJFVU09e30pLF9fbnJfcmVxdWlyZT1mdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcihuKXtpZighZVtuXSl7dmFyIGk9ZVtuXT17ZXhwb3J0czp7fX07dFtuXVswXS5jYWxsKGkuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgaT10W25dWzFdW2VdO3JldHVybiByKGl8fGUpfSxpLGkuZXhwb3J0cyl9cmV0dXJuIGVbbl0uZXhwb3J0c31pZigiZnVuY3Rpb24iPT10eXBlb2YgX19ucl9yZXF1aXJlKXJldHVybiBfX25yX3JlcXVpcmU7Zm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspcihuW2ldKTtyZXR1cm4gcn0oezE6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKCl7fWZ1bmN0aW9uIGkodCxlLG4scil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHMucmVjb3JkU3VwcG9ydGFiaWxpdHkoIkFQSS8iK2UrIi9jYWxsZWQiKSxvKHQrZSxbdS5ub3coKV0uY29uY2F0KGMoYXJndW1lbnRzKSksbj9udWxsOnRoaXMsciksbj92b2lkIDA6dGhpc319dmFyIG89dCgiaGFuZGxlIiksYT10KDEwKSxjPXQoMTEpLGY9dCgiZWUiKS5nZXQoInRyYWNlciIpLHU9dCgibG9hZGVyIikscz10KDQpLGQ9TlJFVU07InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3cubmV3cmVsaWMmJihuZXdyZWxpYz1kKTt2YXIgcD1bInNldFBhZ2VWaWV3TmFtZSIsInNldEN1c3RvbUF0dHJpYnV0ZSIsInNldEVycm9ySGFuZGxlciIsImZpbmlzaGVkIiwiYWRkVG9UcmFjZSIsImlubGluZUhpdCIsImFkZFJlbGVhc2UiXSxsPSJhcGktIix2PWwrIml4bi0iO2EocCxmdW5jdGlvbih0LGUpe2RbZV09aShsLGUsITAsImFwaSIpfSksZC5hZGRQYWdlQWN0aW9uPWkobCwiYWRkUGFnZUFjdGlvbiIsITApLGQuc2V0Q3VycmVudFJvdXRlTmFtZT1pKGwsInJvdXRlTmFtZSIsITApLGUuZXhwb3J0cz1uZXdyZWxpYyxkLmludGVyYWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuKG5ldyByKS5nZXQoKX07dmFyIG09ci5wcm90b3R5cGU9e2NyZWF0ZVRyYWNlcjpmdW5jdGlvbih0LGUpe3ZhciBuPXt9LHI9dGhpcyxpPSJmdW5jdGlvbiI9PXR5cGVvZiBlO3JldHVybiBvKHYrInRyYWNlciIsW3Uubm93KCksdCxuXSxyKSxmdW5jdGlvbigpe2lmKGYuZW1pdCgoaT8iIjoibm8tIikrImZuLXN0YXJ0IixbdS5ub3coKSxyLGldLG4pLGkpdHJ5e3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaCh0KXt0aHJvdyBmLmVtaXQoImZuLWVyciIsW2FyZ3VtZW50cyx0aGlzLHRdLG4pLHR9ZmluYWxseXtmLmVtaXQoImZuLWVuZCIsW3Uubm93KCldLG4pfX19fTthKCJhY3Rpb25UZXh0LHNldE5hbWUsc2V0QXR0cmlidXRlLHNhdmUsaWdub3JlLG9uRW5kLGdldENvbnRleHQsZW5kLGdldCIuc3BsaXQoIiwiKSxmdW5jdGlvbih0LGUpe21bZV09aSh2LGUpfSksbmV3cmVsaWMubm90aWNlRXJyb3I9ZnVuY3Rpb24odCxlKXsic3RyaW5nIj09dHlwZW9mIHQmJih0PW5ldyBFcnJvcih0KSkscy5yZWNvcmRTdXBwb3J0YWJpbGl0eSgiQVBJL25vdGljZUVycm9yL2NhbGxlZCIpLG8oImVyciIsW3QsdS5ub3coKSwhMSxlXSl9fSx7fV0sMjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7aWYoTlJFVU0uaW5pdCl7Zm9yKHZhciBlPU5SRVVNLmluaXQsbj10LnNwbGl0KCIuIikscj0wO3I8bi5sZW5ndGgtMTtyKyspaWYoZT1lW25bcl1dLCJvYmplY3QiIT10eXBlb2YgZSlyZXR1cm47cmV0dXJuIGU9ZVtuW24ubGVuZ3RoLTFdXX19ZS5leHBvcnRzPXtnZXRDb25maWd1cmF0aW9uOnJ9fSx7fV0sMzpbZnVuY3Rpb24odCxlLG4pe3ZhciByPSExO3RyeXt2YXIgaT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sInBhc3NpdmUiLHtnZXQ6ZnVuY3Rpb24oKXtyPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJ0ZXN0UGFzc2l2ZSIsbnVsbCxpKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigidGVzdFBhc3NpdmUiLG51bGwsaSl9Y2F0Y2gobyl7fWUuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gcj97cGFzc2l2ZTohMCxjYXB0dXJlOiEhdH06ISF0fX0se31dLDQ6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7dmFyIG49W2EsdCx7bmFtZTp0fSxlXTtyZXR1cm4gbygic3RvcmVNZXRyaWMiLG4sbnVsbCwiYXBpIiksbn1mdW5jdGlvbiBpKHQsZSl7dmFyIG49W2MsdCx7bmFtZTp0fSxlXTtyZXR1cm4gbygic3RvcmVFdmVudE1ldHJpY3MiLG4sbnVsbCwiYXBpIiksbn12YXIgbz10KCJoYW5kbGUiKSxhPSJzbSIsYz0iY20iO2UuZXhwb3J0cz17Y29uc3RhbnRzOntTVVBQT1JUQUJJTElUWV9NRVRSSUM6YSxDVVNUT01fTUVUUklDOmN9LHJlY29yZFN1cHBvcnRhYmlsaXR5OnIscmVjb3JkQ3VzdG9tOml9fSx7fV0sNTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXtyZXR1cm4gYy5leGlzdHMmJnBlcmZvcm1hbmNlLm5vdz9NYXRoLnJvdW5kKHBlcmZvcm1hbmNlLm5vdygpKToobz1NYXRoLm1heCgobmV3IERhdGUpLmdldFRpbWUoKSxvKSktYX1mdW5jdGlvbiBpKCl7cmV0dXJuIG99dmFyIG89KG5ldyBEYXRlKS5nZXRUaW1lKCksYT1vLGM9dCgxMik7ZS5leHBvcnRzPXIsZS5leHBvcnRzLm9mZnNldD1hLGUuZXhwb3J0cy5nZXRMYXN0VGltZXN0YW1wPWl9LHt9XSw2OltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXtyZXR1cm4hKCF0fHwhdC5wcm90b2NvbHx8ImZpbGU6Ij09PXQucHJvdG9jb2wpfWUuZXhwb3J0cz1yfSx7fV0sNzpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXt2YXIgbj10LmdldEVudHJpZXMoKTtuLmZvckVhY2goZnVuY3Rpb24odCl7ImZpcnN0LXBhaW50Ij09PXQubmFtZT9sKCJ0aW1pbmciLFsiZnAiLE1hdGguZmxvb3IodC5zdGFydFRpbWUpXSk6ImZpcnN0LWNvbnRlbnRmdWwtcGFpbnQiPT09dC5uYW1lJiZsKCJ0aW1pbmciLFsiZmNwIixNYXRoLmZsb29yKHQuc3RhcnRUaW1lKV0pfSl9ZnVuY3Rpb24gaSh0LGUpe3ZhciBuPXQuZ2V0RW50cmllcygpO2lmKG4ubGVuZ3RoPjApe3ZhciByPW5bbi5sZW5ndGgtMV07aWYodSYmdTxyLnN0YXJ0VGltZSlyZXR1cm47dmFyIGk9W3JdLG89YSh7fSk7byYmaS5wdXNoKG8pLGwoImxjcCIsaSl9fWZ1bmN0aW9uIG8odCl7dC5nZXRFbnRyaWVzKCkuZm9yRWFjaChmdW5jdGlvbih0KXt0LmhhZFJlY2VudElucHV0fHxsKCJjbHMiLFt0XSl9KX1mdW5jdGlvbiBhKHQpe3ZhciBlPW5hdmlnYXRvci5jb25uZWN0aW9ufHxuYXZpZ2F0b3IubW96Q29ubmVjdGlvbnx8bmF2aWdhdG9yLndlYmtpdENvbm5lY3Rpb247aWYoZSlyZXR1cm4gZS50eXBlJiYodFsibmV0LXR5cGUiXT1lLnR5cGUpLGUuZWZmZWN0aXZlVHlwZSYmKHRbIm5ldC1ldHlwZSJdPWUuZWZmZWN0aXZlVHlwZSksZS5ydHQmJih0WyJuZXQtcnR0Il09ZS5ydHQpLGUuZG93bmxpbmsmJih0WyJuZXQtZGxpbmsiXT1lLmRvd25saW5rKSx0fWZ1bmN0aW9uIGModCl7aWYodCBpbnN0YW5jZW9mIHkmJiF3KXt2YXIgZT1NYXRoLnJvdW5kKHQudGltZVN0YW1wKSxuPXt0eXBlOnQudHlwZX07YShuKSxlPD12Lm5vdygpP24uZmlkPXYubm93KCktZTplPnYub2Zmc2V0JiZlPD1EYXRlLm5vdygpPyhlLT12Lm9mZnNldCxuLmZpZD12Lm5vdygpLWUpOmU9di5ub3coKSx3PSEwLGwoInRpbWluZyIsWyJmaSIsZSxuXSl9fWZ1bmN0aW9uIGYodCl7ImhpZGRlbiI9PT10JiYodT12Lm5vdygpLGwoInBhZ2VIaWRlIixbdV0pKX1pZighKCJpbml0ImluIE5SRVVNJiYicGFnZV92aWV3X3RpbWluZyJpbiBOUkVVTS5pbml0JiYiZW5hYmxlZCJpbiBOUkVVTS5pbml0LnBhZ2Vfdmlld190aW1pbmcmJk5SRVVNLmluaXQucGFnZV92aWV3X3RpbWluZy5lbmFibGVkPT09ITEpKXt2YXIgdSxzLGQscCxsPXQoImhhbmRsZSIpLHY9dCgibG9hZGVyIiksbT10KDkpLGc9dCgzKSx5PU5SRVVNLm8uRVY7aWYoIlBlcmZvcm1hbmNlT2JzZXJ2ZXIiaW4gd2luZG93JiYiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93LlBlcmZvcm1hbmNlT2JzZXJ2ZXIpe3M9bmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIocik7dHJ5e3Mub2JzZXJ2ZSh7ZW50cnlUeXBlczpbInBhaW50Il19KX1jYXRjaChoKXt9ZD1uZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihpKTt0cnl7ZC5vYnNlcnZlKHtlbnRyeVR5cGVzOlsibGFyZ2VzdC1jb250ZW50ZnVsLXBhaW50Il19KX1jYXRjaChoKXt9cD1uZXcgUGVyZm9ybWFuY2VPYnNlcnZlcihvKTt0cnl7cC5vYnNlcnZlKHt0eXBlOiJsYXlvdXQtc2hpZnQiLGJ1ZmZlcmVkOiEwfSl9Y2F0Y2goaCl7fX1pZigiYWRkRXZlbnRMaXN0ZW5lciJpbiBkb2N1bWVudCl7dmFyIHc9ITEsYj1bImNsaWNrIiwia2V5ZG93biIsIm1vdXNlZG93biIsInBvaW50ZXJkb3duIiwidG91Y2hzdGFydCJdO2IuZm9yRWFjaChmdW5jdGlvbih0KXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHQsYyxnKCExKSl9KX1tKGYpfX0se31dLDg6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7aWYoIWkpcmV0dXJuITE7aWYodCE9PWkpcmV0dXJuITE7aWYoIWUpcmV0dXJuITA7aWYoIW8pcmV0dXJuITE7Zm9yKHZhciBuPW8uc3BsaXQoIi4iKSxyPWUuc3BsaXQoIi4iKSxhPTA7YTxyLmxlbmd0aDthKyspaWYoclthXSE9PW5bYV0pcmV0dXJuITE7cmV0dXJuITB9dmFyIGk9bnVsbCxvPW51bGwsYT0vVmVyc2lvblwvKFxTKylccytTYWZhcmkvO2lmKG5hdmlnYXRvci51c2VyQWdlbnQpe3ZhciBjPW5hdmlnYXRvci51c2VyQWdlbnQsZj1jLm1hdGNoKGEpO2YmJmMuaW5kZXhPZigiQ2hyb21lIik9PT0tMSYmYy5pbmRleE9mKCJDaHJvbWl1bSIpPT09LTEmJihpPSJTYWZhcmkiLG89ZlsxXSl9ZS5leHBvcnRzPXthZ2VudDppLHZlcnNpb246byxtYXRjaDpyfX0se31dLDk6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe2Z1bmN0aW9uIGUoKXt0KGMmJmRvY3VtZW50W2NdP2RvY3VtZW50W2NdOmRvY3VtZW50W29dPyJoaWRkZW4iOiJ2aXNpYmxlIil9ImFkZEV2ZW50TGlzdGVuZXIiaW4gZG9jdW1lbnQmJmEmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoYSxlLGkoITEpKX12YXIgaT10KDMpO2UuZXhwb3J0cz1yO3ZhciBvLGEsYzsidW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50LmhpZGRlbj8obz0iaGlkZGVuIixhPSJ2aXNpYmlsaXR5Y2hhbmdlIixjPSJ2aXNpYmlsaXR5U3RhdGUiKToidW5kZWZpbmVkIiE9dHlwZW9mIGRvY3VtZW50Lm1zSGlkZGVuPyhvPSJtc0hpZGRlbiIsYT0ibXN2aXNpYmlsaXR5Y2hhbmdlIik6InVuZGVmaW5lZCIhPXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihvPSJ3ZWJraXRIaWRkZW4iLGE9IndlYmtpdHZpc2liaWxpdHljaGFuZ2UiLGM9IndlYmtpdFZpc2liaWxpdHlTdGF0ZSIpfSx7fV0sMTA6W2Z1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQsZSl7dmFyIG49W10scj0iIixvPTA7Zm9yKHIgaW4gdClpLmNhbGwodCxyKSYmKG5bb109ZShyLHRbcl0pLG8rPTEpO3JldHVybiBufXZhciBpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZS5leHBvcnRzPXJ9LHt9XSwxMTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4pe2V8fChlPTApLCJ1bmRlZmluZWQiPT10eXBlb2YgbiYmKG49dD90Lmxlbmd0aDowKTtmb3IodmFyIHI9LTEsaT1uLWV8fDAsbz1BcnJheShpPDA/MDppKTsrK3I8aTspb1tyXT10W2Urcl07cmV0dXJuIG99ZS5leHBvcnRzPXJ9LHt9XSwxMjpbZnVuY3Rpb24odCxlLG4pe2UuZXhwb3J0cz17ZXhpc3RzOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UudGltaW5nJiYidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0fX0se31dLGVlOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBpKHQpe2Z1bmN0aW9uIGUodCl7cmV0dXJuIHQmJnQgaW5zdGFuY2VvZiByP3Q6dD91KHQsZixhKTphKCl9ZnVuY3Rpb24gbihuLHIsaSxvLGEpe2lmKGEhPT0hMSYmKGE9ITApLCFsLmFib3J0ZWR8fG8pe3QmJmEmJnQobixyLGkpO2Zvcih2YXIgYz1lKGkpLGY9bShuKSx1PWYubGVuZ3RoLHM9MDtzPHU7cysrKWZbc10uYXBwbHkoYyxyKTt2YXIgcD1kW3dbbl1dO3JldHVybiBwJiZwLnB1c2goW2IsbixyLGNdKSxjfX1mdW5jdGlvbiBvKHQsZSl7aFt0XT1tKHQpLmNvbmNhdChlKX1mdW5jdGlvbiB2KHQsZSl7dmFyIG49aFt0XTtpZihuKWZvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKW5bcl09PT1lJiZuLnNwbGljZShyLDEpfWZ1bmN0aW9uIG0odCl7cmV0dXJuIGhbdF18fFtdfWZ1bmN0aW9uIGcodCl7cmV0dXJuIHBbdF09cFt0XXx8aShuKX1mdW5jdGlvbiB5KHQsZSl7bC5hYm9ydGVkfHxzKHQsZnVuY3Rpb24odCxuKXtlPWV8fCJmZWF0dXJlIix3W25dPWUsZSBpbiBkfHwoZFtlXT1bXSl9KX12YXIgaD17fSx3PXt9LGI9e29uOm8sYWRkRXZlbnRMaXN0ZW5lcjpvLHJlbW92ZUV2ZW50TGlzdGVuZXI6dixlbWl0Om4sZ2V0OmcsbGlzdGVuZXJzOm0sY29udGV4dDplLGJ1ZmZlcjp5LGFib3J0OmMsYWJvcnRlZDohMX07cmV0dXJuIGJ9ZnVuY3Rpb24gbyh0KXtyZXR1cm4gdSh0LGYsYSl9ZnVuY3Rpb24gYSgpe3JldHVybiBuZXcgcn1mdW5jdGlvbiBjKCl7KGQuYXBpfHxkLmZlYXR1cmUpJiYobC5hYm9ydGVkPSEwLGQ9bC5iYWNrbG9nPXt9KX12YXIgZj0ibnJAY29udGV4dCIsdT10KCJnb3MiKSxzPXQoMTApLGQ9e30scD17fSxsPWUuZXhwb3J0cz1pKCk7ZS5leHBvcnRzLmdldE9yU2V0Q29udGV4dD1vLGwuYmFja2xvZz1kfSx7fV0sZ29zOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUsbil7aWYoaS5jYWxsKHQsZSkpcmV0dXJuIHRbZV07dmFyIHI9bigpO2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmtleXMpdHJ5e3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpyLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6ITF9KSxyfWNhdGNoKG8pe31yZXR1cm4gdFtlXT1yLHJ9dmFyIGk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9cn0se31dLGhhbmRsZTpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlLG4scil7aS5idWZmZXIoW3RdLHIpLGkuZW1pdCh0LGUsbil9dmFyIGk9dCgiZWUiKS5nZXQoImhhbmRsZSIpO2UuZXhwb3J0cz1yLHIuZWU9aX0se31dLGlkOltmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10eXBlb2YgdDtyZXR1cm4hdHx8Im9iamVjdCIhPT1lJiYiZnVuY3Rpb24iIT09ZT8tMTp0PT09d2luZG93PzA6YSh0LG8sZnVuY3Rpb24oKXtyZXR1cm4gaSsrfSl9dmFyIGk9MSxvPSJuckBpZCIsYT10KCJnb3MiKTtlLmV4cG9ydHM9cn0se31dLGxvYWRlcjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIoKXtpZighUCsrKXt2YXIgdD1NLmluZm89TlJFVU0uaW5mbyxlPWcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpWzBdO2lmKHNldFRpbWVvdXQodS5hYm9ydCwzZTQpLCEodCYmdC5saWNlbnNlS2V5JiZ0LmFwcGxpY2F0aW9uSUQmJmUpKXJldHVybiB1LmFib3J0KCk7ZihPLGZ1bmN0aW9uKGUsbil7dFtlXXx8KHRbZV09bil9KTt2YXIgbj1hKCk7YygibWFyayIsWyJvbmxvYWQiLG4rTS5vZmZzZXRdLG51bGwsImFwaSIpLGMoInRpbWluZyIsWyJsb2FkIixuXSk7dmFyIHI9Zy5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTswPT09dC5hZ2VudC5pbmRleE9mKCJodHRwOi8vIil8fDA9PT10LmFnZW50LmluZGV4T2YoImh0dHBzOi8vIik/ci5zcmM9dC5hZ2VudDpyLnNyYz12KyI6Ly8iK3QuYWdlbnQsZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyLGUpfX1mdW5jdGlvbiBpKCl7ImNvbXBsZXRlIj09PWcucmVhZHlTdGF0ZSYmbygpfWZ1bmN0aW9uIG8oKXtjKCJtYXJrIixbImRvbUNvbnRlbnQiLGEoKStNLm9mZnNldF0sbnVsbCwiYXBpIil9dmFyIGE9dCg1KSxjPXQoImhhbmRsZSIpLGY9dCgxMCksdT10KCJlZSIpLHM9dCg4KSxkPXQoNikscD10KDIpLGw9dCgzKSx2PXAuZ2V0Q29uZmlndXJhdGlvbigic3NsIik9PT0hMT8iaHR0cCI6Imh0dHBzIixtPXdpbmRvdyxnPW0uZG9jdW1lbnQseT0iYWRkRXZlbnRMaXN0ZW5lciIsaD0iYXR0YWNoRXZlbnQiLHc9bS5YTUxIdHRwUmVxdWVzdCxiPXcmJncucHJvdG90eXBlLEU9IWQobS5sb2NhdGlvbik7TlJFVU0ubz17U1Q6c2V0VGltZW91dCxTSTptLnNldEltbWVkaWF0ZSxDVDpjbGVhclRpbWVvdXQsWEhSOncsUkVROm0uUmVxdWVzdCxFVjptLkV2ZW50LFBSOm0uUHJvbWlzZSxNTzptLk11dGF0aW9uT2JzZXJ2ZXJ9O3ZhciB4PSIiK2xvY2F0aW9uLE89e2JlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixlcnJvckJlYWNvbjoiYmFtLm5yLWRhdGEubmV0IixhZ2VudDoianMtYWdlbnQubmV3cmVsaWMuY29tL25yLTEyMTUubWluLmpzIn0sVD13JiZiJiZiW3ldJiYhL0NyaU9TLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLE09ZS5leHBvcnRzPXtvZmZzZXQ6YS5nZXRMYXN0VGltZXN0YW1wKCksbm93OmEsb3JpZ2luOngsZmVhdHVyZXM6e30seGhyV3JhcHBhYmxlOlQsdXNlckFnZW50OnMsZGlzYWJsZWQ6RX07aWYoIUUpe3QoMSksdCg3KSxnW3ldPyhnW3ldKCJET01Db250ZW50TG9hZGVkIixvLGwoITEpKSxtW3ldKCJsb2FkIixyLGwoITEpKSk6KGdbaF0oIm9ucmVhZHlzdGF0ZWNoYW5nZSIsaSksbVtoXSgib25sb2FkIixyKSksYygibWFyayIsWyJmaXJzdGJ5dGUiLGEuZ2V0TGFzdFRpbWVzdGFtcCgpXSxudWxsLCJhcGkiKTt2YXIgUD0wfX0se31dLCJ3cmFwLWZ1bmN0aW9uIjpbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCxlKXtmdW5jdGlvbiBuKGUsbixyLGYsdSl7ZnVuY3Rpb24gbnJXcmFwcGVyKCl7dmFyIG8sYSxzLHA7dHJ5e2E9dGhpcyxvPWQoYXJndW1lbnRzKSxzPSJmdW5jdGlvbiI9PXR5cGVvZiByP3IobyxhKTpyfHx7fX1jYXRjaChsKXtpKFtsLCIiLFtvLGEsZl0sc10sdCl9YyhuKyJzdGFydCIsW28sYSxmXSxzLHUpO3RyeXtyZXR1cm4gcD1lLmFwcGx5KGEsbyl9Y2F0Y2godil7dGhyb3cgYyhuKyJlcnIiLFtvLGEsdl0scyx1KSx2fWZpbmFsbHl7YyhuKyJlbmQiLFtvLGEscF0scyx1KX19cmV0dXJuIGEoZSk/ZToobnx8KG49IiIpLG5yV3JhcHBlcltwXT1lLG8oZSxucldyYXBwZXIsdCksbnJXcmFwcGVyKX1mdW5jdGlvbiByKHQsZSxyLGksbyl7cnx8KHI9IiIpO3ZhciBjLGYsdSxzPSItIj09PXIuY2hhckF0KDApO2Zvcih1PTA7dTxlLmxlbmd0aDt1KyspZj1lW3VdLGM9dFtmXSxhKGMpfHwodFtmXT1uKGMscz9mK3I6cixpLGYsbykpfWZ1bmN0aW9uIGMobixyLG8sYSl7aWYoIXZ8fGUpe3ZhciBjPXY7dj0hMDt0cnl7dC5lbWl0KG4scixvLGUsYSl9Y2F0Y2goZil7aShbZixuLHIsb10sdCl9dj1jfX1yZXR1cm4gdHx8KHQ9cyksbi5pblBsYWNlPXIsbi5mbGFnPXAsbn1mdW5jdGlvbiBpKHQsZSl7ZXx8KGU9cyk7dHJ5e2UuZW1pdCgiaW50ZXJuYWwtZXJyb3IiLHQpfWNhdGNoKG4pe319ZnVuY3Rpb24gbyh0LGUsbil7aWYoT2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3Qua2V5cyl0cnl7dmFyIHI9T2JqZWN0LmtleXModCk7cmV0dXJuIHIuZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtuXX0sc2V0OmZ1bmN0aW9uKGUpe3JldHVybiB0W25dPWUsZX19KX0pLGV9Y2F0Y2gobyl7aShbb10sbil9Zm9yKHZhciBhIGluIHQpbC5jYWxsKHQsYSkmJihlW2FdPXRbYV0pO3JldHVybiBlfWZ1bmN0aW9uIGEodCl7cmV0dXJuISh0JiZ0IGluc3RhbmNlb2YgRnVuY3Rpb24mJnQuYXBwbHkmJiF0W3BdKX1mdW5jdGlvbiBjKHQsZSl7dmFyIG49ZSh0KTtyZXR1cm4gbltwXT10LG8odCxuLHMpLG59ZnVuY3Rpb24gZih0LGUsbil7dmFyIHI9dFtlXTt0W2VdPWMocixuKX1mdW5jdGlvbiB1KCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksbj0wO248dDsrK24pZVtuXT1hcmd1bWVudHNbbl07cmV0dXJuIGV9dmFyIHM9dCgiZWUiKSxkPXQoMTEpLHA9Im5yQG9yaWdpbmFsIixsPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksdj0hMTtlLmV4cG9ydHM9cixlLmV4cG9ydHMud3JhcEZ1bmN0aW9uPWMsZS5leHBvcnRzLndyYXBJblBsYWNlPWYsZS5leHBvcnRzLmFyZ3NUb0FycmF5PXV9LHt9XX0se30sWyJsb2FkZXIiXSk7PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPndpbmRvdy5OUkVVTXx8KE5SRVVNPXt9KTtOUkVVTS5pbmZvPXsiYmVhY29uIjoiYmFtLWNlbGwubnItZGF0YS5uZXQiLCJlcnJvckJlYWNvbiI6ImJhbS1jZWxsLm5yLWRhdGEubmV0IiwibGljZW5zZUtleSI6ImEyOTIzNjkxZjQiLCJhcHBsaWNhdGlvbklEIjoiMjY2NjIxODUzIiwidHJhbnNhY3Rpb25OYW1lIjoiYmxKYWJSUlFXMEZZQnhCYVgxY1lma3dJVWtGYlZncExWMXBZV1Y5V09VSkdRQmNIQzExRVhGbE1GeEJZVUVWS1hpVkJSRkJVVkZ3d1dGQkZGd01CUnc9PSIsInF1ZXVlVGltZSI6MCwiYXBwbGljYXRpb25UaW1lIjo0NiwiYWdlbnQiOiIifTwvc2NyaXB0PgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9NS4wIj4KCiAgICAKICAgIAogICAgICAgIAoKPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvc3RhdGljL2ZvbnRzL1Rheld0MDktQmxhY2tJdGFsaWMud29mZjIiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBjcm9zc29yaWdpbj4KPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvc3RhdGljL2ZvbnRzL1Rheld0MDktQmxhY2sud29mZjIiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBjcm9zc29yaWdpbj4KPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvc3RhdGljL2ZvbnRzL1Rheld0MDctQm9sZC53b2ZmMiIgYXM9ImZvbnQiIHR5cGU9ImZvbnQvd29mZjIiIGNyb3Nzb3JpZ2luPgo8bGluayByZWw9InByZWxvYWQiIGhyZWY9Ii9zdGF0aWMvZm9udHMvVGF6V3QwNS1SZWd1bGFyLndvZmYyIiBhcz0iZm9udCIgdHlwZT0iZm9udC93b2ZmMiIgY3Jvc3NvcmlnaW4+CjxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iL3N0YXRpYy9mb250cy9MYWJHcm90ZXNxdWUtUmVndWxhci53b2ZmMiIgYXM9ImZvbnQiIHR5cGU9ImZvbnQvd29mZjIiIGNyb3Nzb3JpZ2luPgo8bGluayByZWw9InByZWxvYWQiIGhyZWY9Ii9zdGF0aWMvZm9udHMvTGFiR3JvdGVzcXVlLUJvbGQud29mZjIiIGFzPSJmb250IiB0eXBlPSJmb250L3dvZmYyIiBjcm9zc29yaWdpbj4KCgo8bGluayByZWw9InByZWxvYWQiIGhyZWY9Ii9zdGF0aWMvZm9udHMvaWNvbW9vbi53b2ZmMj8yMDIxMDYxNCIgYXM9ImZvbnQiIHR5cGU9ImZvbnQvd29mZjIiIGNyb3Nzb3JpZ2luPgoKPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvc3RhdGljL3N0eWxlL2ZvbnRzLmNzcyIgbWVkaWE9InByaW50IiBvbmxvYWQ9InRoaXMubWVkaWE9J2FsbCc7IHRoaXMub25sb2FkPW51bGw7Ij4KCiAgICAgICAgCgoKCgoKCgoKCjxtZXRhIG5hbWU9Imdvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbiIgY29udGVudD0iekJCMzB2YlRPZjk5MW9oQUxMMlJmOTloR2JlZHM2emgyM1JxSE9Cb2RCWSIgLz4KCjxzdHlsZT4KICAgIEBjaGFyc2V0ICJ1dGYtOCI7CgogICAgQHZpZXdwb3J0IHsKICAgICAgICBpbml0aWFsLXNjYWxlOiAxOwogICAgICAgIHpvb206IDE7CiAgICAgICAgd2lkdGg6IGRldmljZS13aWR0aDsKICAgICAgICBtaW4tem9vbTogMC4yOwogICAgICAgIG1heC16b29tOiA1OwogICAgICAgIHVzZXItem9vbTogem9vbTsKICAgIH0KICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgLmlzLXNlY3Rpb24tbmV3cyAuY2FyZF9fbGFiZWw6bm90KC5pcy1wcm9taW5lbnQpe2JhY2tncm91bmQtY29sb3I6I2QyMjMyOCFpbXBvcnRhbnR9LmJsb2NrOm5vdCg6bGFzdC1jaGlsZCl7bWFyZ2luLWJvdHRvbToxLjVyZW19LmltYWdlLmlzLTNieTIgaW1ne2JvdHRvbTowO2xlZnQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO3RvcDowfWltZ3toZWlnaHQ6YXV0bzttYXgtd2lkdGg6MTAwJX1odG1se2JhY2tncm91bmQtY29sb3I6I2ZmZjtmb250LXNpemU6MTZweDstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDttaW4td2lkdGg6MzAwcHg7b3ZlcmZsb3cteDpoaWRkZW47b3ZlcmZsb3cteTpzY3JvbGw7dGV4dC1yZW5kZXJpbmc6b3B0aW1pemVMZWdpYmlsaXR5Oy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlOy1tb3otdGV4dC1zaXplLWFkanVzdDoxMDAlOy1tcy10ZXh0LXNpemUtYWRqdXN0OjEwMCU7dGV4dC1zaXplLWFkanVzdDoxMDAlfWZpZ3VyZSxoZWFkZXIsc2VjdGlvbntkaXNwbGF5OmJsb2NrfWJvZHl7Zm9udC1mYW1pbHk6VGF6UmVndWxhcixzeXN0ZW0sc2Fucy1zZXJpZn1ib2R5e2NvbG9yOiM0ZjRmNGY7Zm9udC1zaXplOjFlbTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MS41fWF7Y29sb3I6IzAwN2ZmZjt0ZXh0LWRlY29yYXRpb246bm9uZX1pbWd7aGVpZ2h0OmF1dG87bWF4LXdpZHRoOjEwMCV9c3Bhbntmb250LXN0eWxlOmluaGVyaXQ7Zm9udC13ZWlnaHQ6aW5oZXJpdH0uaXMtbWFyZ2lubGVzc3ttYXJnaW46MCFpbXBvcnRhbnR9Lmljb257LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDoxLjVyZW07d2lkdGg6MS41cmVtfS5pY29uLmlzLXNtYWxse2hlaWdodDoxcmVtO3dpZHRoOjFyZW19LmltYWdle2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmV9LmltYWdlIGltZ3tkaXNwbGF5OmJsb2NrO2hlaWdodDphdXRvO3dpZHRoOjEwMCV9LmltYWdlLmlzLTNieTIgaW1ne2hlaWdodDoxMDAlO3dpZHRoOjEwMCV9LmltYWdlLmlzLTNieTJ7cGFkZGluZy10b3A6NjYuNjY2NiV9LmxldmVsLWl0ZW17LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTphdXRvO2ZsZXgtYmFzaXM6YXV0bzstd2Via2l0LWJveC1mbGV4OjA7LW1zLWZsZXgtcG9zaXRpdmU6MDtmbGV4LWdyb3c6MDstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMjNweCl7LmxldmVsLWl0ZW06bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOi43NXJlbX19LmNvbHVtbntkaXNwbGF5OmJsb2NrOy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjA7ZmxleC1iYXNpczowOy13ZWJraXQtYm94LWZsZXg6MTstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxOy1tcy1mbGV4LW5lZ2F0aXZlOjE7ZmxleC1zaHJpbms6MTtwYWRkaW5nOjhweH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMjNweCl7LmNvbHVtbi5pcy1uYXJyb3ctbW9iaWxley13ZWJraXQtYm94LWZsZXg6MDstbXMtZmxleDpub25lO2ZsZXg6bm9uZX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMDIzcHgpey5jb2x1bW4uaXMtbmFycm93LXRvdWNoey13ZWJraXQtYm94LWZsZXg6MDstbXMtZmxleDpub25lO2ZsZXg6bm9uZX19LmNvbHVtbnN7bWFyZ2luLWxlZnQ6LThweDttYXJnaW4tcmlnaHQ6LThweDttYXJnaW4tdG9wOi04cHh9LmNvbHVtbnM6bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOmNhbGMoMS41cmVtIC0gOHB4KX0uc2VjdGlvbntwYWRkaW5nOjNyZW0gMS41cmVtIDNyZW0gMTZweH0uaWNvbnstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZX1ib2R5e2NvbG9yOiMwMDB9LnNlY3Rpb257cGFkZGluZzowfUBtZWRpYSAobWF4LXdpZHRoOjEwMjNweCl7LmNvbHVtbnN7bWFyZ2luOjAhaW1wb3J0YW50fX1AbWVkaWEgKG1heC13aWR0aDoxMDIzcHgpey5jb2x1bW57cGFkZGluZzowIWltcG9ydGFudH19LmlzLXNlY3Rpb24tbmV3cyAuY2FyZF9fbGFiZWw6bm90KC5pcy1wcm9taW5lbnQpe2JhY2tncm91bmQtY29sb3I6I2QyMjMyOCFpbXBvcnRhbnR9Ym9keSxmaWd1cmUsaDIsaHRtbCxpZnJhbWUscHttYXJnaW46MDtwYWRkaW5nOjB9aDJ7Zm9udC1zaXplOjEwMCU7Zm9udC13ZWlnaHQ6NDAwfWh0bWx7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fSosOmFmdGVyLDpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmluaGVyaXQ7Ym94LXNpemluZzppbmhlcml0fWltZ3toZWlnaHQ6YXV0bzttYXgtd2lkdGg6MTAwJX1pZnJhbWV7Ym9yZGVyOjB9W2NsYXNzKj0iIGljb24tIl17Zm9udC1mYW1pbHk6aWNvbW9vbjtzcGVhazpub25lO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbDtmb250LXZhcmlhbnQ6bm9ybWFsO2xpbmUtaGVpZ2h0OjE7dGV4dC10cmFuc2Zvcm06bm9uZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZX0uaWNvbi1ub3RpZmljYXRpb25zOmJlZm9yZXtjb250ZW50OiJcZTkyMiJ9Lmljb24tcHJvZmlsZTpiZWZvcmV7Y29udGVudDoiXGU5MjMifS5pY29uLXVnYzpiZWZvcmV7Y29udGVudDoiXGU5MjQifS5pY29uLWxpa2U6YmVmb3Jle2NvbnRlbnQ6IlxlOTM1In0uaWNvbi1zZWFyY2g6YmVmb3Jle2NvbnRlbnQ6IlxlOTQxIn0uZGZwX2Jhbm5lcnttaW4taGVpZ2h0OjFweH0uZGZwX2Jhbm5lciwuZGZwX2Jhbm5lciBbaWRePWdvb2dsZV9hZHNfaWZyYW1lXXt0ZXh0LWFsaWduOmNlbnRlcn0uZGZwX2Jhbm5lciBbaWQkPV9fY29udGFpbmVyX19de2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowIDAgMjBweH0uaGVhZGVyX21vYmlsZXtwb3NpdGlvbjpmaXhlZDt0b3A6MDt6LWluZGV4OjEwNTt3aWR0aDoxMDAlO21heC13aWR0aDo0MTRweDtoZWlnaHQ6NDhweDtsaW5lLWhlaWdodDowO2JhY2tncm91bmQtY29sb3I6I2ZmZn0uaGVhZGVyX21vYmlsZV9fdG9we3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6Mjstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggMCAwIHJnYmEoMCwwLDAsLjE2KTtib3gtc2hhZG93OjAgMXB4IDAgMCByZ2JhKDAsMCwwLC4xNik7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5oZWFkZXJfbW9iaWxlX190b3AgLmxldmVsLWl0ZW17LXdlYmtpdC1ib3gtZmxleDoxOy1tcy1mbGV4OjEgMSAwcHg7ZmxleDoxIDEgMH0uaGVhZGVyX21vYmlsZV9fbGlua3twb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6NDBweDtoZWlnaHQ6NDBweDt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjpyZ2JhKDAsMCwwLC42NCl9LmhlYWRlcl9tb2JpbGVfX2xpbmsgLmljb25fd3JhcHtsaW5lLWhlaWdodDowfS5oZWFkZXJfbW9iaWxlX19sYWJlbHtkaXNwbGF5Om5vbmU7Zm9udDpub3JtYWwgNDAwIDEwMCUgVGF6Qm9sZCxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTouNTYyNXJlbTtsaW5lLWhlaWdodDouNjI1cmVtO2NvbG9yOiNkNzA2MGM7d2hpdGUtc3BhY2U6bm93cmFwO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uaGVhZGVyX21vYmlsZV9fbG9nb3std2Via2l0LWJveC1wYWNrOnN0YXJ0Oy1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7LXdlYmtpdC1ib3gtZmxleDowIWltcG9ydGFudDstbXMtZmxleDowIDAgNTJweCFpbXBvcnRhbnQ7ZmxleDowIDAgNTJweCFpbXBvcnRhbnR9LmhlYWRlcl9tb2JpbGVfX2xvZ29fbGlua3tkaXNwbGF5OmJsb2NrO3BhZGRpbmc6NXB4IDAgNXB4IDVweH0uaGVhZGVyX21vYmlsZV9fbG9nb19pbWd7ZGlzcGxheTpibG9jazt3aWR0aDo0N3B4fS5oZWFkZXJfbW9iaWxlIC5pY29ue2ZvbnQtc2l6ZToxLjVyZW07bGluZS1oZWlnaHQ6MS41cmVtfS5oZWFkZXJfbW9iaWxlIC5oYW1idXJnZXJfbWVudXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoyMHB4O2hlaWdodDoyMHB4fS5oZWFkZXJfbW9iaWxlIC5oYW1idXJnZXJfbWVudV9faXRlbXtwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7aGVpZ2h0OjJweDtib3JkZXItcmFkaXVzOjRweDtiYWNrZ3JvdW5kLWNvbG9yOiM1YzVjNWN9LmhlYWRlcl9tb2JpbGUgLmhhbWJ1cmdlcl9tZW51X19pdGVtOmZpcnN0LW9mLXR5cGV7dG9wOjE1JX0uaGVhZGVyX21vYmlsZSAuaGFtYnVyZ2VyX21lbnVfX2l0ZW06bnRoLW9mLXR5cGUoMil7dG9wOjQ1JX0uaGVhZGVyX21vYmlsZSAuaGFtYnVyZ2VyX21lbnVfX2l0ZW06bnRoLW9mLXR5cGUoMyl7dG9wOjc1JX0uY2FyZHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbi1ib3R0b206MTZweDtib3JkZXItYm90dG9tOjZweCBzb2xpZCAjZWJlYmVifS5jYXJkX19maWd1cmV7ei1pbmRleDoxO3dpZHRoOjEwMCU7aGVpZ2h0OmF1dG87bWFyZ2luOjA7bGluZS1oZWlnaHQ6MH0uY2FyZF9fY29udGVudCwuY2FyZF9fZmlndXJle3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjB9LmNhcmRfX2NvbnRlbnR7ei1pbmRleDoyfS5jYXJkX19sYWJlbHtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDstbXMtZmxleC1pdGVtLWFsaWduOnN0YXJ0O2FsaWduLXNlbGY6ZmxleC1zdGFydDtvdmVyZmxvdzpoaWRkZW47aGVpZ2h0OmF1dG87bWF4LWhlaWdodDoxOHB4O3BhZGRpbmc6MCA0cHg7Zm9udDpub3JtYWwgNDAwIDEwMCUgVGF6Qm9sZCxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTouODc1cmVtO2xpbmUtaGVpZ2h0OjEuMTI1cmVtO2NvbG9yOiNmZmY7bGV0dGVyLXNwYWNpbmc6LjA0Njg4cmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kLWNvbG9yOiNkNzA2MGM7LXdlYmtpdC1saW5lLWNsYW1wOjE7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsfS5jYXJkX190aXRsZXtkaXNwbGF5Oi13ZWJraXQtYm94O292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6YXV0bztmb250Om5vcm1hbCA0MDAgMTAwJSBUYXpCbGFjayxzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxLjVyZW07bGluZS1oZWlnaHQ6MS41NjI1cmVtO2NvbG9yOiMwMDA7bGV0dGVyLXNwYWNpbmc6LjAyNXJlbTttYXgtaGVpZ2h0OjEuNTYyNXJlbTstd2Via2l0LWxpbmUtY2xhbXA6MTstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWx9LmNhcmRfX2xlYWR7ZGlzcGxheTotd2Via2l0LWJveDtvdmVyZmxvdzpoaWRkZW47bWFyZ2luLXRvcDo2cHg7Zm9udDpub3JtYWwgNDAwIDEwMCUgVGF6UmVndWxhcixzYW5zLXNlcmlmO2ZvbnQtc2l6ZTouOTM3NXJlbTtsaW5lLWhlaWdodDoxLjEyNXJlbTtjb2xvcjojMDAwO2xldHRlci1zcGFjaW5nOjA7LXdlYmtpdC1saW5lLWNsYW1wOjU7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsO21heC1oZWlnaHQ6NS42MjVyZW19LmNhcmQ6YWZ0ZXJ7ZGlzcGxheTpibG9jaztoZWlnaHQ6NnB4O2JhY2tncm91bmQtY29sb3I6I2U2ZTZlNn0uY2FyZCAuZW5nYWdlbWVudF9iYXJfX21ldGFfd3JhcHttYXJnaW4tdG9wOjJweH0uY2FyZC5pcy1Be3BhZGRpbmc6MH0uY2FyZC5pcy1BIC5jYXJkX190aXRsZXt3aWR0aDoyODhweDttYXJnaW46NnB4IDAgMDtmb250LXNpemU6MS4zMTI1cmVtO2xpbmUtaGVpZ2h0OjEuMzc1cmVtO2xldHRlci1zcGFjaW5nOi4wMjQzOHJlbTstd2Via2l0LWxpbmUtY2xhbXA6MzttYXgtaGVpZ2h0OjQuMTI1cmVtfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MzYwcHgpey5jYXJkLmlzLUEgLmNhcmRfX3RpdGxle3dpZHRoOjMyOHB4O2ZvbnQtc2l6ZToxLjVyZW07bGluZS1oZWlnaHQ6MS41NjI1cmVtO2xldHRlci1zcGFjaW5nOi4wMjc1cmVtO21heC1oZWlnaHQ6NC42ODc1cmVtfX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOjM3NXB4KXsuY2FyZC5pcy1BIC5jYXJkX190aXRsZXt3aWR0aDozNDNweDtmb250LXNpemU6MS41Njg3NXJlbTtsaW5lLWhlaWdodDoxLjYyNXJlbTtsZXR0ZXItc3BhY2luZzouMDI4NzVyZW07bWF4LWhlaWdodDo0Ljg3NXJlbX19QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDo0MTFweCl7LmNhcmQuaXMtQSAuY2FyZF9fdGl0bGV7d2lkdGg6Mzc5cHg7Zm9udC1zaXplOjEuNzMzMTNyZW07bGluZS1oZWlnaHQ6MS44MTI1cmVtO2xldHRlci1zcGFjaW5nOi4wMzE4OHJlbTttYXgtaGVpZ2h0OjUuNDM3NXJlbX19LmNhcmQuaXMtQSAuY2FyZF9fY29udGVudHttYXJnaW4tdG9wOi0xOHB4O3BhZGRpbmc6MCAxNnB4fS5jYXJkLmlzLUEgLmNhcmRfX2xlYWR7ZGlzcGxheTotd2Via2l0LWJveH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMjNweCl7LmNhcmQuaXMtQSAuZW5nYWdlbWVudF9iYXJfX21ldGFfd3JhcHttYXJnaW4tcmlnaHQ6MTZweDttYXJnaW4tbGVmdDoxNnB4fX0uY2FyZC5pcy1BIC5jYXJkX190aXRsZXttYXJnaW46NnB4IDAgMH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMjNweCl7c2VjdGlvbi5zZWN0aW9uOmZpcnN0LW9mLXR5cGU+c2VjdGlvbjpmaXJzdC1vZi10eXBlIC5jb2x1bW46Zmlyc3Qtb2YtdHlwZT4uY2FyZDpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOjE2cHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTAyM3B4KXtzZWN0aW9uLnNlY3Rpb246Zmlyc3Qtb2YtdHlwZT5zZWN0aW9uOmZpcnN0LW9mLXR5cGUgLmNvbHVtbjpmaXJzdC1vZi10eXBlPi5jYXJkOmZpcnN0LWNoaWxkLmlzLUF7bWFyZ2luLXRvcDowfX0uYXJ0aWNsZV9faW1hZ2Vfd3JhcCAuaGFzLTMtaW1hZ2VzIGltZzpmaXJzdC1jaGlsZHstbXMtZ3JpZC1yb3c6MTstbXMtZ3JpZC1yb3ctc3BhbjozOy1tcy1ncmlkLWNvbHVtbjoxO2dyaWQtYXJlYTphfS5hcnRpY2xlX19pbWFnZV93cmFwIC5oYXMtMy1pbWFnZXMgaW1nOm50aC1jaGlsZCgyKXstbXMtZ3JpZC1yb3c6MTstbXMtZ3JpZC1jb2x1bW46MztncmlkLWFyZWE6Yn0uYXJ0aWNsZV9faW1hZ2Vfd3JhcCAuaGFzLTMtaW1hZ2VzIGltZzpudGgtY2hpbGQoMyl7LW1zLWdyaWQtcm93OjM7LW1zLWdyaWQtY29sdW1uOjM7Z3JpZC1hcmVhOmN9LnBpZWNlc193aWRnZXR7cGFkZGluZzoxNHB4IDE2cHggMThweCAxNnB4O2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNX0ucGllY2VzX3dpZGdldF9fY29udGVudHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5waWVjZXNfd2lkZ2V0LS1Db3ZpZHtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjp1bnNldH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMjNweCl7LnBpZWNlc193aWRnZXQtLUNvdmlke21hcmdpbi1ib3R0b206MTZweH19LnBpZWNlc193aWRnZXQtLUNvdmlkIC5waWVjZXt3aWR0aDoxMDAlfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YXtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2hlaWdodDo0OHB4O2JvcmRlci1ib3R0b206NnB4IHNvbGlkICNlYmViZWI7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lfS5jYXJkIC5lbmdhZ2VtZW50X2Jhcl9fbWV0YXtoZWlnaHQ6NDJweH0uY2FyZCAuZW5nYWdlbWVudF9iYXJfX21ldGF7Ym9yZGVyLWJvdHRvbTowfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVte3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtZmxleDoxOy1tcy1mbGV4OjEgMSAzMy4zMyU7ZmxleDoxIDEgMzMuMzMlOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd30uZW5nYWdlbWVudF9iYXJfX21ldGFfaXRlbSAuaWNvbnttYXJnaW4tcmlnaHQ6NHB4O2ZvbnQtc2l6ZToxLjVyZW19LmVuZ2FnZW1lbnRfYmFyX19tZXRhX2l0ZW0gLmljb24uaXMtc21hbGx7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDttYXJnaW4tcmlnaHQ6LTRweH0uZW5nYWdlbWVudF9iYXJfX21ldGFfaXRlbSAuaWNvbi5pcy1zbWFsbDpmaXJzdC1vZi10eXBle3otaW5kZXg6M30uZW5nYWdlbWVudF9iYXJfX21ldGFfaXRlbSAuaWNvbi5pcy1zbWFsbDpudGgtb2YtdHlwZSgyKXt6LWluZGV4OjJ9LmVuZ2FnZW1lbnRfYmFyX19tZXRhX2l0ZW0gLmljb24uaXMtc21hbGw6bnRoLW9mLXR5cGUoMyl7ei1pbmRleDoxfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVtIC5pY29uX3dyYXB7aGVpZ2h0OjI0cHh9LmVuZ2FnZW1lbnRfYmFyX19tZXRhX2l0ZW1fd3JhcHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVtPmRpdj5zcGFuLC5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVtX3dyYXB7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVtPmRpdj5zcGFue2xpbmUtaGVpZ2h0Oi45Mzc1cmVtfS5lbmdhZ2VtZW50X2Jhcl9fbWV0YV9pdGVtLS1jb3VudCwuZW5nYWdlbWVudF9iYXJfX21ldGFfaXRlbT5kaXY+c3BhbnttYXJnaW4tbGVmdDo0cHg7Zm9udDpub3JtYWwgNDAwIDEwMCUgVGF6UmVndWxhcixzYW5zLXNlcmlmO2ZvbnQtc2l6ZTouODEyNXJlbTtjb2xvcjpyZ2JhKDAsMCwwLC42NCl9LmVuZ2FnZW1lbnRfYmFyX19tZXRhX2l0ZW0tLWNvdW50e2xpbmUtaGVpZ2h0OjFyZW19Lmhhcy1yZWFjdGlvbnMgLmVuZ2FnZW1lbnRfYmFyX19tZXRhX2l0ZW0tLXJlYWN0aW9uey13ZWJraXQtYm94LWZsZXg6MTstbXMtZmxleDoxIDEgNTAlO2ZsZXg6MSAxIDUwJX0uc2VjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnNlY3Rpb24tLWFydGljbGUgLmRmcF9iYW5uZXItLXJlY3RhbmdsZV90b3AgW2lkJD1fX2NvbnRhaW5lcl9fXXttYXJnaW46MjBweCBhdXRvIDB9LmJyZWFraW5nX3RpY2tlcntwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW46MTZweCBhdXRvfS5icmVha2luZ190aWNrZXJfX2xpbmt7Y29sb3I6IzAwMH0uYnJlYWtpbmdfdGlja2VyX19jb250ZW50e2Rpc3BsYXk6YmxvY2s7d2lkdGg6Mjg4cHg7bWFyZ2luOjAgYXV0bztmb250Om5vcm1hbCA0MDAgMTAwJSBUYXpCbGFjayxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTouOTY5MzdyZW07bGluZS1oZWlnaHQ6MS4wNjI1cmVtO2xldHRlci1zcGFjaW5nOi4wMTc1cmVtO3RleHQtYWxpZ246Y2VudGVyfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MzYwcHgpey5icmVha2luZ190aWNrZXJfX2NvbnRlbnR7d2lkdGg6MzI4cHg7Zm9udC1zaXplOjEuMTE1NjNyZW07bGluZS1oZWlnaHQ6MS4yNXJlbTtsZXR0ZXItc3BhY2luZzouMDIwNjNyZW19fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6Mzc1cHgpey5icmVha2luZ190aWNrZXJfX2NvbnRlbnR7d2lkdGg6MzQzcHg7Zm9udC1zaXplOjEuMTg0MzdyZW07bGluZS1oZWlnaHQ6MS4zMTI1cmVtO2xldHRlci1zcGFjaW5nOi4wMjE4N3JlbX19QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDo0MTFweCl7LmJyZWFraW5nX3RpY2tlcl9fY29udGVudHt3aWR0aDozNzlweDtmb250LXNpemU6MS4zNDkzN3JlbTtsaW5lLWhlaWdodDoxLjQzNzVyZW07bGV0dGVyLXNwYWNpbmc6LjAyNXJlbX19aW1nOi1tb3otYnJva2Vue29wYWNpdHk6MH1pbWd7cG9zaXRpb246cmVsYXRpdmV9aW1nOmFmdGVye2NvbnRlbnQ6IiAiO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZmZmfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTAyM3B4KXtib2R5e2JhY2tncm91bmQtY29sb3I6I2ZhZmFmYTtsZWZ0OjA7cmlnaHQ6MH19LmNhcmQgaW1ne3dpZHRoOjEwMCU7Zm9udC1zaXplOjA7bGluZS1oZWlnaHQ6MH1maWd1cmV7d2lkdGg6MTAwJTttYXJnaW46MDtmb250LXNpemU6MDtsaW5lLWhlaWdodDowfS5zaXRlX3dyYXB7cG9zaXRpb246cmVsYXRpdmU7bWF4LXdpZHRoOjQxNHB4O21pbi1oZWlnaHQ6MTAwdmg7bWFyZ2luOjAgYXV0bztwYWRkaW5nOjQ4cHggMCAwOy13ZWJraXQtYm94LXNoYWRvdzowIDAgOHB4IDAgcmdiYSgwLDAsMCwuMSk7Ym94LXNoYWRvdzowIDAgOHB4IDAgcmdiYSgwLDAsMCwuMSk7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5zaXRlX3dyYXAgLmNvbHVtbnN7bWFyZ2luOjB9LnNpdGVfd3JhcCAuY29sdW1uOm5vdCguaXMtc2lkZWJhcil7cGFkZGluZzowIWltcG9ydGFudH0uc2l0ZV93cmFwIC5hcnRpY2xlIC5kZnBfYmFubmVye21hcmdpbi1ib3R0b206MjBweH0uaXMtc2hhZG93bGVzc3std2Via2l0LWJveC1zaGFkb3c6bm9uZSFpbXBvcnRhbnQ7Ym94LXNoYWRvdzpub25lIWltcG9ydGFudH0KICAgICAgICAKICAgIAo8L3N0eWxlPgoKCgogICAgCiAgICAKICAgIAogICAgICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Rpc3QvY3NzL2FwcC4zNWU0ZjQxNi5jc3MiPgogICAgCgogICAgCiAgICAKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9kaXN0L2Nzcy92ZW5kb3JzLWluaXRpYWwuMDA0NDUyMzAuY3NzIj4KICAgIAoKICAgIAogICAgCiAgICAgICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvZGlzdC9jc3MvcHJpbnQuZDVkNzUzNTEuY3NzIiBtZWRpYT0icHJpbnQiPgogICAgCgogICAgCiAgICAKICAgIAogICAgICAgIDxsaW5rIHJlbD0icHJlZmV0Y2giIGhyZWY9Ii9kaXN0L2pzL3ZlbmRvcnMtYXN5bmMuYWJhN2IwZTEuanMiPgogICAgCgoKPCEtLSBTY3JpcHQgZm9yIERpZG9taSBpbml0aWFsaXphdGlvbiAtLT4KCgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij53aW5kb3cuZ2RwckFwcGxpZXNHbG9iYWxseT10cnVlOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGEoZSl7aWYoIXdpbmRvdy5mcmFtZXNbZV0pe2lmKGRvY3VtZW50LmJvZHkmJmRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCl7dmFyIHQ9ZG9jdW1lbnQuYm9keTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTtuLnN0eWxlLmRpc3BsYXk9Im5vbmUiO24ubmFtZT1lO24udGl0bGU9ZTt0Lmluc2VydEJlZm9yZShuLHQuZmlyc3RDaGlsZCl9CmVsc2V7c2V0VGltZW91dChmdW5jdGlvbigpe2EoZSl9LDUpfX19ZnVuY3Rpb24gZShuLHIsbyxjLHMpe2Z1bmN0aW9uIGUoZSx0LG4sYSl7aWYodHlwZW9mIG4hPT0iZnVuY3Rpb24iKXtyZXR1cm59aWYoIXdpbmRvd1tyXSl7d2luZG93W3JdPVtdfXZhciBpPWZhbHNlO2lmKHMpe2k9cyhlLHQsbil9aWYoIWkpe3dpbmRvd1tyXS5wdXNoKHtjb21tYW5kOmUscGFyYW1ldGVyOnQsY2FsbGJhY2s6bix2ZXJzaW9uOmF9KX19ZS5zdHViPXRydWU7ZnVuY3Rpb24gdChhKXtpZighd2luZG93W25dfHx3aW5kb3dbbl0uc3R1YiE9PXRydWUpe3JldHVybn1pZighYS5kYXRhKXtyZXR1cm59CnZhciBpPXR5cGVvZiBhLmRhdGE9PT0ic3RyaW5nIjt2YXIgZTt0cnl7ZT1pP0pTT04ucGFyc2UoYS5kYXRhKTphLmRhdGF9Y2F0Y2godCl7cmV0dXJufWlmKGVbb10pe3ZhciByPWVbb107d2luZG93W25dKHIuY29tbWFuZCxyLnBhcmFtZXRlcixmdW5jdGlvbihlLHQpe3ZhciBuPXt9O25bY109e3JldHVyblZhbHVlOmUsc3VjY2Vzczp0LGNhbGxJZDpyLmNhbGxJZH07YS5zb3VyY2UucG9zdE1lc3NhZ2UoaT9KU09OLnN0cmluZ2lmeShuKTpuLCIqIil9LHIudmVyc2lvbil9fQppZih0eXBlb2Ygd2luZG93W25dIT09ImZ1bmN0aW9uIil7d2luZG93W25dPWU7aWYod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIix0LGZhbHNlKX1lbHNle3dpbmRvdy5hdHRhY2hFdmVudCgib25tZXNzYWdlIix0KX19fWUoIl9fdGNmYXBpIiwiX190Y2ZhcGlCdWZmZXIiLCJfX3RjZmFwaUNhbGwiLCJfX3RjZmFwaVJldHVybiIpO2EoIl9fdGNmYXBpTG9jYXRvciIpOyhmdW5jdGlvbihlKXsKICB2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTt0LmlkPSJzcGNsb2FkZXIiO3QudHlwZT0idGV4dC9qYXZhc2NyaXB0Ijt0LmFzeW5jPXRydWU7dC5zcmM9Imh0dHBzOi8vc2RrLnByaXZhY3ktY2VudGVyLm9yZy8iK2UrIi9sb2FkZXIuanM/dGFyZ2V0PSIrZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWU7dC5jaGFyc2V0PSJ1dGYtOCI7dmFyIG49ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpWzBdO24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxuKX0pKCI0OWUyZGQyMS01MDlmLTRlMzEtOWY0ZS0zNDgwOGFmM2NiMzYiKX0pKCk7PC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CndpbmRvdy5kaWRvbWlDb25maWcgPSB7CiAgICB1c2VyOiB7CiAgICAgICAgYm90czogewogICAgICAgICAgICBjb25zZW50UmVxdWlyZWQ6IGZhbHNlLAogICAgICAgICAgICB0eXBlczogWydjcmF3bGVycycsICdwZXJmb3JtYW5jZSddLAogICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZGlkb21pLmlvL2NtcC93ZWItc2RrL2NvbnNlbnQtbm90aWNlL2JvdHMKICAgICAgICAgICAgZXh0cmFVc2VyQWdlbnRzOiBbJ2NYZW5zZWJvdCcsICdMaWdodGhvdXNlJ10sCiAgICAgICAgfQogICAgfQp9Owo8L3NjcmlwdD4KCgoKPCEtLSBnZW5lcmljIC0tPgo8bGluayByZWw9Imljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgaHJlZj0iL3N0YXRpYy9mYXZpY29uLmljbyIgLz4KCjwhLS0gZ2VuZXJpY3MgLS0+CjxsaW5rIHJlbD0iaWNvbiIgaHJlZj0iL3N0YXRpYy9mYXZpY29ucy9mYXZpY29uLTMyLnBuZyIgc2l6ZXM9IjMyeDMyIj4KPGxpbmsgcmVsPSJpY29uIiBocmVmPSIvc3RhdGljL2Zhdmljb25zL2Zhdmljb24tMTI4LnBuZyIgc2l6ZXM9IjEyOHgxMjgiPgo8bGluayByZWw9Imljb24iIGhyZWY9Ii9zdGF0aWMvZmF2aWNvbnMvZmF2aWNvbi0xOTIucG5nIiBzaXplcz0iMTkyeDE5MiI+Cgo8IS0tIEFuZHJvaWQgLS0+CjxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgc2l6ZXM9IjE5NngxOTYiIGhyZWY9Ii9zdGF0aWMvZmF2aWNvbnMvZmF2aWNvbi0xOTYucG5nIj4KCjwhLS0gaU9TIC0tPgo8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIGhyZWY9Ii9zdGF0aWMvZmF2aWNvbnMvZmF2aWNvbi0xNTIucG5nIiBzaXplcz0iMTUyeDE1MiI+CjxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iL3N0YXRpYy9mYXZpY29ucy9mYXZpY29uLTE4MC5wbmciIHNpemVzPSIxODB4MTgwIj4KCjwhLS0gV2luZG93cyA4LjEgKyBJRTExIGFuZCBhYm92ZSAtLT4KPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1jb25maWciIGNvbnRlbnQ9Ii9zdGF0aWMvZmF2aWNvbnMvYnJvd3NlcmNvbmZpZy54bWwiIC8+CgoKICAgIDxsaW5rIHJlbD0ibWFuaWZlc3QiIGhyZWY9Ii9kaXN0L21hbmlmZXN0Lmpzb24iIGNyb3Nzb3JpZ2luPSJ1c2UtY3JlZGVudGlhbHMiPgoKCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9zdGF0aWMvdmVuZG9ycy9pZnJhbWVSZXNpemVyLm1pbi5qcyIgYXN5bmM+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vY2RuLm1pZGFzLW5ldHdvcmsuY29tL0NvbW1vbi9HZXRVc2VySWRBc3luYy83NjkiIGFzeW5jPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2Nkbi5qd3BsYXllci5jb20vbGlicmFyaWVzL2RIYXdPRXZwLmpzIiBhc3luYz48L3NjcmlwdD4KCgoKICAgIDxzY3JpcHQgZGF0YS1jZmFzeW5jPSJmYWxzZSIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAoZnVuY3Rpb24odywgZCkgewogICAgICAgICAgICB2YXIgcyA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgICAgIHMuc3JjID0gJy8vY2RuLmFkcHVzaHVwLmNvbS80Mjc3My9hZHB1c2h1cC5qcyc7CiAgICAgICAgICAgIHMuY3Jvc3NPcmlnaW49J2Fub255bW91cyc7CiAgICAgICAgICAgIHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOyBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgICAgKGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSB8fCBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0pLmFwcGVuZENoaWxkKHMpOwogICAgICAgICAgICB3LmFkcHVzaHVwID0gdy5hZHB1c2h1cCB8fCB7cXVlOltdfTsKICAgICAgICB9KSh3aW5kb3csIGRvY3VtZW50KTsKICAgIDwvc2NyaXB0PgoKCiAgICAgICAgCjxzY3JpcHQ+CiAgICBkb2N1bWVudC5jb29raWUgPSAnX19hZGJsb2NrZXI9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UOyBwYXRoPS8nOwogICAgdmFyIHNldE5wdFRlY2hBZGJsb2NrZXJDb29raWUgPSBmdW5jdGlvbihhZGJsb2NrZXIpIHsKICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgICAgICAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgNjAgKiA1ICogMTAwMCk7CiAgICAgICAgZG9jdW1lbnQuY29va2llID0gJ19fYWRibG9ja2VyPScgKyAoYWRibG9ja2VyID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAnOyBleHBpcmVzPScgKyBkLnRvVVRDU3RyaW5nKCkgKyAnOyBwYXRoPS8nOwogICAgfTsKICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgdHJ1ZSk7CiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCAnLy93d3cubnB0dGVjaC5jb20vYWR2ZXJ0aXNpbmcuanMnKTsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ29uZXJyb3InLCAnc2V0TnB0VGVjaEFkYmxvY2tlckNvb2tpZSh0cnVlKTsnKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyaXB0KTsKPC9zY3JpcHQ+CgoKPHNjcmlwdD4KICAgIChmdW5jdGlvbihzcmMpIHsKICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgIGEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgIGEuYXN5bmMgPSB0cnVlOwogICAgICAgIGEuc3JjID0gc3JjOwogICAgICAgIHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOwogICAgICAgIGIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgYikKICAgIH0pKCcvL2V4cGVyaWVuY2UudGlueXBhc3MuY29tL3hidWlsZGVyL2V4cGVyaWVuY2UvbG9hZD9haWQ9cUJUN05aYTdwdScpOwo8L3NjcmlwdD4KCgo8c2NyaXB0PgogICAgdHAgPSB3aW5kb3cudHAgfHwgW107CgogICAgCiAgICB0cC5wdXNoKFsnaW5pdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICB0cC5lbmFibGVHQUNyb3NzRG9tYWluTGlua2luZygnVUEtOTg3ODYxMzAtMScpOwogICAgICAgIHRwLmV4cGVyaWVuY2UuaW5pdCgpOwogICAgfV0pOwoKICAgIHRwLnB1c2goWydhZGRIYW5kbGVyJywgJ2N1c3RvbUV2ZW50JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgc3dpdGNoIChldmVudC5ldmVudE5hbWUpIHsKICAgICAgICAgICAgY2FzZSAndHJpZ2dlclVzZXJEYXRhJzoKICAgICAgICAgICAgICAgIHZhciBwaWFub0RhdGEgPSBldmVudC5wYXJhbXMucGFyYW1zLnNwbGl0KCcqKionKTsKCiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zRGF0YSA9IEpTT04ucGFyc2UocGlhbm9EYXRhWzBdKTsKICAgICAgICAgICAgICAgIHZhciB0ZXJtRGF0YSA9IEpTT04ucGFyc2UocGlhbm9EYXRhWzFdKTsKCiAgICAgICAgICAgICAgICB2YXIgY2hlY2tvdXREYXRhT2JqID0gewogICAgICAgICAgICAgICAgICAgIG9mZmVySWQ6IHBhcmFtc0RhdGEub2ZmZXJJZCwKICAgICAgICAgICAgICAgICAgICB0ZXJtSWQ6IHRlcm1EYXRhLnRlcm1JZCwKICAgICAgICAgICAgICAgICAgICB0cmFja2luZ0lkOiBwYXJhbXNEYXRhLnRyYWNraW5nSWQsCiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVJZDogcGFyYW1zRGF0YS50ZW1wbGF0ZUlkLAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0ZXJtRGF0YS5kZXNjcmlwdGlvbgogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlclVzZXJEYXRhTW9kYWwgPSBuZXcgQ3VzdG9tRXZlbnQoJ3RyaWdnZXJVc2VyRGF0YU1vZGFsJywgeyBkZXRhaWw6IGNoZWNrb3V0RGF0YU9iaiB9KTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuZGlzcGF0Y2hFdmVudCh0cmlnZ2VyVXNlckRhdGFNb2RhbCk7CgogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3RyaWdnZXJSZWdpc3Rlcic6CiAgICAgICAgICAgICAgICB2YXIgcGlhbm9UcmlnZ2VyUmVnaXN0ZXIgPSBuZXcgRXZlbnQoJ3BpYW5vVHJpZ2dlclJlZ2lzdHJhdGlvbicpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5kaXNwYXRjaEV2ZW50KHBpYW5vVHJpZ2dlclJlZ2lzdGVyKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICd0cmlnZ2VyTG9naW4nOgogICAgICAgICAgICAgICAgdmFyIHBpYW5vVHJpZ2dlckxvZ2luID0gbmV3IEV2ZW50KCdwaWFub1RyaWdnZXJMb2dpbicpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5kaXNwYXRjaEV2ZW50KHBpYW5vVHJpZ2dlckxvZ2luKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH1dKTsKPC9zY3JpcHQ+CgogICAgCgogICAgCiAgICAKICAgIAogICAgICAgIAogICAgICAgICAgICA8dGl0bGU+UGFsaW8ga29udGVqbmVyZSwgc3J1xaFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2EgfCAyNHNhdGE8L3RpdGxlPgo8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iUG9saWNpamEgamUgdWhpdGlsYSBpIHByaXR2b3JpbGEgMjUtZ29kacWhbmpha2Egb3N1bW5qacSNZW5vZyBkYSBqZSBwcmlqZSBkdmEgZGFuYSB6YXBhbGlvIHVsacSNbmUga29udGVqbmVyZSB6YSBzbWXEh2UgaSBvxaF0ZXRpbyBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmHFvnUgemFkYXJza2UgYm9sbmljZSwgcHJpb3DEh2lsYSBqZSBwb2xpY2lqYSB1IHNyaWplZHUuIj4KPG1ldGEgbmFtZT0ia2V5d29yZHMiIGNvbnRlbnQ9InBvxb5hcixrb250ZWpuZXJpLHphZGFyIj4KCiAgICA8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im1heC1pbWFnZS1wcmV2aWV3OmxhcmdlIj4KCgogICAgICAgIAogICAgCgoKICAgIAogICAgCgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpjYXJkIiBjb250ZW50PSJzdW1tYXJ5Ij4KICAgIDxtZXRhIG5hbWU9InR3aXR0ZXI6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy4yNHNhdGEuaHIvbmV3cy9wYWxpby1rb250ZWpuZXJlLXNydXNpby1yYW1wdS1pLW5hZHpvcm5lLWthbWVyZS1uYS11bGF6dS11LXphZGFyc2t1LWJvbG5pY3UtdWhpdGlsaS1zdS1nYS03NDA2OTYiPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjp0aXRsZSIgY29udGVudD0iUGFsaW8ga29udGVqbmVyZSwgc3J1xaFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2EiPgogICAgPG1ldGEgbmFtZT0idHdpdHRlcjpkZXNjcmlwdGlvbiIgY29udGVudD0iUG9saWNpamEgamUgdWhpdGlsYSBpIHByaXR2b3JpbGEgMjUtZ29kacWhbmpha2Egb3N1bW5qacSNZW5vZyBkYSBqZSBwcmlqZSBkdmEgZGFuYSB6YXBhbGlvIHVsacSNbmUga29udGVqbmVyZSB6YSBzbWXEh2UgaSBvxaF0ZXRpbyBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmHFvnUgemFkYXJza2UgYm9sbmljZSwgcHJpb3DEh2lsYSBqZSBwb2xpY2lqYSB1IHNyaWplZHUuIj4KICAgIAoKICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iUGFsaW8ga29udGVqbmVyZSwgc3J1xaFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2EiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9ImFydGljbGUiPgogICAgPG1ldGEgcHJvcGVydHk9Im9nOnVybCIgY29udGVudD0iaHR0cHM6Ly93d3cuMjRzYXRhLmhyL25ld3MvcGFsaW8ta29udGVqbmVyZS1zcnVzaW8tcmFtcHUtaS1uYWR6b3JuZS1rYW1lcmUtbmEtdWxhenUtdS16YWRhcnNrdS1ib2xuaWN1LXVoaXRpbGktc3UtZ2EtNzQwNjk2Ij4KICAgIDxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iUG9saWNpamEgamUgdWhpdGlsYSBpIHByaXR2b3JpbGEgMjUtZ29kacWhbmpha2Egb3N1bW5qacSNZW5vZyBkYSBqZSBwcmlqZSBkdmEgZGFuYSB6YXBhbGlvIHVsacSNbmUga29udGVqbmVyZSB6YSBzbWXEh2UgaSBvxaF0ZXRpbyBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmHFvnUgemFkYXJza2UgYm9sbmljZSwgcHJpb3DEh2lsYSBqZSBwb2xpY2lqYSB1IHNyaWplZHUuIj4KICAgIDxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjE1NzYyMDE1NDI2MDQ4NyI+CiAgICAKCiAgICA8bWV0YSBpdGVtcHJvcD0ibmFtZSIgY29udGVudD0iUGFsaW8ga29udGVqbmVyZSwgc3J1xaFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2EiPgogICAgPG1ldGEgaXRlbXByb3A9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJQb2xpY2lqYSBqZSB1aGl0aWxhIGkgcHJpdHZvcmlsYSAyNS1nb2RpxaFuamFrYSBvc3VtbmppxI1lbm9nIGRhIGplIHByaWplIGR2YSBkYW5hIHphcGFsaW8gdWxpxI1uZSBrb250ZWpuZXJlIHphIHNtZcSHZSBpIG/FoXRldGlvIGthbWVyZSBpIHJhbXB1IG5hIHVsYXp1IHUgZ2FyYcW+dSB6YWRhcnNrZSBib2xuaWNlLCBwcmlvcMSHaWxhIGplIHBvbGljaWphIHUgc3JpamVkdS4iPgogICAgPG1ldGEgaXRlbXByb3A9ImRhdGVQdWJsaXNoZWQiIGNvbnRlbnQ9IjIwMjEtMDEtMjAiPgogICAgCgoKICAgIAogICAgICAgIAo8IS0tIEdvb2dsZSBUYWcgTWFuYWdlciAtLT4KPHNjcmlwdD4KICAgIAo8L3NjcmlwdD4KPHNjcmlwdD4KICAgIChmdW5jdGlvbih3LGQscyxsLGkpe3dbbF09d1tsXXx8W107d1tsXS5wdXNoKHsnZ3RtLnN0YXJ0JzoKICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgICAgICAgaj1kLmNyZWF0ZUVsZW1lbnQocyksZGw9bCE9J2RhdGFMYXllcic/JyZsPScrbDonJztqLmFzeW5jPXRydWU7ai5zcmM9CiAgICAgICAgJy8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nK2krZGw7Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqLGYpOwogICAgICAgIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLVBDUkZGSzYnKTsKPC9zY3JpcHQ+CgoKICAgIDxzY3JpcHQgYXN5bmM9ImFzeW5jIiBpZD0iZ29vZ2xldGFnc2VydmljZXNfZ3B0X3NjcmlwdCIgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IGRhdGEtY2Zhc3luYz0iZmFsc2UiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgKGZ1bmN0aW9uICh3LCBkKSB7CiAgICAgICAgICAgIHZhciBzID0gZC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgICAgICAgICAgcy5zcmMgPSAiLy9kZWxpdmVyeS5hZHJlY292ZXIuY29tLzQyNDc5L2FkUmVjb3Zlci5qcyI7CiAgICAgICAgICAgIHMudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgICAgICAgICBzLmFzeW5jID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKCF3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAyNHB4KScpLm1hdGNoZXMpIHJldHVybjsKICAgICAgICAgICAgKAogICAgICAgICAgICAgICAgZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdIHx8IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXQogICAgICAgICAgICApLmFwcGVuZENoaWxkKHMpOwogICAgICAgIH0pKHdpbmRvdywgZG9jdW1lbnQpOwogICAgPC9zY3JpcHQ+CgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgdmFyIHlpZWxkbG92ZV9wcmV2ZW50X2F1dG9zdGFydCA9IHRydWU7CiAgICB2YXIgeWllbGRsb3ZlX2NtZCA9IHlpZWxkbG92ZV9jbWQgfHwgW107Cjwvc2NyaXB0PgoKPHNjcmlwdD4KICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKCjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKICAgIAoKPC9zY3JpcHQ+Cgo8IS0tIEdvb2dsZSBBbmFseXRpY3MgLS0+CjxzY3JpcHQgdHlwZT0iZGlkb21pL2phdmFzY3JpcHQiIGRhdGEtdmVuZG9yPSJjOmdvb2dsZWFuYS03d1dXaHFXRyIgZGF0YS1wdXJwb3Nlcz0ibWVhc3VyZV9jb250ZW50X3BlcmZvcm1hbmNlLGNvb2tpZXMsZGV2aWNlX2NoYXJhY3RlcmlzdGljcyxwcmlqZW5vc3AtYk1iRkhRYmIiPgogICAgKGZ1bmN0aW9uKGkscyxvLGcscixhLG0pe2lbJ0dvb2dsZUFuYWx5dGljc09iamVjdCddPXI7aVtyXT1pW3JdfHxmdW5jdGlvbigpewogICAgKGlbcl0ucT1pW3JdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9LGlbcl0ubD0xKm5ldyBEYXRlKCk7YT1zLmNyZWF0ZUVsZW1lbnQobyksCiAgICBtPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07YS5hc3luYz0xO2Euc3JjPWc7bS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLG0pCiAgICB9KSh3aW5kb3csZG9jdW1lbnQsJ3NjcmlwdCcsJy8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qcycsJ2dhJyk7CiAgICBnYSgnY3JlYXRlJywgJ1VBLTk4Nzg2MTMwLTEnLCAnYXV0bycsICdHMzYwJyApOwo8L3NjcmlwdD4KCgogICAgCgogICAgCiAgICAKICAgICAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuMjRzYXRhLmhyL25ld3MvcGFsaW8ta29udGVqbmVyZS1zcnVzaW8tcmFtcHUtaS1uYWR6b3JuZS1rYW1lcmUtbmEtdWxhenUtdS16YWRhcnNrdS1ib2xuaWN1LXVoaXRpbGktc3UtZ2EtNzQwNjk2IiAvPgogICAgICAgIAogICAgICAgIAogICAgICAgICAgICA8bGluayByZWw9ImFtcGh0bWwiIGhyZWY9Imh0dHBzOi8vd3d3LjI0c2F0YS5oci9hbXAvbmV3cy9wYWxpby1rb250ZWpuZXJlLXNydXNpby1yYW1wdS1pLW5hZHpvcm5lLWthbWVyZS1uYS11bGF6dS11LXphZGFyc2t1LWJvbG5pY3UtdWhpdGlsaS1zdS1nYS03NDA2OTYiIC8+CiAgICAgICAgCiAgICAKCgogICAgCiAgICAKICAgIAogICAgCgogICAgCgogICAgCiAgICAKCiAgICAKICAgICAgICA8bm9zY3JpcHQ+CiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGluayBocmVmPSIvZGlzdC9jc3Mvc3NyQXJ0aWNsZS40MmU1ODc2YS5jc3MiIHJlbD0ic3R5bGVzaGVldCI+CiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIDwvbm9zY3JpcHQ+CiAgICAKCgoKICAgIAo8L2hlYWQ+Cjxib2R5PgogICAgPCEtLSAqKiogU3RhcnQgVnVlSlMgQVBQICoqKiAtLT4KICAgIAogICAgICAgIAogICAgICAgICAgICA8bm9zY3JpcHQ+CiAgICA8aGVhZGVyPgogICAgICAgIAogICAgICAgIDx1bD4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLzI0cGx1cyI+UExVUys8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL25ld3MiPk5ld3M8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2hydmF0c2thIj5IcnZhdHNrYTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIva29yb25hdmlydXMiPktvcm9uYXZpcnVzPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9jcm5hLWtyb25pa2EtbmV3cyI+Q3JuYSBrcm9uaWthPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wb2xpdGlrYSI+UG9saXRpa2E8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3N2aWpldCI+U3ZpamV0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9rdmFrYTI0Ij5LdmFrYTI0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9rb2x1bW5lIj5Lb2x1bW5lPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWZvcm1lLW9kbWFoIj5SZWZvcm1lIG9kbWFoPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9uZXN0YWxpLXUtZG9tb3ZpbnNrb20tcmF0dSI+TmVzdGFsaTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY2l0YXRlbGppLXJlcG9ydGVyaSI+UmVwb3J0ZXJpPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wb3Ryb3NhYyI+UG90cm/FoWHEjTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc2hvdyI+U2hvdzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZmlsbSI+RmlsbW92aSBpIHNlcmlqZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbXV6aWthLyI+TXV6aWthPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kb21hY2UtenZpamV6ZGUiPkRvbWHEh2UgenZpamV6ZGU8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3N0cmFuZS16dmlqZXpkZSI+U3RyYW5lIHp2aWplemRlPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii91cHNzcyI+VXBzc3MhPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yZWFsaXR5Ij5SZWFsaXR5PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vdmlkZW90ZWthLjI0c2F0YS5oci8iPlZpZGVvdGVrYTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvc3BvcnQiPlNwb3J0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii96aW1za2Utb2xpbXBpanNrZS1pZ3JlLTIwMjItcGVraW5nIj5aT0kgUGVraW5nIDIwMjIuPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ub2dvbWV0Ij5Ob2dvbWV0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ydWtvbWV0Ij5SdWtvbWV0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9rb3NhcmthIj5Lb8WhYXJrYTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZmlnaHQtY2x1YiI+RmlnaHQgY2x1YjwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdGVuaXMiPlRlbmlzPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9za2lqYW5qZSI+U2tpamFuamU8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZhdGVycG9sbyI+VmF0ZXJwb2xvPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hdGxldGlrYSI+QXRsZXRpa2E8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Zvcm11bGEtamVkYW4iPkZvcm11bGEgMTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbGlmZXN0eWxlIj5MaWZlJmFtcDtzdHlsZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbGp1YmF2LXNla3MiPkxqdWJhdiBpIHNla3M8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3pkcmF2bGplIj5aZHJhdmxqZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbW9kYSI+TW9kYTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbGplcG90YSI+TGplcG90YTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIva3VoYW5qZSI+S3VoYW5qZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHNpaG9sb2dpamEiPlBzaWhvbG9naWphPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9vYml0ZWxqIj5PYml0ZWxqPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9kb20iPkRvbTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHV0b3ZhbmphIj5QdXRvdmFuamE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2VrbyI+RWtvPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hc3RybyI+QXN0cm88L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3Bvc2FvIj5Qb3NhbzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdGVjaCI+U2NpL1RlY2g8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ludGVybmV0Ij5JbnRlcm5ldDwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZ2FkZ2V0aSI+R2FkZ2V0aTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZ2FtaW5nIj5HYW1pbmc8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2F1dG8iPkF1dG88L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3puYW5vc3QiPlpuYW5vc3Q8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2RpZ2l0YWwtdGFrZW92ZXIvIj5EaWdpdGFsIHRha2VvdmVyPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ib2xqZS1vYnJhem92YW5qZSI+Qm9samUgb2JyYXpvdmFuamU8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Z1biI+VmlyYWw8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Z1bi1mb3RrZSI+VmlyYWwgZm90a2U8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2Z1bi12aWRlbyI+RnVuIHZpZGVvPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9taXN0ZXJpamkiPk1pc3RlcmlqaTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZG9icmUtdmlqZXN0aSI+RG9icmUgdmlqZXN0aTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY3VkbmUtdmlqZXN0aSI+xIx1ZG5lIHZpamVzdGk8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ppdm90aW5qZSI+xb1pdm90aW5qZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbGp1YmltY2kiPkxqdWJpbWNpPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9ub24tc3RvcC1uYWdyYWRlLyI+TmFncmFkZSE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3ZpZGVvLyI+VmlkZW88L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuMjRzYXRhLmhyL3BsdXMiPkt1cGkgUExVUys8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9zaG9wYWoyNC5oci8iPlNob3BhajI0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMvc3BlY2lqYWxpLyI+U3BlY2lqYWxpPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9rb3JvbmF2aXJ1cyI+S29yb25hdmlydXM8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3JlZm9ybWUtb2RtYWgiPlJlZm9ybWUgb2RtYWg8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL25lc3RhbGktdS1kb21vdmluc2tvbS1yYXR1Ij5OZXN0YWxpPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMva29sdW1uZS8iPktvbHVtbmU8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2tvbHVtbmUiPlN2ZSBrb2x1bW5lPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9hdXRvcmkvdG9taXNsYXYta2xhdXNraS0yNTUyMSI+VG9taXNsYXYgS2xhdcWha2k8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2F1dG9yaS9ib3Jpcy1yYXNldGEtMTM5Ij5Cb3JpcyBSYcWhZXRhPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMvcGFydG5lcnNraS1wb3J0YWxpLyI+UGFydG5lcnNraSBwb3J0YWxpPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vbWlzczcuMjRzYXRhLmhyIj5taXNzNzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2V4cHJlc3MuMjRzYXRhLmhyLyI+RXhwcmVzczwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL21pc3M3emRyYXZhLjI0c2F0YS5oci8iPm1pc3NaRFJBVkE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9taXNzN21hbWEuMjRzYXRhLmhyLyI+bWlzc01BTUE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9nYXN0cm8uMjRzYXRhLmhyLyI+bWlzc0dBU1RSTzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL2pvb21ib29zLjI0c2F0YS5oci8iPkpvb21Cb29zPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnBvc2xvdm5pLmhyLyI+UG9zbG92bmkgZG5ldm5pazwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy5uanVza2Fsby5oci8iPk5qdcWha2FsbzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3d3dy52ZWNlcm5qaS5oci8iPlZlxI1lcm5qaSBsaXN0PC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnBpeHNlbGwuaHIvIj5QaXhzZWxsPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9rdmFrYTI0LyI+a3Zha2EyNDwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvdHJnb3ZpbmEtaS1kaXN0cmlidWNpamEiPlRyZ292aW5hIGkgZGlzdHJpYnVjaWphPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LjI0c2F0YS5oci9uYWdyYWRuaS1uYXRqZWNhaiI+TmFncmFkbmkgbmF0amXEjWFqPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9ImJpem5pcy1rb25mZXJlbmNpamEvIj5CSVpOSVMgS09ORkVSRU5DSUpBPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9yYWN1bm92b2RzdHZvLWktcG9yZXppIj5SYcSNdW5vdm9kc3R2byBpIHBvcmV6aTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZWxla3Ryb25pY2tvLXBvc2xvdmFuamUiPkVsZWt0cm9uacSNa28gcG9zbG92YW5qZTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZW5lcmdldHNrYS10cmFuemljaWphIj5FbmVyZ2V0c2thIHRyYW56aWNpamE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZsYXRwYWdlcy9pbXByZXNzdW0vIj5JbXByZXNzdW08L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly9wcmV0cGxhdGEuMjRzYXRhLmhyLyI+UHJldHBsYXRhPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9mbGF0cGFnZXMvdXZqZXRpLWtvcmlzdGVuamEvIj5VdmpldGkga29yacWhdGVuamE8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZsYXRwYWdlcy9wcmF2aWxhLXByaXZhdG5vc3RpLyI+UHJhdmlsYSBwcml2YXRub3N0aTwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZmxhdHBhZ2VzL29nbGFzYXZhbmplLyI+T2dsYcWhYXZhbmplPC9hPjwvbGk+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cuMjRzYXRhLmJpei8iPjI0c2F0YS5iaXo8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZsYXRwYWdlcy9wb2xpdGlrYS1rb2xhY2ljYS8iPlBvbGl0aWthIGtvbGHEjWnEh2E8L2E+PC9saT4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2ZsYXRwYWdlcy9yc3MiPlJTUzwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvZmxhdHBhZ2VzL2thcmlqZXJhLXUtMjRzYXRhLyI+S2FyaWplcmEgdSAyNDwvYT48L2xpPgogICAgICAgICAgICAKICAgICAgICA8L3VsPgogICAgICAgIAogICAgPC9oZWFkZXI+Cjwvbm9zY3JpcHQ+CgogICAgICAgIAoKICAgICAgICAKICAgICAgICAKICAgICAgICA8c2NyaXB0IGlkPSJpc1RlbXBsYXRlZEhvbWUiIHR5cGU9ImFwcGxpY2F0aW9uL2pzb24iPnRydWU8L3NjcmlwdD4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICB3aW5kb3cuaXNUZW1wbGF0ZWQgPSBKU09OLnBhcnNlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpc1RlbXBsYXRlZEhvbWUnKS50ZXh0Q29udGVudCkKICAgICAgICA8L3NjcmlwdD4KCiAgICAgICAgCgogICAgPHNjcmlwdCBpZD0iYXJ0aWNsZXNEYXRhU2NyaXB0IiB0eXBlPSJhcHBsaWNhdGlvbi9qc29uIj4ie1wiZGF0YVwiOiB7XCJ0eXBlXCI6IFwiYXJ0aWNsZVwiLCBcImlkXCI6IFwiNzQwNjk2XCIsIFwiYXR0cmlidXRlc1wiOiB7XCJ0aXRsZVwiOiBcIlBhbGlvIGtvbnRlam5lcmUsIHNydVxcdTAxNjFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2FcIiwgXCJsZWFkX3RleHRcIjogXCJQb2xpY2lqYSBqZSB1aGl0aWxhIGkgcHJpdHZvcmlsYSAyNS1nb2RpXFx1MDE2MW5qYWthIG9zdW1uamlcXHUwMTBkZW5vZyBkYSBqZSBwcmlqZSBkdmEgZGFuYSB6YXBhbGlvIHVsaVxcdTAxMGRuZSBrb250ZWpuZXJlIHphIHNtZVxcdTAxMDdlIGkgb1xcdTAxNjF0ZXRpbyBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmFcXHUwMTdldSB6YWRhcnNrZSBib2xuaWNlLCBwcmlvcFxcdTAxMDdpbGEgamUgcG9saWNpamEgdSBzcmlqZWR1LlwiLCBcInNsdWdcIjogXCJwYWxpby1rb250ZWpuZXJlLXNydXNpby1yYW1wdS1pLW5hZHpvcm5lLWthbWVyZS1uYS11bGF6dS11LXphZGFyc2t1LWJvbG5pY3UtdWhpdGlsaS1zdS1nYVwiLCBcImxhYmVsXCI6IFwiTUxBRElcXHUwMTA2IE9UUFJJSkUgUE9aTkFUIFBPTElDSUpJXCIsIFwibGlua1wiOiBcIi9uZXdzL3BhbGlvLWtvbnRlam5lcmUtc3J1c2lvLXJhbXB1LWktbmFkem9ybmUta2FtZXJlLW5hLXVsYXp1LXUtemFkYXJza3UtYm9sbmljdS11aGl0aWxpLXN1LWdhLTc0MDY5NlwiLCBcInB1Ymxpc2hfZGF0ZVwiOiBcIjIwMjEtMDEtMjBUMTE6MTg6MDArMDE6MDBcIiwgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLCBcImFydGljbGVfdHlwZVwiOiBcImFydGljbGVcIiwgXCJpc19wcmVtaXVtXCI6IGZhbHNlLCBcImlzX2Zvcl9jb21tZW50XCI6IHRydWUsIFwiaXNfbG9ja2VkXCI6IGZhbHNlLCBcImNyZWF0ZWRfZGF0ZVwiOiBcIjIwMjEtMDEtMjBUMTE6MDk6NTcuMTc1NDIwKzAxOjAwXCIsIFwibW9kaWZpZWRfZGF0ZVwiOiBcIjIwMjEtMDEtMjBUMTE6MTg6MTYuODUwNjMzKzAxOjAwXCIsIFwiY29udGVudFwiOiBbe1widGV4dFwiOiBcIlBvbGljaWphIHN1bW5qYSBkYSBqZSAyNS1nb2RpXFx1MDE2MW5qYWtcXHUwMGEwMTguIHNpamVcXHUwMTBkbmphIHUgbm9cXHUwMTA3bmltIHNhdGltYSB1XFx1MDBhMFpyaW5za28tRnJhbmtvcGFuc2tvaiB1bGljaSBuYW1qZXJubyBpemF6dmFvIHBvXFx1MDE3ZWFyIG5hIGtvbnRlam5lcnUgemEgc21lXFx1MDEwN2VcXHUwMGEwa29qaSBzZSBwcm9cXHUwMTYxaXJpbyBuYSBvc3RhbGEgZHZhIGtvbnRlam5lcmEuIER2YSBrb250ZWpuZXJhIHN1IGl6Z29yamVsYSwgZG9rIGplIHRyZVxcdTAxMDdpIGRqZWxvbWlcXHUwMTBkbm8gbmFnb3JpbyBrYW8gaSBvYmxpXFx1MDE3ZW5qYSByYXp2b2RuYSBrdXRpamEgemEgdGVsZWtvbXVuaWthY2lqdS4gTWF0ZXJpamFsbmEgXFx1MDE2MXRldGEgam9cXHUwMTYxIG5pamUgdXR2clxcdTAxMTFlbmEuXCIsIFwidHlwZVwiOiBcInBcIiwgXCJlbGVtZW50XCI6IFwiXHUwMDNDcFx1MDAzRVBvbGljaWphIHN1bW5qYSBkYSBqZSAyNS1nb2RpXFx1MDE2MW5qYWtcXHUwMGEwMTguIHNpamVcXHUwMTBkbmphIHUgbm9cXHUwMTA3bmltIHNhdGltYSB1XFx1MDBhMFpyaW5za28tRnJhbmtvcGFuc2tvaiB1bGljaSBuYW1qZXJubyBpemF6dmFvIHBvXFx1MDE3ZWFyIG5hIGtvbnRlam5lcnUgemEgc21lXFx1MDEwN2VcXHUwMGEwa29qaSBzZSBwcm9cXHUwMTYxaXJpbyBuYSBvc3RhbGEgZHZhIGtvbnRlam5lcmEuIER2YSBrb250ZWpuZXJhIHN1IGl6Z29yamVsYSwgZG9rIGplIHRyZVxcdTAxMDdpIGRqZWxvbWlcXHUwMTBkbm8gbmFnb3JpbyBrYW8gaSBvYmxpXFx1MDE3ZW5qYSByYXp2b2RuYSBrdXRpamEgemEgdGVsZWtvbXVuaWthY2lqdS4gTWF0ZXJpamFsbmEgXFx1MDE2MXRldGEgam9cXHUwMTYxIG5pamUgdXR2clxcdTAxMTFlbmEuXHUwMDNDL3BcdTAwM0VcIn0sIHtcInRleHRcIjogXCJNbGFkaVxcdTAxMDdhIGtvamkgamUgb3RwcmlqZSBwb3puYXQgemFkYXJza29qIHBvbGljaWppLCBzdW1uamlcXHUwMTBkZVxcdTAwYTBpIGRhIGplIGlzdGUgbm9cXHUwMTA3aSB1IFVsaWNpIExqdWRldml0YSBQb3NhdnNrb2cgbmFtamVybm8gb1xcdTAxNjF0ZXRpbyBkdmlqZSBuYWR6b3JuZSBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmFcXHUwMTdldSBib2xuaWNlIFxcdTAxMGRpbWUgamUgcHJpXFx1MDEwZGluaW8gbWF0ZXJpamFsbnUgXFx1MDE2MXRldHUgdmVcXHUwMTA3dSBvZCA1MC4wMDAga3VuYS5cIiwgXCJ0eXBlXCI6IFwicFwiLCBcImVsZW1lbnRcIjogXCJcdTAwM0NwXHUwMDNFTWxhZGlcXHUwMTA3YSBrb2ppIGplIG90cHJpamUgcG96bmF0IHphZGFyc2tvaiBwb2xpY2lqaSwgc3VtbmppXFx1MDEwZGVcXHUwMGEwaSBkYSBqZSBpc3RlIG5vXFx1MDEwN2kgdSBVbGljaSBManVkZXZpdGEgUG9zYXZza29nIG5hbWplcm5vIG9cXHUwMTYxdGV0aW8gZHZpamUgbmFkem9ybmUga2FtZXJlIGkgcmFtcHUgbmEgdWxhenUgdSBnYXJhXFx1MDE3ZXUgYm9sbmljZSBcXHUwMTBkaW1lIGplIHByaVxcdTAxMGRpbmlvIG1hdGVyaWphbG51IFxcdTAxNjF0ZXR1IHZlXFx1MDEwN3Ugb2QgNTAuMDAwIGt1bmEuXHUwMDNDL3BcdTAwM0VcIn0sIHtcImlkXCI6IFwiNzA3NzAyXCIsIFwic3JjXCI6IFwiXCIsIFwidHlwZVwiOiBcImFydGljbGVcIiwgXCJ0aXRsZVwiOiBcIk5hcnVcXHUwMTYxYXZhbGkgcmVkIGkgbWlyIHBhIG5hcGFsaSBwb2xpY2FqY2EgaSBqb1xcdTAxNjEgZHZvamljdSBuYSBwdW1waVwiLCBcImVsZW1lbnRcIjogXCJcdTAwM0N4LWlubGluZSBjdXN0b21fZGVzY3JpcHRpb249XFxcIlxcXCIgZW50aXR5PVxcXCJyZWxhdGVkQXJ0aWNsZVxcXCIgZmxvYXQ9XFxcImF1dG9cXFwiIGhlaWdodD1cXFwiYXV0b1xcXCIgaWQ9XFxcIjcwNzcwMlxcXCIgbW9kZWw9XFxcImNvbnRlbnQuYXJ0aWNsZVxcXCIgbW9kZWxpZD1cXFwiNzA3NzAyXFxcIiBwaz1cXFwiNzA3NzAyXFxcIiByZW5kZXI9XFxcInNlcnZlclxcXCIgc3JjPVxcXCJcXFwiIHRpdGxlPVxcXCJOYXJ1XFx1MDE2MWF2YWxpIHJlZCBpIG1pciBwYSBuYXBhbGkgcG9saWNhamNhIGkgam9cXHUwMTYxIGR2b2ppY3UgbmEgcHVtcGlcXFwiIHdpZHRoPVxcXCIxMDAlXFxcIlx1MDAzRVx1MDAzQy94LWlubGluZVx1MDAzRVwiLCBcImN1c3RvbV9kZXNjcmlwdGlvblwiOiBcIlwifSwge1widGV4dFwiOiBcIk9zaW0gdG9nYSwgcG9saWNpamEgc3VtbmphIGRhIGplIGkgMy4gcHJvc2luY2EgMjAxOS4gdSBHbGFnb2xqYVxcdTAxNjFrb2ogdWxpY2kgdSBaYWRydSBwcm92YWxpbyB1IGdyYVxcdTAxMTFldmluc2tpIGtvbnRlam5lclxcdTAwYTBpIG5hbWplcm5vIGdhIHphcGFsaW8gcHJpIFxcdTAxMGRlbXUgamUgaXpnb3JqZWxhIHZlXFx1MDEwN2Ega29saVxcdTAxMGRpbmEgZ3JhXFx1MDExMWV2aW5za29nIGFsYXRhIHZyaWplZG5vZyBva28gMTAwLjAwMCBrdW5hLlwiLCBcInR5cGVcIjogXCJwXCIsIFwiZWxlbWVudFwiOiBcIlx1MDAzQ3BcdTAwM0VPc2ltIHRvZ2EsIHBvbGljaWphIHN1bW5qYSBkYSBqZSBpIDMuIHByb3NpbmNhIDIwMTkuIHUgR2xhZ29samFcXHUwMTYxa29qIHVsaWNpIHUgWmFkcnUgcHJvdmFsaW8gdSBncmFcXHUwMTExZXZpbnNraSBrb250ZWpuZXJcXHUwMGEwaSBuYW1qZXJubyBnYSB6YXBhbGlvIHByaSBcXHUwMTBkZW11IGplIGl6Z29yamVsYSB2ZVxcdTAxMDdhIGtvbGlcXHUwMTBkaW5hIGdyYVxcdTAxMTFldmluc2tvZyBhbGF0YSB2cmlqZWRub2cgb2tvIDEwMC4wMDAga3VuYS5cdTAwM0MvcFx1MDAzRVwifSwge1widGV4dFwiOiBcIk5ha29uIGRvdnJcXHUwMTYxZW5vZyBrcmltaW5hbGlzdGlcXHUwMTBka29nIGlzdHJhXFx1MDE3ZWl2YW5qYSwgMjUtZ29kaVxcdTAxNjFuamFrIGplIHV6IGthem5lbmUgcHJpamF2ZSB6Ym9nIG9cXHUwMTYxdGVcXHUwMTA3ZW5qYSB0dVxcdTAxMTFlIHN0dmFyaSBpIGRvdm9cXHUwMTExZW5qYSB1IG9wYXNub3N0IFxcdTAxN2Vpdm90YSBpIGltb3ZpbmUgb3BcXHUwMTA3ZW9wYXNub20gcmFkbmpvbSBpbGkgc3JlZHN0dm9tIHByZWRhbiBwcml0dm9yc2tvbSBuYWR6b3JuaWt1IFBvbGljaWpza2UgdXByYXZlIHphZGFyc2tlLlwiLCBcInR5cGVcIjogXCJwXCIsIFwiZWxlbWVudFwiOiBcIlx1MDAzQ3BcdTAwM0VOYWtvbiBkb3ZyXFx1MDE2MWVub2cga3JpbWluYWxpc3RpXFx1MDEwZGtvZyBpc3RyYVxcdTAxN2VpdmFuamEsIDI1LWdvZGlcXHUwMTYxbmphayBqZSB1eiBrYXpuZW5lIHByaWphdmUgemJvZyBvXFx1MDE2MXRlXFx1MDEwN2VuamEgdHVcXHUwMTExZSBzdHZhcmkgaSBkb3ZvXFx1MDExMWVuamEgdSBvcGFzbm9zdCBcXHUwMTdlaXZvdGEgaSBpbW92aW5lIG9wXFx1MDEwN2VvcGFzbm9tIHJhZG5qb20gaWxpIHNyZWRzdHZvbSBwcmVkYW4gcHJpdHZvcnNrb20gbmFkem9ybmlrdSBQb2xpY2lqc2tlIHVwcmF2ZSB6YWRhcnNrZS5cdTAwM0MvcFx1MDAzRVwifV0sIFwiYWRzXCI6IHRydWUsIFwidGhyZWFkX2RlbGV0ZWRcIjogZmFsc2UsIFwidGhyZWFkX2xvY2tlZFwiOiBmYWxzZSwgXCJ0b3RhbF9yZWFjdGlvbl9jb3VudFwiOiAxLCBcImNvbW1lbnRfY291bnRcIjogMiwgXCJpc19yZWFjdGlvbl9ibG9ja2VkXCI6IGZhbHNlLCBcInZpZXdfY291bnRcIjogNDU1LCBcImZsYXNoX2V4dGVybmFsX2xpbmtcIjogbnVsbCwgXCJ0aHJlYWRfaWRcIjogNTc3Mjk1LCBcInByZW1pdW1fY29udGVudF90eXBlXCI6IG51bGwsIFwiaGFzX3ZpZGVvXCI6IGZhbHNlLCBcImhhc19lbWJlZF92aWRlb1wiOiBmYWxzZX0sIFwicmVsYXRpb25zaGlwc1wiOiB7XCJjb3Zlcl9pbWFnZVwiOiB7XCJkYXRhXCI6IG51bGx9LCBcInNlY3Rpb25zXCI6IHtcImRhdGFcIjogW3tcInR5cGVcIjogXCJzZWN0aW9uXCIsIFwiaWRcIjogXCIyXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwiVmlqZXN0aVwiLCBcInNsdWdcIjogXCJuZXdzXCIsIFwiaXNfc3BlY2lhbFwiOiBmYWxzZSwgXCJpc19wcmltYXJ5XCI6IHRydWUsIFwibGFiZWxcIjogXCJcIiwgXCJkZXNjcmlwdGlvblwiOiBcIlwiLCBcInNsdWdfcGF0aFwiOiBcIm5ld3NcIn0sIFwicmVsYXRpb25zaGlwc1wiOiB7XCJjb3Zlcl9pbWFnZVwiOiB7XCJkYXRhXCI6IG51bGx9fX0sIHtcInR5cGVcIjogXCJzZWN0aW9uXCIsIFwiaWRcIjogXCIxMlwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcIkNybmEga3JvbmlrYVwiLCBcInNsdWdcIjogXCJjcm5hLWtyb25pa2EtbmV3c1wiLCBcImlzX3NwZWNpYWxcIjogZmFsc2UsIFwiaXNfcHJpbWFyeVwiOiBmYWxzZSwgXCJsYWJlbFwiOiBcIlwiLCBcImRlc2NyaXB0aW9uXCI6IFwiXCIsIFwic2x1Z19wYXRoXCI6IFwibmV3cy9jcm5hLWtyb25pa2EtbmV3c1wifSwgXCJyZWxhdGlvbnNoaXBzXCI6IHtcImNvdmVyX2ltYWdlXCI6IHtcImRhdGFcIjogbnVsbH19fV0sIFwibGlua3NcIjoge1wicmVsYXRlZFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83NDA2OTYvc2VjdGlvbnNcIn0sIFwibWV0YVwiOiB7XCJjb3VudFwiOiAyfX0sIFwiYXV0aG9yc1wiOiB7XCJkYXRhXCI6IFt7XCJ0eXBlXCI6IFwiYXV0aG9yXCIsIFwiaWRcIjogXCI2MjVcIiwgXCJhdHRyaWJ1dGVzXCI6IHtcIm5hbWVcIjogXCJISU5BXCIsIFwic2x1Z1wiOiBcImhpbmFcIiwgXCJ0aXRsZVwiOiBcIlwifSwgXCJyZWxhdGlvbnNoaXBzXCI6IHtcImltYWdlXCI6IHtcImRhdGFcIjogbnVsbH19fV0sIFwibGlua3NcIjoge1wicmVsYXRlZFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83NDA2OTYvYXV0aG9yc1wifSwgXCJtZXRhXCI6IHtcImNvdW50XCI6IDF9fSwgXCJrZXl3b3Jkc1wiOiB7XCJkYXRhXCI6IFt7XCJ0eXBlXCI6IFwia2V5d29yZFwiLCBcImlkXCI6IFwiNTgwXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwicG9cXHUwMTdlYXJcIiwgXCJzbHVnXCI6IFwicG96YXJcIn19LCB7XCJ0eXBlXCI6IFwia2V5d29yZFwiLCBcImlkXCI6IFwiMTU1NDhcIiwgXCJhdHRyaWJ1dGVzXCI6IHtcIm5hbWVcIjogXCJrb250ZWpuZXJpXCIsIFwic2x1Z1wiOiBcImtvbnRlam5lcmlcIn19LCB7XCJ0eXBlXCI6IFwia2V5d29yZFwiLCBcImlkXCI6IFwiMTAwMzQxXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwiemFkYXJcIiwgXCJzbHVnXCI6IFwiemFkYXJcIn19XSwgXCJsaW5rc1wiOiB7XCJyZWxhdGVkXCI6IFwiaHR0cDovL2FwcC4yNHNhdGEuaHI6ODAwNC9mYXBpL2FydGljbGVzLzc0MDY5Ni9rZXl3b3Jkc1wifSwgXCJtZXRhXCI6IHtcImNvdW50XCI6IDN9fSwgXCJpbWFnZVwiOiB7XCJkYXRhXCI6IG51bGx9LCBcImxheW91dFwiOiB7XCJkYXRhXCI6IG51bGx9LCBcInNlb1wiOiB7XCJkYXRhXCI6IG51bGx9LCBcInNwZWNpYWxcIjoge1wiZGF0YVwiOiB7XCJ0eXBlXCI6IFwiYXJ0aWNsZS1zcGVjaWFsLWFydGljbGVcIiwgXCJpZFwiOiBcIjc0MDY5NlwiLCBcImF0dHJpYnV0ZXNcIjoge1wibG9nb19pbWFnZV91cmxcIjogbnVsbCwgXCJsb2dvX3VybFwiOiBudWxsLCBcImxvZ29fdGl0bGVcIjogbnVsbH0sIFwicmVsYXRpb25zaGlwc1wiOiB7XCJzcGVjaWFsX2NvdmVyX2ltYWdlXCI6IHtcImRhdGFcIjogbnVsbH19fX0sIFwibmF0aXZlXCI6IHtcImRhdGFcIjoge1widHlwZVwiOiBcImFydGljbGUtbmF0aXZlXCIsIFwiaWRcIjogXCI3NDA2OTZcIiwgXCJhdHRyaWJ1dGVzXCI6IHtcImhlYWRlcl91cmxcIjogbnVsbCwgXCJsb2dvX3VybFwiOiBudWxsLCBcImNsaWVudF9sYWJlbFwiOiBudWxsLCBcImNsaWVudF9uYW1lXCI6IG51bGx9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiaGVhZGVyX2ltYWdlXCI6IHtcImRhdGFcIjogbnVsbH0sIFwibG9nb19pbWFnZVwiOiB7XCJkYXRhXCI6IG51bGx9fX19LCBcInZpZGVvc1wiOiB7XCJkYXRhXCI6IFtdfSwgXCJnYWxsZXJpZXNcIjoge1wiZGF0YVwiOiBbXX0sIFwiaW1hZ2VzXCI6IHtcImRhdGFcIjogW119LCBcInJlbGF0ZWRfYXJ0aWNsZXNcIjoge1wiZGF0YVwiOiBbXX0sIFwibGl2ZVwiOiB7XCJkYXRhXCI6IG51bGx9LCBcInNlY3Rpb25cIjoge1wiZGF0YVwiOiB7XCJ0eXBlXCI6IFwic2VjdGlvblwiLCBcImlkXCI6IFwiMlwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcIlZpamVzdGlcIiwgXCJzbHVnXCI6IFwibmV3c1wiLCBcImlzX3NwZWNpYWxcIjogZmFsc2UsIFwiaXNfcHJpbWFyeVwiOiB0cnVlLCBcImxhYmVsXCI6IFwiXCIsIFwiZGVzY3JpcHRpb25cIjogXCJcIiwgXCJzbHVnX3BhdGhcIjogXCJuZXdzXCJ9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiY292ZXJfaW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19fSwgXCJzdWJzZWN0aW9uXCI6IHtcImRhdGFcIjoge1widHlwZVwiOiBcInNlY3Rpb25cIiwgXCJpZFwiOiBcIjEyXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwiQ3JuYSBrcm9uaWthXCIsIFwic2x1Z1wiOiBcImNybmEta3JvbmlrYS1uZXdzXCIsIFwiaXNfc3BlY2lhbFwiOiBmYWxzZSwgXCJpc19wcmltYXJ5XCI6IGZhbHNlLCBcImxhYmVsXCI6IFwiXCIsIFwiZGVzY3JpcHRpb25cIjogXCJcIiwgXCJzbHVnX3BhdGhcIjogXCJuZXdzL2NybmEta3JvbmlrYS1uZXdzXCJ9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiY292ZXJfaW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19fSwgXCJmaWxlc1wiOiB7XCJkYXRhXCI6IFtdfSwgXCJleHRyYV9jb250ZW50c1wiOiB7XCJkYXRhXCI6IFtdfSwgXCJyZWxhdGVkX3hpbmxpbmVfYXJ0aWNsZXNcIjoge1wiZGF0YVwiOiBbe1widHlwZVwiOiBcImFydGljbGVcIiwgXCJpZFwiOiBcIjcwNzcwMlwiLCBcImF0dHJpYnV0ZXNcIjoge1widGl0bGVcIjogXCJOYXJ1XFx1MDE2MWF2YWxpIHJlZCBpIG1pciBwYSBuYXBhbGkgcG9saWNhamNhIGkgam9cXHUwMTYxIGR2b2ppY3UgbmEgcHVtcGlcIiwgXCJsZWFkX3RleHRcIjogXCJUZW1lbGplbSBkb3NhZGFcXHUwMTYxbmppaCB1dHZyXFx1MDExMWVuaWggXFx1MDEwZGluamVuaWNhLCBwb2xpY2lqYSBpaCBzdW1uamlcXHUwMTBkaSBkYSBzdSAyMC4gc3JwbmphXFx1MDBhMCBuYSBiZW56aW5za29qIHBvc3RhamkgdSBLcmFsamV2aWNpIG5hcnVcXHUwMTYxYXZhbGkgamF2bmkgcmVkIGkgbWlyIHRlIHByaXRvbSBvemxpamVkaWxpIHRyaSBtamVcXHUwMTYxdGFuYS4gSmVkYW4gb2QgbmppaCBqZSBiaW8gaSBwb2xpY2FqYWNcIiwgXCJzbHVnXCI6IFwibmFydXNhdmFsaS1yZWQtaS1taXItcGEtbmFwYWxpLXBvbGljYWpjYS1pLWpvcy1kdm9qaWN1LW5hLXB1bXBpXCIsIFwibGFiZWxcIjogXCJcXHUwMTYwRVNUT1JJQ0EgVkFOIEtPTlRST0xFXCIsIFwibGlua1wiOiBcIi9uZXdzL25hcnVzYXZhbGktcmVkLWktbWlyLXBhLW5hcGFsaS1wb2xpY2FqY2EtaS1qb3MtZHZvamljdS1uYS1wdW1waS03MDc3MDJcIiwgXCJwdWJsaXNoX2RhdGVcIjogXCIyMDIwLTA3LTI0VDE3OjU3OjAwKzAyOjAwXCIsIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSwgXCJhcnRpY2xlX3R5cGVcIjogXCJhcnRpY2xlXCIsIFwiaXNfcHJlbWl1bVwiOiBmYWxzZX0sIFwicmVsYXRpb25zaGlwc1wiOiB7XCJjb3Zlcl9pbWFnZVwiOiB7XCJkYXRhXCI6IHtcInR5cGVcIjogXCJpbWFnZVwiLCBcImlkXCI6IFwiMTk1MzMyNVwifX0sIFwic2VjdGlvbnNcIjoge1wiZGF0YVwiOiBbe1widHlwZVwiOiBcInNlY3Rpb25cIiwgXCJpZFwiOiBcIjJcIn0sIHtcInR5cGVcIjogXCJzZWN0aW9uXCIsIFwiaWRcIjogXCIxMlwifV0sIFwibGlua3NcIjoge1wicmVsYXRlZFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83MDc3MDIvc2VjdGlvbnNcIn0sIFwibWV0YVwiOiB7XCJjb3VudFwiOiAyfX0sIFwiYXV0aG9yc1wiOiB7XCJkYXRhXCI6IFt7XCJ0eXBlXCI6IFwiYXV0aG9yXCIsIFwiaWRcIjogXCIyMTMxXCJ9XSwgXCJsaW5rc1wiOiB7XCJyZWxhdGVkXCI6IFwiaHR0cDovL2FwcC4yNHNhdGEuaHI6ODAwNC9mYXBpL2FydGljbGVzLzcwNzcwMi9hdXRob3JzXCJ9LCBcIm1ldGFcIjoge1wiY291bnRcIjogMX19LCBcImtleXdvcmRzXCI6IHtcImRhdGFcIjogW10sIFwibGlua3NcIjoge1wicmVsYXRlZFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83MDc3MDIva2V5d29yZHNcIn0sIFwibWV0YVwiOiB7XCJjb3VudFwiOiAwfX0sIFwibGl2ZVwiOiB7XCJkYXRhXCI6IG51bGx9LCBcInNlY3Rpb25cIjoge1wiZGF0YVwiOiB7XCJ0eXBlXCI6IFwic2VjdGlvblwiLCBcImlkXCI6IFwiMlwifX0sIFwic3Vic2VjdGlvblwiOiB7XCJkYXRhXCI6IHtcInR5cGVcIjogXCJzZWN0aW9uXCIsIFwiaWRcIjogXCIxMlwifX19LCBcIm1ldGFcIjoge1wiY29tbWVudF9jb3VudF91cmxcIjogXCJodHRwOi8vYXBwLjI0c2F0YS5ocjo4MDA0L2ZhcGkvYXJ0aWNsZXMvNzA3NzAyL2NvbW1lbnQtY291bnRcIiwgXCJ2aWV3X2NvdW50X3VybFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hbmFseXRpY3Mvb2JqZWN0L2NvbnRlbnQuYXJ0aWNsZS83MDc3MDJcIn19XX0sIFwicmVhY3Rpb25zXCI6IHtcImRhdGFcIjogW3tcInR5cGVcIjogXCJyZWFjdGlvbi1jb3VudGVyXCIsIFwiaWRcIjogXCIxMDQxODRcIn1dfSwgXCJhbGxfcmVhY3Rpb25zXCI6IHtcImRhdGFcIjogW3tcInR5cGVcIjogXCJyZWFjdGlvbi1jb3VudGVyXCIsIFwiaWRcIjogXCIxMDQxODRcIn1dfSwgXCJvd25fcmVhY3Rpb25cIjoge1wiZGF0YVwiOiBudWxsfSwgXCJwb3B1bGFyX2NvbW1lbnRzXCI6IHtcImRhdGFcIjogW3tcInR5cGVcIjogXCJjb21tZW50XCIsIFwiaWRcIjogXCIyNzE3NzkwMlwifSwge1widHlwZVwiOiBcImNvbW1lbnRcIiwgXCJpZFwiOiBcIjI3MTc2Mjk3XCJ9XX19LCBcIm1ldGFcIjoge1wiY29tbWVudF9jb3VudF91cmxcIjogXCJodHRwOi8vYXBwLjI0c2F0YS5ocjo4MDA0L2ZhcGkvYXJ0aWNsZXMvNzQwNjk2L2NvbW1lbnQtY291bnRcIiwgXCJ2aWV3X2NvdW50X3VybFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hbmFseXRpY3Mvb2JqZWN0L2NvbnRlbnQuYXJ0aWNsZS83NDA2OTZcIn19LCBcImluY2x1ZGVkXCI6IFt7XCJ0eXBlXCI6IFwiYXJ0aWNsZVwiLCBcImlkXCI6IFwiNzA3NzAyXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJ0aXRsZVwiOiBcIk5hcnVcXHUwMTYxYXZhbGkgcmVkIGkgbWlyIHBhIG5hcGFsaSBwb2xpY2FqY2EgaSBqb1xcdTAxNjEgZHZvamljdSBuYSBwdW1waVwiLCBcImxlYWRfdGV4dFwiOiBcIlRlbWVsamVtIGRvc2FkYVxcdTAxNjFuamloIHV0dnJcXHUwMTExZW5paCBcXHUwMTBkaW5qZW5pY2EsIHBvbGljaWphIGloIHN1bW5qaVxcdTAxMGRpIGRhIHN1IDIwLiBzcnBuamFcXHUwMGEwIG5hIGJlbnppbnNrb2ogcG9zdGFqaSB1IEtyYWxqZXZpY2kgbmFydVxcdTAxNjFhdmFsaSBqYXZuaSByZWQgaSBtaXIgdGUgcHJpdG9tIG96bGlqZWRpbGkgdHJpIG1qZVxcdTAxNjF0YW5hLiBKZWRhbiBvZCBuamloIGplIGJpbyBpIHBvbGljYWphY1wiLCBcInNsdWdcIjogXCJuYXJ1c2F2YWxpLXJlZC1pLW1pci1wYS1uYXBhbGktcG9saWNhamNhLWktam9zLWR2b2ppY3UtbmEtcHVtcGlcIiwgXCJsYWJlbFwiOiBcIlxcdTAxNjBFU1RPUklDQSBWQU4gS09OVFJPTEVcIiwgXCJsaW5rXCI6IFwiL25ld3MvbmFydXNhdmFsaS1yZWQtaS1taXItcGEtbmFwYWxpLXBvbGljYWpjYS1pLWpvcy1kdm9qaWN1LW5hLXB1bXBpLTcwNzcwMlwiLCBcInB1Ymxpc2hfZGF0ZVwiOiBcIjIwMjAtMDctMjRUMTc6NTc6MDArMDI6MDBcIiwgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLCBcImFydGljbGVfdHlwZVwiOiBcImFydGljbGVcIiwgXCJpc19wcmVtaXVtXCI6IGZhbHNlfSwgXCJyZWxhdGlvbnNoaXBzXCI6IHtcImNvdmVyX2ltYWdlXCI6IHtcImRhdGFcIjoge1widHlwZVwiOiBcImltYWdlXCIsIFwiaWRcIjogXCIxOTUzMzI1XCJ9fSwgXCJzZWN0aW9uc1wiOiB7XCJkYXRhXCI6IFt7XCJ0eXBlXCI6IFwic2VjdGlvblwiLCBcImlkXCI6IFwiMlwifSwge1widHlwZVwiOiBcInNlY3Rpb25cIiwgXCJpZFwiOiBcIjEyXCJ9XSwgXCJsaW5rc1wiOiB7XCJyZWxhdGVkXCI6IFwiaHR0cDovL2FwcC4yNHNhdGEuaHI6ODAwNC9mYXBpL2FydGljbGVzLzcwNzcwMi9zZWN0aW9uc1wifSwgXCJtZXRhXCI6IHtcImNvdW50XCI6IDJ9fSwgXCJhdXRob3JzXCI6IHtcImRhdGFcIjogW3tcInR5cGVcIjogXCJhdXRob3JcIiwgXCJpZFwiOiBcIjIxMzFcIn1dLCBcImxpbmtzXCI6IHtcInJlbGF0ZWRcIjogXCJodHRwOi8vYXBwLjI0c2F0YS5ocjo4MDA0L2ZhcGkvYXJ0aWNsZXMvNzA3NzAyL2F1dGhvcnNcIn0sIFwibWV0YVwiOiB7XCJjb3VudFwiOiAxfX0sIFwia2V5d29yZHNcIjoge1wiZGF0YVwiOiBbXSwgXCJsaW5rc1wiOiB7XCJyZWxhdGVkXCI6IFwiaHR0cDovL2FwcC4yNHNhdGEuaHI6ODAwNC9mYXBpL2FydGljbGVzLzcwNzcwMi9rZXl3b3Jkc1wifSwgXCJtZXRhXCI6IHtcImNvdW50XCI6IDB9fSwgXCJsaXZlXCI6IHtcImRhdGFcIjogbnVsbH0sIFwic2VjdGlvblwiOiB7XCJkYXRhXCI6IHtcInR5cGVcIjogXCJzZWN0aW9uXCIsIFwiaWRcIjogXCIyXCJ9fSwgXCJzdWJzZWN0aW9uXCI6IHtcImRhdGFcIjoge1widHlwZVwiOiBcInNlY3Rpb25cIiwgXCJpZFwiOiBcIjEyXCJ9fX0sIFwibWV0YVwiOiB7XCJjb21tZW50X2NvdW50X3VybFwiOiBcImh0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83MDc3MDIvY29tbWVudC1jb3VudFwiLCBcInZpZXdfY291bnRfdXJsXCI6IFwiaHR0cDovL2FwcC4yNHNhdGEuaHI6ODAwNC9mYXBpL2FuYWx5dGljcy9vYmplY3QvY29udGVudC5hcnRpY2xlLzcwNzcwMlwifX0sIHtcInR5cGVcIjogXCJhcnRpY2xlLW5hdGl2ZVwiLCBcImlkXCI6IFwiNzQwNjk2XCIsIFwiYXR0cmlidXRlc1wiOiB7XCJoZWFkZXJfdXJsXCI6IG51bGwsIFwibG9nb191cmxcIjogbnVsbCwgXCJjbGllbnRfbGFiZWxcIjogbnVsbCwgXCJjbGllbnRfbmFtZVwiOiBudWxsfSwgXCJyZWxhdGlvbnNoaXBzXCI6IHtcImhlYWRlcl9pbWFnZVwiOiB7XCJkYXRhXCI6IG51bGx9LCBcImxvZ29faW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19LCB7XCJ0eXBlXCI6IFwiYXJ0aWNsZS1zcGVjaWFsLWFydGljbGVcIiwgXCJpZFwiOiBcIjc0MDY5NlwiLCBcImF0dHJpYnV0ZXNcIjoge1wibG9nb19pbWFnZV91cmxcIjogbnVsbCwgXCJsb2dvX3VybFwiOiBudWxsLCBcImxvZ29fdGl0bGVcIjogbnVsbH0sIFwicmVsYXRpb25zaGlwc1wiOiB7XCJzcGVjaWFsX2NvdmVyX2ltYWdlXCI6IHtcImRhdGFcIjogbnVsbH19fSwge1widHlwZVwiOiBcImF1dGhvclwiLCBcImlkXCI6IFwiMjEzMVwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcIkl2YW4gR3JnYXRcIiwgXCJzbHVnXCI6IFwiaXZhbi1ncmdhdFwiLCBcInRpdGxlXCI6IFwiXCJ9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiaW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19LCB7XCJ0eXBlXCI6IFwiYXV0aG9yXCIsIFwiaWRcIjogXCI2MjVcIiwgXCJhdHRyaWJ1dGVzXCI6IHtcIm5hbWVcIjogXCJISU5BXCIsIFwic2x1Z1wiOiBcImhpbmFcIiwgXCJ0aXRsZVwiOiBcIlwifSwgXCJyZWxhdGlvbnNoaXBzXCI6IHtcImltYWdlXCI6IHtcImRhdGFcIjogbnVsbH19fSwge1widHlwZVwiOiBcImltYWdlXCIsIFwiaWRcIjogXCIxOTUzMzI1XCIsIFwiYXR0cmlidXRlc1wiOiB7XCJ3aWR0aFwiOiAxNjAwLCBcImhlaWdodFwiOiAxMTM2LCBcImNhcHRpb25cIjogXCJcIiwgXCJ0aXRsZVwiOiBcIlwiLCBcInVybFwiOiBcImh0dHBzOi8vYXBwLjI0c2F0YS5oci9tZWRpYS9pbWFnZXMvMjAyMC0yOS9pbWctMDhhZmQxMmNiZGZhNGMwYTYzMWNmNTlhYmNmNGI3ZDItdi5qcGdcIiwgXCJjcm9wXCI6IHt9LCBcImNyZWF0ZWRfZGF0ZVwiOiBcIjIwMjAtMDctMjRUMTc6NTc6MTYuMTY1MzIzKzAyOjAwXCJ9fSwge1widHlwZVwiOiBcImtleXdvcmRcIiwgXCJpZFwiOiBcIjEwMDM0MVwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcInphZGFyXCIsIFwic2x1Z1wiOiBcInphZGFyXCJ9fSwge1widHlwZVwiOiBcImtleXdvcmRcIiwgXCJpZFwiOiBcIjE1NTQ4XCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwia29udGVqbmVyaVwiLCBcInNsdWdcIjogXCJrb250ZWpuZXJpXCJ9fSwge1widHlwZVwiOiBcImtleXdvcmRcIiwgXCJpZFwiOiBcIjU4MFwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcInBvXFx1MDE3ZWFyXCIsIFwic2x1Z1wiOiBcInBvemFyXCJ9fSwge1widHlwZVwiOiBcInNlY3Rpb25cIiwgXCJpZFwiOiBcIjEyXCIsIFwiYXR0cmlidXRlc1wiOiB7XCJuYW1lXCI6IFwiQ3JuYSBrcm9uaWthXCIsIFwic2x1Z1wiOiBcImNybmEta3JvbmlrYS1uZXdzXCIsIFwiaXNfc3BlY2lhbFwiOiBmYWxzZSwgXCJpc19wcmltYXJ5XCI6IGZhbHNlLCBcImxhYmVsXCI6IFwiXCIsIFwiZGVzY3JpcHRpb25cIjogXCJcIiwgXCJzbHVnX3BhdGhcIjogXCJuZXdzL2NybmEta3JvbmlrYS1uZXdzXCJ9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiY292ZXJfaW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19LCB7XCJ0eXBlXCI6IFwic2VjdGlvblwiLCBcImlkXCI6IFwiMlwiLCBcImF0dHJpYnV0ZXNcIjoge1wibmFtZVwiOiBcIlZpamVzdGlcIiwgXCJzbHVnXCI6IFwibmV3c1wiLCBcImlzX3NwZWNpYWxcIjogZmFsc2UsIFwiaXNfcHJpbWFyeVwiOiB0cnVlLCBcImxhYmVsXCI6IFwiXCIsIFwiZGVzY3JpcHRpb25cIjogXCJcIiwgXCJzbHVnX3BhdGhcIjogXCJuZXdzXCJ9LCBcInJlbGF0aW9uc2hpcHNcIjoge1wiY292ZXJfaW1hZ2VcIjoge1wiZGF0YVwiOiBudWxsfX19XX0iPC9zY3JpcHQ+CgogICAgPGRpdiBpZD0iYXBwIj48L2Rpdj4KCiAgICAKICAgICAgICAKICAgICAgICAgICAgCgoKCgoKCjwhLS0gU2NoZW1hIE1hcmt1cCAtIGFydGljbGUgLS0+CjxzY3JpcHQgdHlwZT0iYXBwbGljYXRpb24vbGQranNvbiI+CnsKICAgICJAY29udGV4dCI6ICJodHRwczovL3NjaGVtYS5vcmciLAogICAgIkB0eXBlIjogIk5ld3NBcnRpY2xlIiwKICAgICJtYWluRW50aXR5T2ZQYWdlIjogewogICAgICAgICJAdHlwZSI6ICJXZWJQYWdlIiwKICAgICAgICAiQGlkIjogImh0dHBzOi8vd3d3LjI0c2F0YS5oci9uZXdzL3BhbGlvLWtvbnRlam5lcmUtc3J1c2lvLXJhbXB1LWktbmFkem9ybmUta2FtZXJlLW5hLXVsYXp1LXUtemFkYXJza3UtYm9sbmljdS11aGl0aWxpLXN1LWdhLTc0MDY5NiIKICAgIH0sCiAgICAiaW1hZ2UiOiB7CiAgICAgICAgIkB0eXBlIjogIkltYWdlT2JqZWN0IiwKICAgICAgICAidXJsIjogImh0dHBzOi8vaW1nLjI0c2F0YS5oci9FWnE3a2dFX0hkM3NqOU1fQ0JKQi1nR0dMQ1E9LzEyMDB4MC9zbWFydC9tZWRpYS9pbWFnZXMvMjAxOS00Mi9wbGFjZWhvbGRlci5wbmciLAogICAgICAgICJ3aWR0aCI6IDEyMDAsCiAgICAgICAgImhlaWdodCI6IDAKICAgIH0sCiAgICAiaGVhZGxpbmUiOiAiUGFsaW8ga29udGVqbmVyZSwgc3J1xaFpbyByYW1wdSBpIG5hZHpvcm5lIGthbWVyZSBuYSB1bGF6dSB1IHphZGFyc2t1IGJvbG5pY3U6IFVoaXRpbGkgc3UgZ2EiLAogICAgImFydGljbGVCb2R5IjogIlBvbGljaWphIHN1bW5qYSBkYSBqZSAyNS1nb2RpxaFuamFrwqAxOC4gc2lqZcSNbmphIHUgbm/Eh25pbSBzYXRpbWEgdcKgWnJpbnNrby1GcmFua29wYW5za29qIHVsaWNpIG5hbWplcm5vIGl6YXp2YW8gcG/FvmFyIG5hIGtvbnRlam5lcnUgemEgc21lxIdlwqBrb2ppIHNlIHByb8WhaXJpbyBuYSBvc3RhbGEgZHZhIGtvbnRlam5lcmEuIER2YSBrb250ZWpuZXJhIHN1IGl6Z29yamVsYSwgZG9rIGplIHRyZcSHaSBkamVsb21pxI1ubyBuYWdvcmlvIGthbyBpIG9ibGnFvm5qYSByYXp2b2RuYSBrdXRpamEgemEgdGVsZWtvbXVuaWthY2lqdS4gTWF0ZXJpamFsbmEgxaF0ZXRhIGpvxaEgbmlqZSB1dHZyxJFlbmEuTWxhZGnEh2Ega29qaSBqZSBvdHByaWplIHBvem5hdCB6YWRhcnNrb2ogcG9saWNpamksIHN1bW5qacSNZcKgaSBkYSBqZSBpc3RlIG5vxIdpIHUgVWxpY2kgTGp1ZGV2aXRhIFBvc2F2c2tvZyBuYW1qZXJubyBvxaF0ZXRpbyBkdmlqZSBuYWR6b3JuZSBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmHFvnUgYm9sbmljZSDEjWltZSBqZSBwcmnEjWluaW8gbWF0ZXJpamFsbnUgxaF0ZXR1IHZlxId1IG9kIDUwLjAwMCBrdW5hLk9zaW0gdG9nYSwgcG9saWNpamEgc3VtbmphIGRhIGplIGkgMy4gcHJvc2luY2EgMjAxOS4gdSBHbGFnb2xqYcWha29qIHVsaWNpIHUgWmFkcnUgcHJvdmFsaW8gdSBncmHEkWV2aW5za2kga29udGVqbmVywqBpIG5hbWplcm5vIGdhIHphcGFsaW8gcHJpIMSNZW11IGplIGl6Z29yamVsYSB2ZcSHYSBrb2xpxI1pbmEgZ3JhxJFldmluc2tvZyBhbGF0YSB2cmlqZWRub2cgb2tvIDEwMC4wMDAga3VuYS5OYWtvbiBkb3ZyxaFlbm9nIGtyaW1pbmFsaXN0acSNa29nIGlzdHJhxb5pdmFuamEsIDI1LWdvZGnFoW5qYWsgamUgdXoga2F6bmVuZSBwcmlqYXZlIHpib2cgb8WhdGXEh2VuamEgdHXEkWUgc3R2YXJpIGkgZG92b8SRZW5qYSB1IG9wYXNub3N0IMW+aXZvdGEgaSBpbW92aW5lIG9wxIdlb3Bhc25vbSByYWRuam9tIGlsaSBzcmVkc3R2b20gcHJlZGFuIHByaXR2b3Jza29tIG5hZHpvcm5pa3UgUG9saWNpanNrZSB1cHJhdmUgemFkYXJza2UuIiwKICAgICJhcnRpY2xlU2VjdGlvbiI6ICJWaWplc3RpIiwKICAgICJkYXRlUHVibGlzaGVkIjogIjIwMjEtMDEtMjBUMTE6MTg6MDArMDE6MDAiLAogICAgImRhdGVNb2RpZmllZCI6ICIyMDIxLTAxLTIwVDExOjE4OjE2Ljg1MDYzMyswMTowMCIsCiAgICAKICAgICAgICAiYXV0aG9yIjogWwogICAgICAgIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiQHR5cGUiOiAiUGVyc29uIiwKICAgICAgICAgICAgICAgICJuYW1lIjogIkhJTkEiCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICBdLAogICAgCiAgICAicHVibGlzaGVyIjogewogICAgICAgICJAdHlwZSI6ICJPcmdhbml6YXRpb24iLAogICAgICAgICJuYW1lIjogIjI0c2F0YS5ociIsCiAgICAgICAgInVybCI6ICJodHRwczovL3d3dy4yNHNhdGEuaHIiLAogICAgICAgICJsb2dvIjogewogICAgICAgICAgICAiQHR5cGUiOiAiSW1hZ2VPYmplY3QiLAogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vMjRzYXRhLmhyL3N0YXRpYy9sb2dvXzI0LnBuZyIKICAgICAgICB9LAogICAgICAgICJzYW1lQXMiOiBbCiAgICAgICAgICAgICJodHRwczovL3d3dy5mYWNlYm9vay5jb20vMjRzYXRhLyIsCiAgICAgICAgICAgICJodHRwczovL3R3aXR0ZXIuY29tLzI0c2F0YV9IUiIsCiAgICAgICAgICAgICJodHRwczovL2hyLndpa2lwZWRpYS5vcmcvd2lraS8yNHNhdGEiLAogICAgICAgICAgICAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ3BKTnNCRXVwVnRsTGxWSVl3LWtGcGciCiAgICAgICAgXQogICAgfSwKICAgICJkZXNjcmlwdGlvbiI6ICJQb2xpY2lqYSBqZSB1aGl0aWxhIGkgcHJpdHZvcmlsYSAyNS1nb2RpxaFuamFrYSBvc3VtbmppxI1lbm9nIGRhIGplIHByaWplIGR2YSBkYW5hIHphcGFsaW8gdWxpxI1uZSBrb250ZWpuZXJlIHphIHNtZcSHZSBpIG/FoXRldGlvIGthbWVyZSBpIHJhbXB1IG5hIHVsYXp1IHUgZ2FyYcW+dSB6YWRhcnNrZSBib2xuaWNlLCBwcmlvcMSHaWxhIGplIHBvbGljaWphIHUgc3JpamVkdS4iLAogICAgImtleXdvcmRzIjogInBvxb5hciwga29udGVqbmVyaSwgemFkYXIiCn0KPC9zY3JpcHQ+CgoKCgoKCgogICAgICAgIAogICAgCgoKICAgIAogICAgICAgIDxub3NjcmlwdD4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJzaXRlX3dyYXAgc2l0ZV93cmFwLS1hcnRpY2xlIGlzLWFydGljbGUgaXMtc3NyIiBkYXRhLWFydGljbGU9InsmIzM5O2NvbnRlbnQmIzM5OzogJiMzOTsmbHQ7cCZndDtQb2xpY2lqYSBzdW1uamEgZGEgamUgMjUtZ29kacWhbmpha1x4YTAxOC4gc2lqZcSNbmphIHUgbm/Eh25pbSBzYXRpbWEgdVx4YTBacmluc2tvLUZyYW5rb3BhbnNrb2ogdWxpY2kgbmFtamVybm8gaXphenZhbyBwb8W+YXIgbmEga29udGVqbmVydSB6YSBzbWXEh2VceGEwa29qaSBzZSBwcm/FoWlyaW8gbmEgb3N0YWxhIGR2YSBrb250ZWpuZXJhLiBEdmEga29udGVqbmVyYSBzdSBpemdvcmplbGEsIGRvayBqZSB0cmXEh2kgZGplbG9tacSNbm8gbmFnb3JpbyBrYW8gaSBvYmxpxb5uamEgcmF6dm9kbmEga3V0aWphIHphIHRlbGVrb211bmlrYWNpanUuIE1hdGVyaWphbG5hIMWhdGV0YSBqb8WhIG5pamUgdXR2csSRZW5hLiZsdDsvcCZndDsmbHQ7cCZndDtNbGFkacSHYSBrb2ppIGplIG90cHJpamUgcG96bmF0IHphZGFyc2tvaiBwb2xpY2lqaSwgc3VtbmppxI1lXHhhMGkgZGEgamUgaXN0ZSBub8SHaSB1IFVsaWNpIExqdWRldml0YSBQb3NhdnNrb2cgbmFtamVybm8gb8WhdGV0aW8gZHZpamUgbmFkem9ybmUga2FtZXJlIGkgcmFtcHUgbmEgdWxhenUgdSBnYXJhxb51IGJvbG5pY2UgxI1pbWUgamUgcHJpxI1pbmlvIG1hdGVyaWphbG51IMWhdGV0dSB2ZcSHdSBvZCA1MC4wMDAga3VuYS4mbHQ7L3AmZ3Q7Jmx0O3AmZ3Q7T3NpbSB0b2dhLCBwb2xpY2lqYSBzdW1uamEgZGEgamUgaSAzLiBwcm9zaW5jYSAyMDE5LiB1IEdsYWdvbGphxaFrb2ogdWxpY2kgdSBaYWRydSBwcm92YWxpbyB1IGdyYcSRZXZpbnNraSBrb250ZWpuZXJceGEwaSBuYW1qZXJubyBnYSB6YXBhbGlvIHByaSDEjWVtdSBqZSBpemdvcmplbGEgdmXEh2Ega29sacSNaW5hIGdyYcSRZXZpbnNrb2cgYWxhdGEgdnJpamVkbm9nIG9rbyAxMDAuMDAwIGt1bmEuJmx0Oy9wJmd0OyZsdDtwJmd0O05ha29uIGRvdnLFoWVub2cga3JpbWluYWxpc3RpxI1rb2cgaXN0cmHFvml2YW5qYSwgMjUtZ29kacWhbmphayBqZSB1eiBrYXpuZW5lIHByaWphdmUgemJvZyBvxaF0ZcSHZW5qYSB0dcSRZSBzdHZhcmkgaSBkb3ZvxJFlbmphIHUgb3Bhc25vc3Qgxb5pdm90YSBpIGltb3ZpbmUgb3DEh2VvcGFzbm9tIHJhZG5qb20gaWxpIHNyZWRzdHZvbSBwcmVkYW4gcHJpdHZvcnNrb20gbmFkem9ybmlrdSBQb2xpY2lqc2tlIHVwcmF2ZSB6YWRhcnNrZS4mbHQ7L3AmZ3Q7JiMzOTssICYjMzk7YXJ0aWNsZV90eXBlJiMzOTs6ICYjMzk7YXJ0aWNsZSYjMzk7LCAmIzM5O3B1Ymxpc2hfZGF0ZSYjMzk7OiBkYXRldGltZS5kYXRldGltZSgyMDIxLCAxLCAyMCwgMTEsIDE4LCB0emluZm89ZGF0ZXRpbWUudGltZXpvbmUoZGF0ZXRpbWUudGltZWRlbHRhKDAsIDM2MDApLCAmIzM5OyswMTAwJiMzOTspKSwgJiMzOTtjb3Zlcl9pbWFnZSYjMzk7OiBOb25lLCAmIzM5O2dhbGxlcmllcyYjMzk7OiBbXSwgJiMzOTtsZWFkX3RleHQmIzM5OzogJiMzOTtQb2xpY2lqYSBqZSB1aGl0aWxhIGkgcHJpdHZvcmlsYSAyNS1nb2RpxaFuamFrYSBvc3VtbmppxI1lbm9nIGRhIGplIHByaWplIGR2YSBkYW5hIHphcGFsaW8gdWxpxI1uZSBrb250ZWpuZXJlIHphIHNtZcSHZSBpIG/FoXRldGlvIGthbWVyZSBpIHJhbXB1IG5hIHVsYXp1IHUgZ2FyYcW+dSB6YWRhcnNrZSBib2xuaWNlLCBwcmlvcMSHaWxhIGplIHBvbGljaWphIHUgc3JpamVkdS4mIzM5OywgJiMzOTthdXRob3JzJiMzOTs6IFt7JiMzOTtzbHVnJiMzOTs6ICYjMzk7aGluYSYjMzk7LCAmIzM5O2lkJiMzOTs6IDYyNSwgJiMzOTtuYW1lJiMzOTs6ICYjMzk7SElOQSYjMzk7fV0sICYjMzk7c2VjdGlvbiYjMzk7OiB7JiMzOTtzbHVnJiMzOTs6ICYjMzk7bmV3cyYjMzk7LCAmIzM5O3NsdWdfcGF0aCYjMzk7OiAmIzM5O25ld3MmIzM5OywgJiMzOTtpZCYjMzk7OiAyLCAmIzM5O25hbWUmIzM5OzogJiMzOTtWaWplc3RpJiMzOTt9LCAmIzM5O3N1YnNlY3Rpb24mIzM5OzogeyYjMzk7c2x1ZyYjMzk7OiAmIzM5O2NybmEta3JvbmlrYS1uZXdzJiMzOTssICYjMzk7c2x1Z19wYXRoJiMzOTs6ICYjMzk7bmV3cy9jcm5hLWtyb25pa2EtbmV3cyYjMzk7LCAmIzM5O2lkJiMzOTs6IDEyLCAmIzM5O25hbWUmIzM5OzogJiMzOTtDcm5hIGtyb25pa2EmIzM5O30sICYjMzk7aW1hZ2UmIzM5OzogTm9uZSwgJiMzOTtzZW8mIzM5OzogTm9uZSwgJiMzOTtsaW5rJiMzOTs6ICYjMzk7L25ld3MvcGFsaW8ta29udGVqbmVyZS1zcnVzaW8tcmFtcHUtaS1uYWR6b3JuZS1rYW1lcmUtbmEtdWxhenUtdS16YWRhcnNrdS1ib2xuaWN1LXVoaXRpbGktc3UtZ2EtNzQwNjk2JiMzOTssICYjMzk7aW1hZ2VzJiMzOTs6IFtdLCAmIzM5O2lzX3ByZW1pdW0mIzM5OzogRmFsc2UsICYjMzk7dGl0bGUmIzM5OzogJiMzOTtQYWxpbyBrb250ZWpuZXJlLCBzcnXFoWlvIHJhbXB1IGkgbmFkem9ybmUga2FtZXJlIG5hIHVsYXp1IHUgemFkYXJza3UgYm9sbmljdTogVWhpdGlsaSBzdSBnYSYjMzk7LCAmIzM5O3NlY3Rpb25zJiMzOTs6IHsmIzM5O2RhdGEmIzM5OzogW3smIzM5O3R5cGUmIzM5OzogJiMzOTtzZWN0aW9uJiMzOTssICYjMzk7aWQmIzM5OzogJiMzOTsyJiMzOTssICYjMzk7YXR0cmlidXRlcyYjMzk7OiB7JiMzOTtuYW1lJiMzOTs6ICYjMzk7VmlqZXN0aSYjMzk7LCAmIzM5O3NsdWcmIzM5OzogJiMzOTtuZXdzJiMzOTssICYjMzk7aXNfc3BlY2lhbCYjMzk7OiBGYWxzZSwgJiMzOTtpc19wcmltYXJ5JiMzOTs6IFRydWUsICYjMzk7bGFiZWwmIzM5OzogJiMzOTsmIzM5OywgJiMzOTtkZXNjcmlwdGlvbiYjMzk7OiAmIzM5OyYjMzk7LCAmIzM5O3NsdWdfcGF0aCYjMzk7OiAmIzM5O25ld3MmIzM5O30sICYjMzk7cmVsYXRpb25zaGlwcyYjMzk7OiB7JiMzOTtjb3Zlcl9pbWFnZSYjMzk7OiB7JiMzOTtkYXRhJiMzOTs6IE5vbmV9fX0sIHsmIzM5O3R5cGUmIzM5OzogJiMzOTtzZWN0aW9uJiMzOTssICYjMzk7aWQmIzM5OzogJiMzOTsxMiYjMzk7LCAmIzM5O2F0dHJpYnV0ZXMmIzM5OzogeyYjMzk7bmFtZSYjMzk7OiAmIzM5O0NybmEga3JvbmlrYSYjMzk7LCAmIzM5O3NsdWcmIzM5OzogJiMzOTtjcm5hLWtyb25pa2EtbmV3cyYjMzk7LCAmIzM5O2lzX3NwZWNpYWwmIzM5OzogRmFsc2UsICYjMzk7aXNfcHJpbWFyeSYjMzk7OiBGYWxzZSwgJiMzOTtsYWJlbCYjMzk7OiAmIzM5OyYjMzk7LCAmIzM5O2Rlc2NyaXB0aW9uJiMzOTs6ICYjMzk7JiMzOTssICYjMzk7c2x1Z19wYXRoJiMzOTs6ICYjMzk7bmV3cy9jcm5hLWtyb25pa2EtbmV3cyYjMzk7fSwgJiMzOTtyZWxhdGlvbnNoaXBzJiMzOTs6IHsmIzM5O2NvdmVyX2ltYWdlJiMzOTs6IHsmIzM5O2RhdGEmIzM5OzogTm9uZX19fV0sICYjMzk7bGlua3MmIzM5OzogeyYjMzk7cmVsYXRlZCYjMzk7OiAmIzM5O2h0dHA6Ly9hcHAuMjRzYXRhLmhyOjgwMDQvZmFwaS9hcnRpY2xlcy83NDA2OTYvc2VjdGlvbnMmIzM5O30sICYjMzk7bWV0YSYjMzk7OiB7JiMzOTtjb3VudCYjMzk7OiAyfX0sICYjMzk7a2V5d29yZHMmIzM5OzogW3smIzM5O3NsdWcmIzM5OzogJiMzOTtwb3phciYjMzk7LCAmIzM5O2lkJiMzOTs6IDU4MCwgJiMzOTtuYW1lJiMzOTs6ICYjMzk7cG/FvmFyJiMzOTt9LCB7JiMzOTtzbHVnJiMzOTs6ICYjMzk7a29udGVqbmVyaSYjMzk7LCAmIzM5O2lkJiMzOTs6IDE1NTQ4LCAmIzM5O25hbWUmIzM5OzogJiMzOTtrb250ZWpuZXJpJiMzOTt9LCB7JiMzOTtzbHVnJiMzOTs6ICYjMzk7emFkYXImIzM5OywgJiMzOTtpZCYjMzk7OiAxMDAzNDEsICYjMzk7bmFtZSYjMzk7OiAmIzM5O3phZGFyJiMzOTt9XSwgJiMzOTtpZCYjMzk7OiA3NDA2OTYsICYjMzk7bGFiZWwmIzM5OzogJiMzOTtNTEFEScSGIE9UUFJJSkUgUE9aTkFUIFBPTElDSUpJJiMzOTssICYjMzk7aXNfbG9ja2VkJiMzOTs6IEZhbHNlLCAmIzM5O21vZGlmaWVkX2RhdGUmIzM5OzogZGF0ZXRpbWUuZGF0ZXRpbWUoMjAyMSwgMSwgMjAsIDExLCAxOCwgMTYsIDg1MDYzMywgdHppbmZvPWRhdGV0aW1lLnRpbWV6b25lKGRhdGV0aW1lLnRpbWVkZWx0YSgwLCAzNjAwKSwgJiMzOTsrMDEwMCYjMzk7KSksICYjMzk7dmlkZW9zJiMzOTs6IFtdfSI+CiAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJhcnRpY2xlIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZV9faGVhZGVyIj4KCiAgICAgICAgICAgICAgICAgICAgCiAgICA8c3BhbiBjbGFzcz0iYXJ0aWNsZV9fbGFiZWwgaGFzLWJhY2tncm91bmQtbmV3cyI+TUxBREnEhiBPVFBSSUpFIFBPWk5BVCBQT0xJQ0lKSTwvc3Bhbj4KCgoKICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9ImFydGljbGVfX3RpdGxlIj5QYWxpbyBrb250ZWpuZXJlLCBzcnXFoWlvIHJhbXB1IGkgbmFkem9ybmUga2FtZXJlIG5hIHVsYXp1IHUgemFkYXJza3UgYm9sbmljdTogVWhpdGlsaSBzdSBnYTwvaDE+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlX19pbmZvX3dyYXAiPgogICAgCiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlX19hdXRob3JzIj4KICAgICAgICA8c3BhbiBjbGFzcz0iYXJ0aWNsZV9fYXV0aG9yc19saXN0Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhcnRpY2xlX19hdXRob3JzX2l0ZW0iPgogICAgICAgICAgICAgICAgUGnFoWUgPGEgaHJlZj0iaHR0cHM6Ly93d3cuMjRzYXRhLmhyL2F1dG9yaS9oaW5hLTYyNSIgY2xhc3M9ImFydGljbGVfX2F1dGhvcnNfbGluayI+SElOQTwvYT4KICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAKICAgICAgICA8L3NwYW4+CiAgICA8L2Rpdj4KICAgIAoKICAgIDxzcGFuIGNsYXNzPSJhcnRpY2xlX19kYXRlIj4KICAgICAgICA8dGltZSBkYXRldGltZT0iMjAyMS0wMS0yMCIgY2xhc3M9ImFydGljbGVfX3RpbWUiPgogICAgICAgICAgICBTcmlqZWRhLCAyMC4xLjIwMjEgdSAxMTowMQogICAgICAgIDwvdGltZT4KICAgIDwvc3Bhbj4KPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZV9fYm9keSI+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAKCgoKPHAgY2xhc3M9ImFydGljbGVfX2xlYWRfdGV4dCI+UG9saWNpamEgamUgdWhpdGlsYSBpIHByaXR2b3JpbGEgMjUtZ29kacWhbmpha2Egb3N1bW5qacSNZW5vZyBkYSBqZSBwcmlqZSBkdmEgZGFuYSB6YXBhbGlvIHVsacSNbmUga29udGVqbmVyZSB6YSBzbWXEh2UgaSBvxaF0ZXRpbyBrYW1lcmUgaSByYW1wdSBuYSB1bGF6dSB1IGdhcmHFvnUgemFkYXJza2UgYm9sbmljZSwgcHJpb3DEh2lsYSBqZSBwb2xpY2lqYSB1IHNyaWplZHUuPC9wPgoKPGRpdiBjbGFzcz0iYXJ0aWNsZV9fbWFpbiI+CiAgICA8ZGl2IGNsYXNzPSJzaGFyZV9iYXIiPjwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImFydGljbGVfX2NvbnRlbnRfd3JhcCI+CiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZV9fY29udGVudCI+CiAgICAgICAgICAgIDxwPlBvbGljaWphIHN1bW5qYSBkYSBqZSAyNS1nb2RpxaFuamFrwqAxOC4gc2lqZcSNbmphIHUgbm/Eh25pbSBzYXRpbWEgdcKgWnJpbnNrby1GcmFua29wYW5za29qIHVsaWNpIG5hbWplcm5vIGl6YXp2YW8gcG/FvmFyIG5hIGtvbnRlam5lcnUgemEgc21lxIdlwqBrb2ppIHNlIHByb8WhaXJpbyBuYSBvc3RhbGEgZHZhIGtvbnRlam5lcmEuIER2YSBrb250ZWpuZXJhIHN1IGl6Z29yamVsYSwgZG9rIGplIHRyZcSHaSBkamVsb21pxI1ubyBuYWdvcmlvIGthbyBpIG9ibGnFvm5qYSByYXp2b2RuYSBrdXRpamEgemEgdGVsZWtvbXVuaWthY2lqdS4gTWF0ZXJpamFsbmEgxaF0ZXRhIGpvxaEgbmlqZSB1dHZyxJFlbmEuPC9wPjxwPk1sYWRpxIdhIGtvamkgamUgb3RwcmlqZSBwb3puYXQgemFkYXJza29qIHBvbGljaWppLCBzdW1uamnEjWXCoGkgZGEgamUgaXN0ZSBub8SHaSB1IFVsaWNpIExqdWRldml0YSBQb3NhdnNrb2cgbmFtamVybm8gb8WhdGV0aW8gZHZpamUgbmFkem9ybmUga2FtZXJlIGkgcmFtcHUgbmEgdWxhenUgdSBnYXJhxb51IGJvbG5pY2UgxI1pbWUgamUgcHJpxI1pbmlvIG1hdGVyaWphbG51IMWhdGV0dSB2ZcSHdSBvZCA1MC4wMDAga3VuYS48L3A+PHA+T3NpbSB0b2dhLCBwb2xpY2lqYSBzdW1uamEgZGEgamUgaSAzLiBwcm9zaW5jYSAyMDE5LiB1IEdsYWdvbGphxaFrb2ogdWxpY2kgdSBaYWRydSBwcm92YWxpbyB1IGdyYcSRZXZpbnNraSBrb250ZWpuZXLCoGkgbmFtamVybm8gZ2EgemFwYWxpbyBwcmkgxI1lbXUgamUgaXpnb3JqZWxhIHZlxIdhIGtvbGnEjWluYSBncmHEkWV2aW5za29nIGFsYXRhIHZyaWplZG5vZyBva28gMTAwLjAwMCBrdW5hLjwvcD48cD5OYWtvbiBkb3ZyxaFlbm9nIGtyaW1pbmFsaXN0acSNa29nIGlzdHJhxb5pdmFuamEsIDI1LWdvZGnFoW5qYWsgamUgdXoga2F6bmVuZSBwcmlqYXZlIHpib2cgb8WhdGXEh2VuamEgdHXEkWUgc3R2YXJpIGkgZG92b8SRZW5qYSB1IG9wYXNub3N0IMW+aXZvdGEgaSBpbW92aW5lIG9wxIdlb3Bhc25vbSByYWRuam9tIGlsaSBzcmVkc3R2b20gcHJlZGFuIHByaXR2b3Jza29tIG5hZHpvcm5pa3UgUG9saWNpanNrZSB1cHJhdmUgemFkYXJza2UuPC9wPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgCiAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZV9rZXl3b3JkcyBoYXMtYmFja2dyb3VuZCI+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iYXJ0aWNsZV9rZXl3b3Jkc19fdGl0bGUiPk9kYWJlcmkgdGVtdSBrb2p1IMW+ZWxpxaEgcHJhdGl0aTwvc3Bhbj4KCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhcnRpY2xlX2tleXdvcmRzX19kZXNjcmlwdGlvbiI+UHJpbWFqIHN2ZSBub3ZlIHZpamVzdGkgbyB0ZW1pIGkgYnVkaSB1IHRpamVrdTwvc3Bhbj4KCiAgICAgICAgICAgIDx1bCBjbGFzcz0iYXJ0aWNsZV9rZXl3b3Jkc19fbGlzdCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYXJ0aWNsZV9rZXl3b3Jkc19faXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFydGljbGVfa2V5d29yZHNfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3LjI0c2F0YS5oci90YWdvdmkvcG96YXItNTgwIj4KICAgICAgICAgICAgICAgICAgICAgICAgcG/FvmFyCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uX3dyYXAiPjxpIGNsYXNzPSJpY29uIGljb24ta2V5d29yZC1pbml0aWFsLXBsdXMiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhcnRpY2xlX2tleXdvcmRzX19pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYXJ0aWNsZV9rZXl3b3Jkc19fbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuMjRzYXRhLmhyL3RhZ292aS9rb250ZWpuZXJpLTE1NTQ4Ij4KICAgICAgICAgICAgICAgICAgICAgICAga29udGVqbmVyaQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbl93cmFwIj48aSBjbGFzcz0iaWNvbiBpY29uLWtleXdvcmQtaW5pdGlhbC1wbHVzIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYXJ0aWNsZV9rZXl3b3Jkc19faXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFydGljbGVfa2V5d29yZHNfX2xpbmsiIGhyZWY9Imh0dHBzOi8vd3d3LjI0c2F0YS5oci90YWdvdmkvemFkYXItMTAwMzQxIj4KICAgICAgICAgICAgICAgICAgICAgICAgemFkYXIKICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb25fd3JhcCI+PGkgY2xhc3M9Imljb24gaWNvbi1rZXl3b3JkLWluaXRpYWwtcGx1cyI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CgogICAgCgoKCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgIDwvbm9zY3JpcHQ+CiAgICAKCgoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgoKICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIvZGlzdC9qcy92ZW5kb3JzLWluaXRpYWwuYWY0YzRhMWUuanMiPjwvc2NyaXB0PgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgc3JjPSIvZGlzdC9qcy9hcHAuMDA2MzYwMTQuanMiPjwvc2NyaXB0PgogICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvZGlzdC9qcy92ZW5kb3JzLWluaXRpYWwtbGVnYWN5LmIwOGQ3M2JhLmpzIiBub21vZHVsZT48L3NjcmlwdD4KICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iL2Rpc3QvanMvYXBwLWxlZ2FjeS4wMWUxY2UzOS5qcyIgbm9tb2R1bGU+PC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgCgogICAgCiAgICA8IS0tICoqKiBFbmQgVnVlSlMgQVBQICoqKiAtLT4KCiAgICAKICAgICAgICAKICAgICAgICAKICAgIAoKCiAgICA8IS0tICoqKiBTdGFydCB0ZXN0IGZvciBpb3Mgem9vbSAqKiogLS0+CiAgICA8c2NyaXB0PgogICAgKGZ1bmN0aW9uIGlvc1pvbW1IYWNrICgpIHsKICAgICAgICAvKgogICAgICAgICAgICBOT1RFOiBUaGlzIGNvZGUgb3ZlcnJpZGVzIHRoZSB2aWV3cG9ydCBzZXR0aW5ncywgYW4gaW1wcm92ZW1lbnQgd291bGQgYmUKICAgICAgICAgICAgdG8gdGFrZSB0aGUgb3JpZ2luYWwgdmFsdWUgYW5kIG9ubHkgYWRkIG9yIGNoYW5nZSB0aGUgdXNlci1zY2FsYWJsZSB2YWx1ZQogICAgICAgICovCgogICAgICAgIC8vIG9wdGlvbmFsbHkgb25seSBhY3RpdmF0ZSBmb3IgaU9TIChkb25lIGJlY2F1c2UgSSBoYXZuJ3QgdGVzdGVkIHRoZSBlZmZlY3QgdW5kZXIgb3RoZXIgT1MvZGV2aWNlcyBjb21iaW5hdGlvbnMgc3VjaCBhcyBBbmRyb2lkKQogICAgICAgIHZhciBpT1MgPSBuYXZpZ2F0b3IucGxhdGZvcm0gJiYgL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKQogICAgICAgIGlmIChpT1MpIHByZXZlbnRab29tT25Gb2N1cyAoKTsKCgogICAgICAgIGZ1bmN0aW9uIHByZXZlbnRab29tT25Gb2N1cyAoKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0Iiwgb25Ub3VjaFN0YXJ0KTsKICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoImZvY3VzaW4iLCBvbkZvY3VzSW4pOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRvbnRfZGlzYWJsZV9mb3IgPSBbImNoZWNrYm94IiwgInJhZGlvIiwgImZpbGUiLCAiYnV0dG9uIiwgImltYWdlIiwgInN1Ym1pdCIsICJyZXNldCIsICJoaWRkZW4iXTsKCiAgICAgICAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGV2dCkgewogICAgICAgICAgICB2YXIgdG4gPSBldnQudGFyZ2V0LnRhZ05hbWU7CgogICAgICAgICAgICAvLyBObyBuZWVkIHRvIGRvIGFueXRoaW5nIGlmIHRoZSBpbml0aWFsIHRhcmdldCBpc24ndCBhIGtub3duIGVsZW1lbnQKICAgICAgICAgICAgLy8gd2hpY2ggd2lsbCBjYXVzZSBhIHpvb20gdXBvbiByZWNlaXZpbmcgZm9jdXMKICAgICAgICAgICAgaWYgKHRuICE9ICJTRUxFQ1QiICYmICB0biAhPSAiVEVYVEFSRUEiICYmICh0biAhPSAiSU5QVVQiIHx8IGRvbnRfZGlzYWJsZV9mb3IuaW5kZXhPZihldnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgidHlwZSIpKSA+IC0xKSApIHJldHVybjsKCiAgICAgICAgICAgIC8vIGRpc2FibGUgem9vbQogICAgICAgICAgICBzZXRWaWV3cG9ydCgid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT01LjAsIHVzZXItc2NhbGFibGU9MCIpOwogICAgICAgIH0KCiAgICAgICAgLy8gTk9URTogZm9yIG5vdyBhc3N1bWluZyB0aGlzIGZvY3VzSW4gaXMgY2F1c2VkIGJ5IHVzZXIgaW50ZXJhY3Rpb24KICAgICAgICBmdW5jdGlvbiBvbkZvY3VzSW4oZXZ0KSB7CiAgICAgICAgICAgIC8vIHJlZW5hYmxlIHpvb20KICAgICAgICAgICAgc2V0Vmlld3BvcnQoIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9NS4wIik7CiAgICAgICAgfQoKICAgICAgICAvLyBhZGQgb3IgdXBkYXRlIHRoZSA8bWV0YSBuYW1lPSJ2aWV3cG9ydCI+IGVsZW1lbnQKICAgICAgICBmdW5jdGlvbiBzZXRWaWV3cG9ydChuZXd2YWx1ZSkgewogICAgICAgICAgICB2YXIgdnBub2RlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgbWV0YVtuYW1lPSJ2aWV3cG9ydCJdJyk7CiAgICAgICAgICAgIGlmICh2cG5vZGUpIHsKICAgICAgICAgICAgICAgIHZwbm9kZS5zZXRBdHRyaWJ1dGUoImNvbnRlbnQiLG5ld3ZhbHVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZwbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIm1ldGEiKTsKICAgICAgICAgICAgICAgIHZwbm9kZS5zZXRBdHRyaWJ1dGUoIm5hbWUiLCAidmlld3BvcnQiKTsKICAgICAgICAgICAgICAgIHZwbm9kZS5zZXRBdHRyaWJ1dGUoImNvbnRlbnQiLCBuZXd2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9fSkoKQogICAgPC9zY3JpcHQ+CiAgICA8IS0tICoqKiBFbmQgdGVzdCBmb3IgaW9zIHpvb20gKioqIC0tPgoKICAgIAo8L2JvZHk+CjwvaHRtbD4K"}
{"id":2270712,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270712","content":""}
{"id":2270711,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270711","content":""}
{"id":2270710,"website":"indexhr","url":"https://www.index.hr/clanak.aspx?id=2270710","content":"DQoNCg0KPCFET0NUWVBFIGh0bWw+DQo8aHRtbCBsYW5nPSJociI+DQo8aGVhZD4NCiAgICA8IS0tZGV0ZWN0IHNsb3cgaW50ZXJuZXQgY29ubmVjdGlvbi0tPg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgdmFyIElTX1NMT1dfSU5URVJORVQgPSBmYWxzZTsNCiAgICAgICAgdmFyIFNMT1dfSU5URVJORVRfVEhSRVNIT0xEID0gNTAwMDsvL21zDQogICAgICAgIHZhciBzbG93TG9hZFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBJU19TTE9XX0lOVEVSTkVUID0gdHJ1ZTsNCiAgICAgICAgfSwgU0xPV19JTlRFUk5FVF9USFJFU0hPTEQpOw0KDQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChzbG93TG9hZFRpbWVvdXQpOw0KICAgICAgICB9LCBmYWxzZSk7DQogICAgPC9zY3JpcHQ+DQogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiIC8+DQogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxoZWlnaHQ9ZGV2aWNlLWhlaWdodCwgaW5pdGlhbC1zY2FsZT0xLjAiPg0KICAgIDx0aXRsZT5Ub3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrIC0gSW5kZXguaHI8L3RpdGxlPg0KICAgIDwhLS10b2RvOiByZW1vdmUgb24gcHJvZHVjdGlvbi0tPg0KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJKQVBBTlNLQSBUb3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrIGthbyBkaW8gc3ZvZyBrb25jZXB0YSBzbWFuamVuamEgZW1pc2lqZSBzdGFrbGVuacSNa2loIHBsaW5vdmEsIGthxb5lIHNlIHUgcHJpb3DEh2VuanUga29ycG9yYWNpamUgb2JqYXZsamVub20gZGFuYXMuIj4NCiAgICA8bWV0YSBwcm9wZXJ0eT0iZmI6YXBwX2lkIiBjb250ZW50PSIyMTYwNjAxMTUyMDk4MTkiPg0KICAgIDxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0ibWF4LWltYWdlLXByZXZpZXc6bGFyZ2UiPg0KICAgIDxtZXRhIG5hbWU9InJlZmVycmVyIiBjb250ZW50PSJuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZSI+DQoNCg0KDQoNCiAgICA8IS0tYWRibG9jayBkZXRlY3Rpb24tLT4NCiAgICA8c2NyaXB0IHNyYz0iL1NjcmlwdHMvYWRibG9ja0RldGVjdC9hZHMuanMiPjwvc2NyaXB0Pg0KDQogICAgICAgIDwhLS1yZWNvdmVyIGFkcywgaWYgYWRibG9jayBkZXRlY3RlZC0tPg0KICAgICAgICA8IS0tYWRwdXNodXAgcmVjb3ZlcnktLT4NCiAgICAgICAgPHNjcmlwdCBkYXRhLWNmYXN5bmM9ImZhbHNlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPihmdW5jdGlvbiAodywgZCkgeyB2YXIgcyA9IGQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IHMuc3JjID0gJy8vZGVsaXZlcnkuYWRyZWNvdmVyLmNvbS80MTE0NC9hZFJlY292ZXIuanMnOyBzLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jzsgcy5hc3luYyA9IHRydWU7IChkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0gfHwgZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdKS5hcHBlbmRDaGlsZChzKTsgfSkod2luZG93LCBkb2N1bWVudCk7PC9zY3JpcHQ+DQoNCiAgICA8bGluayByZWw9J3ByZWNvbm5lY3QnIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20nIGNyb3Nzb3JpZ2luPg0KICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvK1NsYWI6d2dodEA0MDA7NTAwOzcwMCZmYW1pbHk9Um9ib3RvOndnaHRAMzAwOzQwMDs1MDA7NzAwOzkwMCZmYW1pbHk9UnViaWs6d2dodEAzMDA7NDAwOzUwMDs3MDAiIHJlbD0icHJlbG9hZCIgYXM9InN0eWxlIj4NCiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJvYm90bytTbGFiOndnaHRANDAwOzUwMDs3MDAmZmFtaWx5PVJvYm90bzp3Z2h0QDMwMDs0MDA7NTAwOzcwMDs5MDAmZmFtaWx5PVJ1YmlrOndnaHRAMzAwOzQwMDs1MDA7NzAwIiByZWw9InN0eWxlc2hlZXQiPg0KDQogICAgDQogICAgDQogICAgICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Rlc2t0b3AtYnVuZGxlLm1pbi5jc3M/dj00NzhhMzQ4ZS1kYzNhLTRiYjEtYWE5NS1iYWJiNjcyNWFiMjAiIHJlbD0icHJlbG9hZCIgYXM9InN0eWxlIiAvPg0KICAgICAgICA8bGluayBocmVmPSIvU2NyaXB0cy9kZXNrdG9wLWJ1bmRsZS5taW4uanM/dj00NzhhMzQ4ZS1kYzNhLTRiYjEtYWE5NS1iYWJiNjcyNWFiMjAiIHJlbD0icHJlbG9hZCIgYXM9InNjcmlwdCIgLz4NCg0KICAgICAgICA8bGluayBocmVmPSIvQ29udGVudC9kZXNrdG9wLWJ1bmRsZS5taW4uY3NzP3Y9NDc4YTM0OGUtZGMzYS00YmIxLWFhOTUtYmFiYjY3MjVhYjIwIiByZWw9InN0eWxlc2hlZXQiIC8+DQogICAgICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9kZXNrdG9wLWJ1bmRsZS5taW4uanM/dj00NzhhMzQ4ZS1kYzNhLTRiYjEtYWE5NS1iYWJiNjcyNWFiMjAiPjwvc2NyaXB0Pg0KICAgIA0KDQoNCiAgICANCg0KICAgIDwhLS0gR29vZ2xlIGFuYWx5dGljcyB0cmFja2luZyAtLT4NCiAgICA8c2NyaXB0Pg0KICAgICAgICAoZnVuY3Rpb24gKGksIHMsIG8sIGcsIHIsIGEsIG0pIHsNCiAgICAgICAgICAgIGlbJ0dvb2dsZUFuYWx5dGljc09iamVjdCddID0gcjsgaVtyXSA9IGlbcl0gfHwgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIChpW3JdLnEgPSBpW3JdLnEgfHwgW10pLnB1c2goYXJndW1lbnRzKQ0KICAgICAgICAgICAgfSwgaVtyXS5sID0gMSAqIG5ldyBEYXRlKCk7IGEgPSBzLmNyZWF0ZUVsZW1lbnQobyksDQogICAgICAgICAgICAgICAgbSA9IHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobylbMF07IGEuYXN5bmMgPSAxOyBhLnNyYyA9IGc7IG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSkNCiAgICAgICAgfSkod2luZG93LCBkb2N1bWVudCwgJ3NjcmlwdCcsICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnLCAnZ2EnKTsNCg0KICAgICAgICBnYSgnY3JlYXRlJywgJ1VBLTI0OTA4MzItMScsICdhdXRvJyk7DQogICAgPC9zY3JpcHQ+DQoNCiAgICAgICAgPCEtLSBBZHB1c2h1cCAtLT4NCiAgICAgICAgPHNjcmlwdCBkYXRhLWNmYXN5bmM9ImZhbHNlIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgKGZ1bmN0aW9uICh3LCBkKSB7DQogICAgICAgICAgICAgICAgdmFyIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOw0KICAgICAgICAgICAgICAgIHMuc3JjID0gJy8vY2RuLmFkcHVzaHVwLmNvbS80MTg3Mi9hZHB1c2h1cC5qcyc7DQogICAgICAgICAgICAgICAgcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7IHMuYXN5bmMgPSB0cnVlOw0KICAgICAgICAgICAgICAgIChkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0gfHwgZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdKS5hcHBlbmRDaGlsZChzKTsNCiAgICAgICAgICAgIH0pKHdpbmRvdywgZG9jdW1lbnQpOw0KICAgICAgICA8L3NjcmlwdD4NCg0KDQogICAgPCEtLSBHZW9FZGdlLCBwcmV2ZW50IGF1dG8tcmVkaXJlY3RzIC0tPg0KDQogICAgPCEtLSBNYWtlIHN1cmUgdGhpcyBpcyBpbnNlcnRlZCBiZWZvcmUgeW91ciBHUFQgdGFnIC0tPg0KICAgIDxzY3JpcHQgc3JjPSIvU2NyaXB0cy9wcmViaWQ0LjQzLjQuanMiPjwvc2NyaXB0Pg0KDQogICAgDQogICAgDQoNCg0KDQo8IS0tIE1ha2Ugc3VyZSB0aGlzIGlzIGluc2VydGVkIGJlZm9yZSB5b3VyIEdQVCB0YWcgLS0+DQo8c2NyaXB0Pg0KICAgIHZhciBhZFVuaXRzID0gW107DQogICAgdmFyIGFtYXpvbkFkU2xvdHMgPSBbXTsNCg0KICAgIC8vREJGQTENCiAgICBhZFVuaXRzLnB1c2goew0KICAgICAgICBjb2RlOiAnZ29vZ2xlLURCRkExJywNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbOTcwLCAyNTBdXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KDQogICAgICAgIGJpZHM6IFt7DQogICAgICAgICAgICBiaWRkZXI6ICJjcml0ZW8iLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgbmV0d29ya0lkOiAiMTA3MjEiDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHsNCiAgICAgICAgICAgIGJpZGRlcjogJ3J1Ymljb24nLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgYWNjb3VudElkOiAnMTY2NjYnLA0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzE0MTUxOCcsDQogICAgICAgICAgICAgICAgem9uZUlkOiAnMTA0MDg5MCcNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyOTY3NjQnLA0KICAgICAgICAgICAgICAgIHNpemU6IFs5NzAsIDI1MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgYmlkZGVyOiAiYXBwbmV4dXMiLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICIxMzg2MjAyNCINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnY29ubmVjdGFkJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogJzEwMDQ3JywNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxMDI4MTA3Jw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ2FkZm9ybScsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIG1pZDogJzY4NDc2OScNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnc21hcnRhZHNlcnZlcicsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIHNpdGVJZDogMjg2MDA1LA0KICAgICAgICAgICAgICAgICAgICBwYWdlSWQ6IDEwNDY4MzcsDQogICAgICAgICAgICAgICAgICAgIGZvcm1hdElkOiA3NTQ2NQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdsdXBvbm1lZGlhJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgc2l0ZUlkOiA0NTIsDQogICAgICAgICAgICAgICAgICAgIGtleUlkOiAnaW5kZXhocjk3MHgyNTAnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfV0NCiAgICB9KTsNCg0KICAgIC8vREFfTA0KICAgIGFkVW5pdHMucHVzaCh7DQogICAgICAgIGNvZGU6ICdEQV9MJywNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbMzAwLCAyNTBdXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KDQogICAgICAgIGJpZHM6IFt7DQogICAgICAgICAgICBiaWRkZXI6ICJjcml0ZW8iLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgbmV0d29ya0lkOiAiMTA3MjEiDQogICAgICAgICAgICB9DQogICAgICAgIH0sIHsNCiAgICAgICAgICAgIGJpZGRlcjogJ3J1Ymljb24nLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgYWNjb3VudElkOiAnMTY2NjYnLA0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzE0MTUxOCcsDQogICAgICAgICAgICAgICAgem9uZUlkOiAnMjAxMTY3NicNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyNjgyMjEnLA0KICAgICAgICAgICAgICAgIHNpemU6IFszMDAsIDI1MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAiYXBwbmV4dXMiLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICIxMzE5MjE0NyINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnY29ubmVjdGFkJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogJzEwMDQ3JywNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxMDI4MTA3Jw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdhZGZvcm0nLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgbWlkOiAnNjg0NzE5Jw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdzbWFydGFkc2VydmVyJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIHNpdGVJZDogMjg2MDA1LA0KICAgICAgICAgICAgICAgIHBhZ2VJZDogMTA0NjgyMiwNCiAgICAgICAgICAgICAgICBmb3JtYXRJZDogNzU0NjUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnbHVwb25tZWRpYScsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBzaXRlSWQ6IDQ1MiwNCiAgICAgICAgICAgICAgICBrZXlJZDogJ2luZGV4aHIzMDB4MjUwJw0KICAgICAgICAgICAgfQ0KICAgICAgICB9XQ0KICAgIH0pOw0KDQogICAgYW1hem9uQWRTbG90cy5wdXNoKHsNCiAgICAgICAgc2xvdElEOiAnREFfTCcsDQogICAgICAgIHNsb3ROYW1lOiAnLzIxNzAzOTUwMDg3L0RBX3ZpamVzdGlfTCcsDQogICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXV0NCiAgICB9KTsNCg0KICAgIC8vREFfUg0KICAgIGFkVW5pdHMucHVzaCh7DQogICAgICAgIGNvZGU6ICdEQV9SJywNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbMzAwLCAyNTBdXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KDQogICAgICAgIGJpZHM6IFt7DQogICAgICAgICAgICBiaWRkZXI6ICJjcml0ZW8iLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgbmV0d29ya0lkOiAiMTA3MjEiDQogICAgICAgICAgICB9DQogICAgICAgIH0sIHsNCiAgICAgICAgICAgIGJpZGRlcjogJ3J1Ymljb24nLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgYWNjb3VudElkOiAnMTY2NjYnLA0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzE0MTUxOCcsDQogICAgICAgICAgICAgICAgem9uZUlkOiAnMjAxMTY3OCcNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyNjgyMjInLA0KICAgICAgICAgICAgICAgIHNpemU6IFszMDAsIDI1MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAiYXBwbmV4dXMiLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICIxMzE5MjE1NSINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgYmlkZGVyOiAnY29ubmVjdGFkJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogJzEwMDQ3JywNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxMDI4MTA3Jw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdhZGZvcm0nLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgbWlkOiAnNjg0NzE4Jw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdzbWFydGFkc2VydmVyJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIHNpdGVJZDogMjg2MDA1LA0KICAgICAgICAgICAgICAgIHBhZ2VJZDogMTA0NjgyMywNCiAgICAgICAgICAgICAgICBmb3JtYXRJZDogNzU0NjUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnbHVwb25tZWRpYScsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBzaXRlSWQ6IDQ1MiwNCiAgICAgICAgICAgICAgICBrZXlJZDogJ2luZGV4aHIzMDB4MjUwJw0KICAgICAgICAgICAgfQ0KICAgICAgICB9XQ0KICAgIH0pOw0KDQogICAgYW1hem9uQWRTbG90cy5wdXNoKHsNCiAgICAgICAgc2xvdElEOiAnREFfUicsDQogICAgICAgIHNsb3ROYW1lOiAnLzIxNzAzOTUwMDg3L0RBX3ZpamVzdGlfUicsDQogICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXV0NCiAgICB9KTsNCg0KICAgIC8vREEzDQogICAgYWRVbml0cy5wdXNoKHsNCiAgICAgICAgY29kZTogJ0RBMycsDQoNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbMzAwLCAyNTBdLCBbMzAwLCA2MDBdXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBiaWRzOiBbew0KICAgICAgICAgICAgYmlkZGVyOiAiY3JpdGVvIiwNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogIjEwNzIxIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdydWJpY29uJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIGFjY291bnRJZDogJzE2NjY2JywNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxNDE1MTgnLA0KICAgICAgICAgICAgICAgIHpvbmVJZDogJzIwMTE2ODAnDQogICAgICAgICAgICB9DQogICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdpeCcsDQogICAgICAgICAgICBwYXJhbXM6IHsNCg0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzI2ODIyMycsDQogICAgICAgICAgICAgICAgc2l6ZTogWzMwMCwgMjUwXQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ2l4JywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCg0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyNjgyMjMnLA0KICAgICAgICAgICAgICAgICAgICBzaXplOiBbMzAwLCA2MDBdDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAiYXBwbmV4dXMiLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICIxMzE5MjE1OSINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnY29ubmVjdGFkJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiAnMTAwNDcnLA0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxMDI4MTA3Jw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdhZGZvcm0nLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBtaWQ6ICc2ODQ3MjAnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ3NtYXJ0YWRzZXJ2ZXInLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6IDI4NjAwNSwNCiAgICAgICAgICAgICAgICAgICAgcGFnZUlkOiAxMDQ2ODEwLA0KICAgICAgICAgICAgICAgICAgICBmb3JtYXRJZDogNzU0NjUNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnbHVwb25tZWRpYScsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIHNpdGVJZDogNDUyLA0KICAgICAgICAgICAgICAgICAgICBrZXlJZDogJ2luZGV4aHIzMDB4MjUwJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH1dDQogICAgfSk7DQoNCiAgICBhbWF6b25BZFNsb3RzLnB1c2goew0KICAgICAgICBzbG90SUQ6ICdEQTMnLA0KICAgICAgICBzbG90TmFtZTogJy8yMTcwMzk1MDA4Ny9EQTNfdmlqZXN0aScsDQogICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXSwgWzMwMCwgNjAwXV0NCiAgICB9KTsNCg0KICAgIC8vREE0DQogICAgYWRVbml0cy5wdXNoKHsNCiAgICAgICAgY29kZTogJ0RBNCcsDQoNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbOTcwLCA5MF0sIFs3MjgsIDkwXSwgWzk3MCwgMjUwXV0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYmlkczogW3sNCiAgICAgICAgICAgIGJpZGRlcjogImNyaXRlbyIsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBuZXR3b3JrSWQ6ICIxMDcyMSINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAncnViaWNvbicsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBhY2NvdW50SWQ6ICcxNjY2NicsDQogICAgICAgICAgICAgICAgc2l0ZUlkOiAnMTQxNTE4JywNCiAgICAgICAgICAgICAgICB6b25lSWQ6ICcyMDExNjgyJw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdpeCcsDQogICAgICAgICAgICBwYXJhbXM6IHsNCg0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzI2ODIyNCcsDQogICAgICAgICAgICAgICAgc2l6ZTogWzk3MCwgOTBdDQogICAgICAgICAgICB9DQogICAgICAgIH0sIHsNCiAgICAgICAgICAgIGJpZGRlcjogJ2l4JywNCiAgICAgICAgICAgIHBhcmFtczogew0KDQogICAgICAgICAgICAgICAgc2l0ZUlkOiAnMjY4MjI0JywNCiAgICAgICAgICAgICAgICBzaXplOiBbNzI4LCA5MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyNjgyMjQnLA0KICAgICAgICAgICAgICAgIHNpemU6IFs5NzAsIDI1MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgew0KICAgICAgICAgICAgYmlkZGVyOiAiYXBwbmV4dXMiLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgcGxhY2VtZW50SWQ6ICIxMzE5MjE2NiINCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdjb25uZWN0YWQnLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBuZXR3b3JrSWQ6ICcxMDA0NycsDQogICAgICAgICAgICAgICAgICAgIHNpdGVJZDogJzEwMjgxMDcnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ2FkZm9ybScsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIG1pZDogJzY4NDcyMScNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnc21hcnRhZHNlcnZlcicsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIHNpdGVJZDogMjg2MDA1LA0KICAgICAgICAgICAgICAgICAgICBwYWdlSWQ6IDEwNDY4MzUsDQogICAgICAgICAgICAgICAgICAgIGZvcm1hdElkOiA3NTQ2NQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdsdXBvbm1lZGlhJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgc2l0ZUlkOiA0NTIsDQogICAgICAgICAgICAgICAgICAgIGtleUlkOiAnaW5kZXhocjk3MHgyNTAnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfV0NCiAgICB9KTsNCg0KICAgIGFtYXpvbkFkU2xvdHMucHVzaCh7DQogICAgICAgIHNsb3RJRDogJ0RBNCcsDQogICAgICAgIHNsb3ROYW1lOiAnLzIxNzAzOTUwMDg3L0RBNF92aWplc3RpJywNCiAgICAgICAgc2l6ZXM6IFtbOTcwLCA5MF0sIFs3MjgsIDkwXSwgWzk3MCwgMjUwXV0NCiAgICB9KTsNCg0KDQoNCiAgICAvL0JveDENCiAgICBhZFVuaXRzLnB1c2goew0KICAgICAgICBjb2RlOiAnQm94MScsDQoNCiAgICAgICAgbWVkaWFUeXBlczogew0KICAgICAgICAgICAgYmFubmVyOiB7DQogICAgICAgICAgICAgICAgc2l6ZXM6IFtbMzAwLCAyNTBdLCBbMzAwLCA2MDBdXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBiaWRzOiBbew0KICAgICAgICAgICAgYmlkZGVyOiAiY3JpdGVvIiwNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogIjEwNzIxIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICBiaWRkZXI6ICdpeCcsDQogICAgICAgICAgICBwYXJhbXM6IHsNCg0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzI4MzkyMCcsDQogICAgICAgICAgICAgICAgc2l6ZTogWzMwMCwgMjUwXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBiaWRkZXI6ICdpeCcsDQogICAgICAgICAgICBwYXJhbXM6IHsNCg0KICAgICAgICAgICAgICAgIHNpdGVJZDogJzI4MzkyMCcsDQogICAgICAgICAgICAgICAgc2l6ZTogWzMwMCwgNjAwXQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICB7DQogICAgICAgICAgICBiaWRkZXI6ICdydWJpY29uJywNCiAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgIGFjY291bnRJZDogJzE2NjY2JywNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxNDE1MTgnLA0KICAgICAgICAgICAgICAgIHpvbmVJZDogJzEwMDk3MTgnDQogICAgICAgICAgICB9DQogICAgICAgIH0sew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ2Nvbm5lY3RhZCcsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIG5ldHdvcmtJZDogJzEwMDQ3JywNCiAgICAgICAgICAgICAgICAgICAgc2l0ZUlkOiAnMTAyODEwNycNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnYWRmb3JtJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgbWlkOiAnNjg0NzcwJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdzbWFydGFkc2VydmVyJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgc2l0ZUlkOiAyODYwMDUsDQogICAgICAgICAgICAgICAgICAgIHBhZ2VJZDogMTA0NjgxMywNCiAgICAgICAgICAgICAgICAgICAgZm9ybWF0SWQ6IDc1NDY1DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ2x1cG9ubWVkaWEnLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6IDQ1MiwNCiAgICAgICAgICAgICAgICAgICAga2V5SWQ6ICdpbmRleGhyMzAweDYwMCcNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9XQ0KICAgIH0pOw0KDQogICAgLy9Cb3gyDQogICAgYWRVbml0cy5wdXNoKHsNCiAgICAgICAgY29kZTogJ0JveDInLA0KDQogICAgICAgIG1lZGlhVHlwZXM6IHsNCiAgICAgICAgICAgIGJhbm5lcjogew0KICAgICAgICAgICAgICAgIHNpemVzOiBbWzMwMCwgMjUwXSwgWzMwMCwgNjAwXV0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYmlkczogW3sNCiAgICAgICAgICAgIGJpZGRlcjogImNyaXRlbyIsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBuZXR3b3JrSWQ6ICIxMDcyMSINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyODM5MjEnLA0KICAgICAgICAgICAgICAgIHNpemU6IFszMDAsIDI1MF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAnaXgnLA0KICAgICAgICAgICAgcGFyYW1zOiB7DQoNCiAgICAgICAgICAgICAgICBzaXRlSWQ6ICcyODM5MjEnLA0KICAgICAgICAgICAgICAgIHNpemU6IFszMDAsIDYwMF0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwgew0KICAgICAgICAgICAgYmlkZGVyOiAncnViaWNvbicsDQogICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICBhY2NvdW50SWQ6ICcxNjY2NicsDQogICAgICAgICAgICAgICAgc2l0ZUlkOiAnMTQxNTE4JywNCiAgICAgICAgICAgICAgICB6b25lSWQ6ICcxMDA5NzIwJw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnY29ubmVjdGFkJywNCiAgICAgICAgICAgICAgICBwYXJhbXM6IHsNCiAgICAgICAgICAgICAgICAgICAgbmV0d29ya0lkOiAnMTAwNDcnLA0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6ICcxMDI4MTA3Jw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sIHsNCiAgICAgICAgICAgICAgICBiaWRkZXI6ICdhZGZvcm0nLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBtaWQ6ICc2ODQ3NzEnDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwgew0KICAgICAgICAgICAgICAgIGJpZGRlcjogJ3NtYXJ0YWRzZXJ2ZXInLA0KICAgICAgICAgICAgICAgIHBhcmFtczogew0KICAgICAgICAgICAgICAgICAgICBzaXRlSWQ6IDI4NjAwNSwNCiAgICAgICAgICAgICAgICAgICAgcGFnZUlkOiAxMDQ2ODE0LA0KICAgICAgICAgICAgICAgICAgICBmb3JtYXRJZDogNzU0NjUNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCB7DQogICAgICAgICAgICAgICAgYmlkZGVyOiAnbHVwb25tZWRpYScsDQogICAgICAgICAgICAgICAgcGFyYW1zOiB7DQogICAgICAgICAgICAgICAgICAgIHNpdGVJZDogNDUyLA0KICAgICAgICAgICAgICAgICAgICBrZXlJZDogJ2luZGV4aHIzMDB4NjAwJw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH1dDQogICAgfSk7DQogICAgICAgIA0KPC9zY3JpcHQ+DQoNCg0KDQogICAgDQoNCg0KDQoNCjxzY3JpcHQ+DQoNCiAgICAvL2xvYWQgdGhlIGFwc3RhZy5qcyBsaWJyYXJ5IChhbWF6b24gcHJlYmlkKQ0KICAgICFmdW5jdGlvbiAoYTksIGEsIHAsIHMsIHQsIEEsIGcpIHsgaWYgKGFbYTldKSByZXR1cm47IGZ1bmN0aW9uIHEoYywgcikgeyBhW2E5XS5fUS5wdXNoKFtjLCByXSkgfSBhW2E5XSA9IHsgaW5pdDogZnVuY3Rpb24gKCkgeyBxKCJpIiwgYXJndW1lbnRzKSB9LCBmZXRjaEJpZHM6IGZ1bmN0aW9uICgpIHsgcSgiZiIsIGFyZ3VtZW50cykgfSwgc2V0RGlzcGxheUJpZHM6IGZ1bmN0aW9uICgpIHsgfSwgdGFyZ2V0aW5nS2V5czogZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfSwgX1E6IFtdIH07IEEgPSBwLmNyZWF0ZUVsZW1lbnQocyk7IEEuYXN5bmMgPSAhMDsgQS5zcmMgPSB0OyBnID0gcC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXTsgZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShBLCBnKSB9KCJhcHN0YWciLCB3aW5kb3csIGRvY3VtZW50LCAic2NyaXB0IiwgIi8vYy5hbWF6b24tYWRzeXN0ZW0uY29tL2FheDIvYXBzdGFnLmpzIik7DQoNCiAgICAvL2luaXRpYWxpemUgdGhlIGFwc3RhZy5qcyBsaWJyYXJ5IG9uIHRoZSBwYWdlIHRvIGFsbG93IGJpZGRpbmcNCiAgICBhcHN0YWcuaW5pdCh7DQogICAgICAgIHB1YklEOiAnMDMwODZkZWItYjcyOC00MjBhLTlmYWQtMzVlZTMxN2MwNmY2JywgLy9lbnRlciB5b3VyIHB1YiBJRCBoZXJlIGFzIHNob3duIGFib3ZlLCBpdCBtdXN0IHdpdGhpbiBxdW90ZXMNCiAgICAgICAgYWRTZXJ2ZXI6ICdnb29nbGV0YWcnDQogICAgfSk7DQoNCg0KICAgIHZhciBQUkVCSURfSVNfTU9CSUxFID0gZmFsc2U7DQogICAgdmFyIFBSRUJJRF9USU1FT1VUID0gMTUwMDsNCg0KICAgIGlmIChJU19TTE9XX0lOVEVSTkVUID09PSB0cnVlKQ0KICAgICAgICBQUkVCSURfVElNRU9VVCA9IDIwMDA7DQoNCiAgICB2YXIgQ09OU0VOVF9USU1FT1VUID0gMTAwMDsNCiAgICB2YXIgRkFJTFNBRkVfVElNRU9VVCA9IDgwMDA7DQogICAgdmFyIENVUlJFTkNZX1JBVEUgPSAwLjgyOw0KDQogICAgdmFyIHJlcXVlc3RNYW5hZ2VyID0gew0KICAgICAgICBhZHNlcnZlclJlcXVlc3RTZW50OiBmYWxzZSwNCiAgICAgICAgYXBzOiBmYWxzZSwNCiAgICAgICAgcHJlYmlkOiBmYWxzZQ0KICAgIH07DQoNCg0KICAgIHZhciBwYmpzID0gcGJqcyB8fCB7fTsNCiAgICBwYmpzLnF1ZSA9IHBianMucXVlIHx8IFtdOw0KICAgIHZhciBhZFVuaXRzID0gYWRVbml0cyB8fCBbXTsNCiAgICB2YXIgYW1hem9uQWRTbG90cyA9IGFtYXpvbkFkU2xvdHMgfHwgW107DQoNCg0KDQogICAgcGJqcy5iaWRkZXJTZXR0aW5ncyA9IHsNCiAgICAgICAgcnViaWNvbjogew0KICAgICAgICAgICAgYmlkQ3BtQWRqdXN0bWVudDogZnVuY3Rpb24gKGJpZENwbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBiaWRDcG0gKiBDVVJSRU5DWV9SQVRFOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBjcml0ZW86IHsNCiAgICAgICAgICAgIGJpZENwbUFkanVzdG1lbnQ6IGZ1bmN0aW9uIChiaWRDcG0pIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmlkQ3BtICogQ1VSUkVOQ1lfUkFURTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgaXg6IHsNCiAgICAgICAgICAgIGJpZENwbUFkanVzdG1lbnQ6IGZ1bmN0aW9uIChiaWRDcG0pIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmlkQ3BtICogQ1VSUkVOQ1lfUkFURTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYXBwbmV4dXM6IHsNCiAgICAgICAgICAgIGJpZENwbUFkanVzdG1lbnQ6IGZ1bmN0aW9uIChiaWRDcG0pIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmlkQ3BtICogQ1VSUkVOQ1lfUkFURTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgY29ubmVjdGFkOiB7DQogICAgICAgICAgICBiaWRDcG1BZGp1c3RtZW50OiBmdW5jdGlvbiAoYmlkQ3BtKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGJpZENwbSAqIENVUlJFTkNZX1JBVEU7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGFkZm9ybTogew0KICAgICAgICAgICAgYmlkQ3BtQWRqdXN0bWVudDogZnVuY3Rpb24gKGJpZENwbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBiaWRDcG07IC8vKiBDVVJSRU5DWV9SQVRFOyByZW1vdmluZyBjdXJyZW5jeSByYXRlLCBhcyByZXF1ZXN0ZWQgZm9yIGFkZm9ybQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBvcGVueDogew0KICAgICAgICAgICAgYmlkQ3BtQWRqdXN0bWVudDogZnVuY3Rpb24gKGJpZENwbSkgew0KICAgICAgICAgICAgICAgIHJldHVybiBiaWRDcG0gKiBDVVJSRU5DWV9SQVRFOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBzbWFydGFkc2VydmVyOiB7DQogICAgICAgICAgICBiaWRDcG1BZGp1c3RtZW50OiBmdW5jdGlvbiAoYmlkQ3BtKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIGJpZENwbSAqIENVUlJFTkNZX1JBVEU7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGx1cG9ubWVkaWE6IHsNCiAgICAgICAgICAgIGJpZENwbUFkanVzdG1lbnQ6IGZ1bmN0aW9uIChiaWRDcG0pIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmlkQ3BtICogQ1VSUkVOQ1lfUkFURTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH07DQoNCiAgICBjb25zdCBjdXN0b21QcmViaWRHcmFudWxhcml0eSA9IHsNCiAgICAgICAgImJ1Y2tldHMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgIm1pbiI6IDAsDQogICAgICAgICAgICAgICAgIm1heCI6IDEwMCwNCiAgICAgICAgICAgICAgICAiaW5jcmVtZW50IjogMC4wMQ0KICAgICAgICAgICAgfQ0KICAgICAgICBdDQogICAgfTsNCg0KDQogICAgdmFyIGdvb2dsZXRhZyA9IGdvb2dsZXRhZyB8fCB7fTsNCiAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsNCiAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZGlzYWJsZUluaXRpYWxMb2FkKCk7DQogICAgfSk7DQoNCg0KICAgIHdpbmRvdy5kaWRvbWlFdmVudExpc3RlbmVycyA9IHdpbmRvdy5kaWRvbWlFdmVudExpc3RlbmVycyB8fCBbXTsNCiAgICB3aW5kb3cuZGlkb21pRXZlbnRMaXN0ZW5lcnMucHVzaCh7DQogICAgICAgIGV2ZW50OiAnaW50ZWdyYXRpb25zLmNvbnNlbnRwYXNzZWR0b2RmcCcsDQogICAgICAgIGxpc3RlbmVyOiBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgLy8gQ29uc2VudCBoYXMgYmVlbiBwYXNzZWQgdG8gR29vZ2xlDQogICAgICAgICAgICAvLyBMb2FkIG9yIHJlZnJlc2ggYWRzIGFzIG5lZWRlZCB3aXRoIERGUCwgUHJlYmlkLCBldGMuDQogICAgICAgICAgICAvLyBgZGF0YS5jb25zZW50U3RhdHVzYCBjb250YWlucyB0aGUgY3VycmVudCBjb25zZW50IHN0YXR1cyBvZiB0aGUgdXNlciAodHJ1ZS9mYWxzZS91bmRlZmluZWQpDQogICAgICAgICAgICAvLyBgZGF0YS5pbmRleGAgY29udGFpbnMgdGhlIGluZGV4IG9mIHRoZSBldmVudCAoaW50ZWdlcikNCiAgICAgICAgICAgIGlmIChkYXRhLmluZGV4ID09PSAwKSB7DQogICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgdmVyeSBmaXJzdCBldmVudCBvbiB0aGUgcGFnZSB0aGF0IGdldHMgdHJpZ2dlcmVkIG9uIHBhZ2UgbG9hZA0KICAgICAgICAgICAgICAgIGluaXRpYWxpemVHb29nbGV0YWdSZWZyZXNoV2l0aFByZWJpZCgpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGV2ZW50IHRoYXQgaGFwcGVucyBsYXRlciBvbiB0aGUgcGFnZSwgYWZ0ZXIgYSB1c2VyIGFjdGlvbiAodXNlciBnaXZpbmcgY29uc2VudCBvciBjaGFuZ2luZyB0aGVpciBwcmVmZXJlbmNlcykNCiAgICAgICAgICAgICAgICAvL2dvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9KTsNCg0KDQoNCg0KICAgIGZ1bmN0aW9uIGluaXRpYWxpemVHb29nbGV0YWdSZWZyZXNoV2l0aFByZWJpZCgpIHsNCiAgICAgICAgLy9hbWF6b24gaW5pdA0KICAgICAgICAvLyBBUFMgcmVxdWVzdA0KICAgICAgICBpZiAoYW1hem9uQWRTbG90cy5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICBhcHN0YWcuZmV0Y2hCaWRzKHsNCiAgICAgICAgICAgICAgICBzbG90czogYW1hem9uQWRTbG90cw0KICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGJpZHMpIHsNCiAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBhcHN0YWcuc2V0RGlzcGxheUJpZHMoKTsNCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1hbmFnZXIuYXBzID0gdHJ1ZTsgLy8gc2lnbmFscyB0aGF0IEFQUyByZXF1ZXN0IGhhcyBjb21wbGV0ZWQNCiAgICAgICAgICAgICAgICAgICAgYmlkZGVyc0JhY2soKTsgLy8gY2hlY2tzIHdoZXRoZXIgYm90aCBBUFMgYW5kIFByZWJpZCBoYXZlIHJldHVybmVkDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLmFwcyA9IHRydWU7IC8vIHNpZ25hbHMgdGhhdCBBUFMgcmVxdWVzdCBoYXMgY29tcGxldGVkDQogICAgICAgICAgICBiaWRkZXJzQmFjaygpOyAvLyBjaGVja3Mgd2hldGhlciBib3RoIEFQUyBhbmQgUHJlYmlkIGhhdmUgcmV0dXJuZWQNCiAgICAgICAgfQ0KDQogICAgICAgIC8vcHJlYmlkIGluaXQNCiAgICAgICAgcGJqcy5xdWUucHVzaChmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgICAgIHBianMuc2V0Q29uZmlnKHsNCiAgICAgICAgICAgICAgICBjb25zZW50TWFuYWdlbWVudDogew0KICAgICAgICAgICAgICAgICAgICBjbXBBcGk6ICdpYWInLA0KICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiBDT05TRU5UX1RJTUVPVVQsDQogICAgICAgICAgICAgICAgICAgIGFsbG93QXVjdGlvbldpdGhvdXRDb25zZW50OiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0R2RwclNjb3BlOiB0cnVlDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAvL2RlYnVnOiB0cnVlLA0KICAgICAgICAgICAgICAgIHVzZXJTeW5jOiB7DQogICAgICAgICAgICAgICAgICAgIGZpbHRlclNldHRpbmdzOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaWRkZXJzOiAnKicsICAgICAgLy8gJyonIHJlcHJlc2VudHMgYWxsIGJpZGRlcnMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6ICdpbmNsdWRlJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB1c2VySWRzOiBbew0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImxvdGFtZVBhbm9yYW1hSWQiLCAvL0xvdGFtZSBQYW5vcmFtYSBJRA0KICAgICAgICAgICAgICAgICAgICB9XQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcHJpY2VHcmFudWxhcml0eTogY3VzdG9tUHJlYmlkR3JhbnVsYXJpdHksDQogICAgICAgICAgICAgICAgZW5hYmxlU2VuZEFsbEJpZHM6IHRydWUNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBwYmpzLmFkZEFkVW5pdHMoYWRVbml0cyk7DQogICAgICAgICAgICBwYmpzLnJlcXVlc3RCaWRzKHsNCiAgICAgICAgICAgICAgICBiaWRzQmFja0hhbmRsZXI6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBianMuc2V0VGFyZ2V0aW5nRm9yR1BUQXN5bmMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNYW5hZ2VyLnByZWJpZCA9IHRydWU7IC8vIHNpZ25hbHMgdGhhdCBQcmViaWQgcmVxdWVzdCBoYXMgY29tcGxldGVkDQogICAgICAgICAgICAgICAgICAgICAgICBiaWRkZXJzQmFjaygpOyAvLyBjaGVja3Mgd2hldGhlciBib3RoIEFQUyBhbmQgUHJlYmlkIGhhdmUgcmV0dXJuZWQNCiAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHRpbWVvdXQ6IFBSRUJJRF9USU1FT1VUDQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfQ0KDQoNCiAgICAvLyB3aGVuIGJvdGggQVBTIGFuZCBQcmViaWQgaGF2ZSByZXR1cm5lZCwgaW5pdGlhdGUgYWQgcmVxdWVzdA0KICAgIGZ1bmN0aW9uIGJpZGRlcnNCYWNrKCkgew0KICAgICAgICBpZiAocmVxdWVzdE1hbmFnZXIuYXBzICYmIHJlcXVlc3RNYW5hZ2VyLnByZWJpZCkgew0KICAgICAgICAgICAgc2VuZEFkc2VydmVyUmVxdWVzdCgpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCg0KICAgIGZ1bmN0aW9uIHNlbmRBZHNlcnZlclJlcXVlc3QoKSB7DQogICAgICAgIGlmIChyZXF1ZXN0TWFuYWdlci5hZHNlcnZlclJlcXVlc3RTZW50ID09PSB0cnVlKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCiAgICAgICAgcmVxdWVzdE1hbmFnZXIuYWRzZXJ2ZXJSZXF1ZXN0U2VudCA9IHRydWU7DQoNCiAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIHBianMucXVlLnB1c2goZnVuY3Rpb24gKCkgew0KDQogICAgICAgICAgICAgICAgdmFyIHBiSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgLy93aGVuIGFkcyBhcmUgYXZhaWxhYmxlLCByZWZyZXNoIGl0DQogICAgICAgICAgICAgICAgICAgIGlmIChnb29nbGV0YWcucHViYWRzKCkuZ2V0U2xvdHMoKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncGJqcyBjYWxsYmFjaycpDQogICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBiSW50ZXJ2YWwpOyAvL2NsZWFyIGludGVydmFsIGZvciBhZCByZW5kZXIgKHNob3VsZCB0cmlnZ2VyIG9ubHkgb25jZSkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkucmVmcmVzaCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZnJlc2hlZCcpDQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIH0sIDEwKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvL2luIGNhc2UgUEJKUyBkb2Vzbid0IGxvYWQNCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgc2VuZEFkc2VydmVyUmVxdWVzdCgpOw0KICAgIH0sIEZBSUxTQUZFX1RJTUVPVVQpOw0KDQoNCjwvc2NyaXB0Pg0KICAgIA0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIHdpbmRvdy5nZHByQXBwbGllc0dsb2JhbGx5ID0gdHJ1ZTsgKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgZnVuY3Rpb24gYShlKSB7DQogICAgICAgICAgICBpZiAoIXdpbmRvdy5mcmFtZXNbZV0pIHsNCiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpIHsgdmFyIHQgPSBkb2N1bWVudC5ib2R5OyB2YXIgbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpOyBuLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7IG4ubmFtZSA9IGU7IG4udGl0bGUgPSBlOyB0Lmluc2VydEJlZm9yZShuLCB0LmZpcnN0Q2hpbGQpIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IGEoZSkgfSwgNSkgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGZ1bmN0aW9uIGUobiwgciwgbywgYywgcykgew0KICAgICAgICAgICAgZnVuY3Rpb24gZShlLCB0LCBuLCBhKSB7IGlmICh0eXBlb2YgbiAhPT0gImZ1bmN0aW9uIikgeyByZXR1cm4gfSBpZiAoIXdpbmRvd1tyXSkgeyB3aW5kb3dbcl0gPSBbXSB9IHZhciBpID0gZmFsc2U7IGlmIChzKSB7IGkgPSBzKGUsIHQsIG4pIH0gaWYgKCFpKSB7IHdpbmRvd1tyXS5wdXNoKHsgY29tbWFuZDogZSwgcGFyYW1ldGVyOiB0LCBjYWxsYmFjazogbiwgdmVyc2lvbjogYSB9KSB9IH0gZS5zdHViID0gdHJ1ZTsgZnVuY3Rpb24gdChhKSB7DQogICAgICAgICAgICAgICAgaWYgKCF3aW5kb3dbbl0gfHwgd2luZG93W25dLnN0dWIgIT09IHRydWUpIHsgcmV0dXJuIH0gaWYgKCFhLmRhdGEpIHsgcmV0dXJuIH0NCiAgICAgICAgICAgICAgICB2YXIgaSA9IHR5cGVvZiBhLmRhdGEgPT09ICJzdHJpbmciOyB2YXIgZTsgdHJ5IHsgZSA9IGkgPyBKU09OLnBhcnNlKGEuZGF0YSkgOiBhLmRhdGEgfSBjYXRjaCAodCkgeyByZXR1cm4gfSBpZiAoZVtvXSkgeyB2YXIgciA9IGVbb107IHdpbmRvd1tuXShyLmNvbW1hbmQsIHIucGFyYW1ldGVyLCBmdW5jdGlvbiAoZSwgdCkgeyB2YXIgbiA9IHt9OyBuW2NdID0geyByZXR1cm5WYWx1ZTogZSwgc3VjY2VzczogdCwgY2FsbElkOiByLmNhbGxJZCB9OyBhLnNvdXJjZS5wb3N0TWVzc2FnZShpID8gSlNPTi5zdHJpbmdpZnkobikgOiBuLCAiKiIpIH0sIHIudmVyc2lvbikgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3dbbl0gIT09ICJmdW5jdGlvbiIpIHsgd2luZG93W25dID0gZTsgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgdCwgZmFsc2UpIH0gZWxzZSB7IHdpbmRvdy5hdHRhY2hFdmVudCgib25tZXNzYWdlIiwgdCkgfSB9DQogICAgICAgIH0gZSgiX190Y2ZhcGkiLCAiX190Y2ZhcGlCdWZmZXIiLCAiX190Y2ZhcGlDYWxsIiwgIl9fdGNmYXBpUmV0dXJuIik7IGEoIl9fdGNmYXBpTG9jYXRvciIpOyAoZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgIHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7IHQuaWQgPSAic3BjbG9hZGVyIjsgdC50eXBlID0gInRleHQvamF2YXNjcmlwdCI7IHQuYXN5bmMgPSB0cnVlOyB0LnNyYyA9ICJodHRwczovL3Nkay5wcml2YWN5LWNlbnRlci5vcmcvIiArIGUgKyAiL2xvYWRlci5qcz90YXJnZXQ9IiArIGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lOyB0LmNoYXJzZXQgPSAidXRmLTgiOyB2YXIgbiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTsgbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCBuKQ0KICAgICAgICB9KSgiMDI3NTc1MjAtZWQ4Yi00YzU0LThiZmQtNGE1ZjU1NDhkZTk4IikNCiAgICB9KSgpOzwvc2NyaXB0Pg0KDQoNCjwhLS1kaWRvbWktLT4NCjwhLS1lbmQtLT4NCg0KDQoNCiAgICA8c2NyaXB0IHR5cGU9ImRpZG9taS9qYXZhc2NyaXB0IiBkYXRhLXZlbmRvcj0iZGlkb21pOmdvb2dsZSIgYXN5bmMgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgICB2YXIgZ29vZ2xldGFnID0gZ29vZ2xldGFnIHx8IHt9Ow0KICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsNCiAgICA8L3NjcmlwdD4NCg0KDQogICAgPHNjcmlwdD4NCiAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgDQogICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygncnVicmlrYScsICd2aWplc3RpJyk7DQogICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnYXJ0aWNsZUlkJywgJzIyNzA3MTAnKTsNCiAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCdSaWplY2lfaXpfbmFzbG92YScsIFsidG95b3RhIiwicmF6dmlqYSIsIm5vdmkiLCJtb3RvciIsInZvZGlrIl0pOw0KDQoNCiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ3BvZHJ1YnJpa2FJZCcsIFsiMTU1NCJdKTsNCiAgICAgICAgDQoNCiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2F1dGhvcklkJywgWyIxNDEiXSk7DQogICAgICAgIA0KDQogICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCd0YWdJZCcsIFsiNTk1NSJdKTsNCiAgICAgICAgDQoNCiAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlU2luZ2xlUmVxdWVzdCgpOw0KICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5jb2xsYXBzZUVtcHR5RGl2cyh0cnVlKTsNCiAgICAgICAgICAgICAgICAvL2dvb2dsZXRhZy5wdWJhZHMoKS5zZXRDZW50ZXJpbmcodHJ1ZSk7DQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygncmVmZXJlcicsICdpbmRleC5ocicpOw0KICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ2FyXzEnLCAnZmFsc2UnKTsNCg0KICAgICAgICAgICAgICAgIC8vZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZ29vZ2xlVGFnU2VydmljZS5BZGRTbG90UmVuZGVyRW5kZWRMaXN0ZW5lcigpOw0KICAgIDwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnIHNyYz0nLy9zdGF0aWMuY3JpdGVvLm5ldC9qcy9sZC9wdWJsaXNoZXJ0YWcuanMnPjwvc2NyaXB0Pg0KDQoNCiAgICA8IS0tIE1pY3Jvc29mdCBjbGFyaXR5IC0tPg0KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCiAgICAgICAgKGZ1bmN0aW9uIChjLCBsLCBhLCByLCBpLCB0LCB5KSB7DQogICAgICAgICAgICBjW2FdID0gY1thXSB8fCBmdW5jdGlvbiAoKSB7IChjW2FdLnEgPSBjW2FdLnEgfHwgW10pLnB1c2goYXJndW1lbnRzKSB9Ow0KICAgICAgICAgICAgdCA9IGwuY3JlYXRlRWxlbWVudChyKTsgdC5hc3luYyA9IDE7IHQuc3JjID0gImh0dHBzOi8vd3d3LmNsYXJpdHkubXMvdGFnLyIgKyBpOw0KICAgICAgICAgICAgeSA9IGwuZ2V0RWxlbWVudHNCeVRhZ05hbWUocilbMF07IHkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCwgeSk7DQogICAgICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsICJjbGFyaXR5IiwgInNjcmlwdCIsICI4bjB4OHo2YnA4Iik7DQogICAgPC9zY3JpcHQ+DQoNCiAgICA8IS0tQkVHSU4gRklSU1RJTVBSRVNTSU9OIFRBRyAtIGluZGV4LmhyIC0tPg0KICAgIDwhLS0gRU5EIEZJUlNUSU1QUkVTU0lPTiBUQUcgLS0+DQoNCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IlRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsiIC8+DQogICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSJKQVBBTlNLQSBUb3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrIGthbyBkaW8gc3ZvZyBrb25jZXB0YSBzbWFuamVuamEgZW1pc2lqZSBzdGFrbGVuaSYjeDEwRDtraWggcGxpbm92YSwga2EmI3gxN0U7ZSBzZSB1IHByaW9wJiN4MTA3O2VuanUga29ycG9yYWNpamUgb2JqYXZsamVub20gZGFuYXMuIiAvPg0KICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNGM1NzA1ZTUtNGVmOC00MTdmLWJjYWQtYTJlZDQ1OTM1YjcxLmpwZz9mYl93dHJtcms9dmlqZXN0aS5qcGcmYW1wO3dpZHRoPTEyMDAmYW1wO2hlaWdodD02MzAmYW1wO21vZGU9Y3JvcCZhbXA7Zm9ybWF0PXBuZyIgLz4NCiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2U6d2lkdGgiIGNvbnRlbnQ9IjEyMDAiIC8+DQogICAgPG1ldGEgcHJvcGVydHk9Im9nOmltYWdlOmhlaWdodCIgY29udGVudD0iNjMwIiAvPg0KDQogICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4NCiAgICAgICAgeyJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsIkB0eXBlIjoiV2ViU2l0ZSIsIm5hbWUiOiJJbmRleC5ociIsInBvdGVudGlhbEFjdGlvbiI6eyJAdHlwZSI6IlNlYXJjaEFjdGlvbiIsInRhcmdldCI6Imh0dHBzOi8vd3d3LmluZGV4LmhyL3RyYXppLmFzcHg/dXBpdD17c2VhcmNoX3Rlcm1fc3RyaW5nfSIsInF1ZXJ5LWlucHV0IjoicmVxdWlyZWQgbmFtZT1zZWFyY2hfdGVybV9zdHJpbmcifSwidXJsIjoiaHR0cHM6Ly93d3cuaW5kZXguaHIvIn0NCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPg0KICAgICAgICB7IkBjb250ZXh0IjoiaHR0cHM6Ly9zY2hlbWEub3JnIiwiQHR5cGUiOiJPcmdhbml6YXRpb24iLCJuYW1lIjoiSW5kZXguaHIiLCJzYW1lQXMiOlsiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2luZGV4LmhyLyIsImh0dHBzOi8vdHdpdHRlci5jb20vaW5kZXhociIsImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNVcDZINGtvMzJYcW5WXzZNT1B1bkJBIl0sInVybCI6Imh0dHBzOi8vd3d3LmluZGV4LmhyLyIsImxvZ28iOnsiQHR5cGUiOiJJbWFnZU9iamVjdCIsInVybCI6Imh0dHBzOi8vd3d3LmluZGV4LmhyL0NvbnRlbnQvaW1nL2xvZ28vaW5kZXhfbG9nb18xMTJ4MTEyLnBuZyJ9fQ0KICAgIDwvc2NyaXB0Pg0KDQogICAgDQogICAgPGxpbmsgaHJlZj0iL0NvbnRlbnQvYm9vdHN0cmFwLXJhdGluZy5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz4NCiAgICA8c2NyaXB0IHNyYz0naHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzJz48L3NjcmlwdD4NCiAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cuaW5kZXguaHIvdmlqZXN0aS9jbGFuYWsvdG95b3RhLXJhenZpamEtbm92aS1tb3Rvci1uYS12b2Rpay8yMjcwNzEwLmFzcHgiPg0KICAgIDxsaW5rIHJlbD0ib2c6dXJsIiBocmVmPSJodHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwIj4NCiAgICA8bGluayByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cuaW5kZXguaHIvbW9iaWxlL2NsYW5hay5hc3B4P2NhdGVnb3J5PXZpamVzdGkmaWQ9MjI3MDcxMCI+DQogICAgPGxpbmsgcmVsPSJhbXBodG1sIiBocmVmPSJodHRwczovL3d3dy5pbmRleC5oci9hbXAvdmlqZXN0aS9jbGFuYWsvdG95b3RhLXJhenZpamEtbm92aS1tb3Rvci1uYS12b2Rpay8yMjcwNzEwLmFzcHgiPg0KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJhcnRpY2xlIiAvPg0KICAgIDxtZXRhIHByb3BlcnR5PSJvZzp1cmwiIGNvbnRlbnQ9Imh0dHBzOi8vd3d3LmluZGV4LmhyL2NsYW5hay5hc3B4P2lkPTIyNzA3MTAiPg0KDQogICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4NCiAgICAgICAgeyJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsIkB0eXBlIjoiV2ViUGFnZSIsIm5hbWUiOiJUb3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrIiwiZGVzY3JpcHRpb24iOiJKQVBBTlNLQSBUb3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrIGthbyBkaW8gc3ZvZyBrb25jZXB0YSBzbWFuamVuamEgZW1pc2lqZSBzdGFrbGVuacSNa2loIHBsaW5vdmEsIGthxb5lIHNlIHUgcHJpb3DEh2VuanUga29ycG9yYWNpamUgb2JqYXZsamVub20gZGFuYXMuIiwidXJsIjoiaHR0cHM6Ly93d3cuaW5kZXguaHIvIiwicHVibGlzaGVyIjp7IkB0eXBlIjoiT3JnYW5pemF0aW9uIiwibmFtZSI6IkluZGV4LmhyIiwic2FtZUFzIjpbImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pbmRleC5oci8iLCJodHRwczovL3R3aXR0ZXIuY29tL2luZGV4aHIiLCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDVXA2SDRrbzMyWHFuVl82TU9QdW5CQSJdLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci8iLCJsb2dvIjp7IkB0eXBlIjoiSW1hZ2VPYmplY3QiLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci9Db250ZW50L2ltZy9sb2dvL2luZGV4X2xvZ29fMTEyeDExMi5wbmcifX19DQogICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4NCiAgICAgICAgeyJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsIkB0eXBlIjoiQnJlYWRjcnVtYkxpc3QiLCJpdGVtTGlzdEVsZW1lbnQiOlt7IkB0eXBlIjoiTGlzdEl0ZW0iLCJuYW1lIjoiSW5kZXguaHIiLCJpdGVtIjp7IkB0eXBlIjoiVGhpbmciLCJAaWQiOiJodHRwczovL3d3dy5pbmRleC5ociJ9LCJwb3NpdGlvbiI6MX0seyJAdHlwZSI6Ikxpc3RJdGVtIiwibmFtZSI6IlZpamVzdGkiLCJpdGVtIjp7IkB0eXBlIjoiVGhpbmciLCJAaWQiOiJodHRwczovL3d3dy5pbmRleC5oci92aWplc3RpIn0sInBvc2l0aW9uIjoyfSx7IkB0eXBlIjoiTGlzdEl0ZW0iLCJuYW1lIjoiTm92YWMiLCJpdGVtIjp7IkB0eXBlIjoiVGhpbmciLCJAaWQiOiJodHRwczovL3d3dy5pbmRleC5oci92aWplc3RpL3J1YnJpa2Evbm92YWMvMTU1NC5hc3B4In0sInBvc2l0aW9uIjozfSx7IkB0eXBlIjoiTGlzdEl0ZW0iLCJuYW1lIjoiVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayIsIml0ZW0iOnsiQHR5cGUiOiJUaGluZyIsIkBpZCI6Imh0dHBzOi8vd3d3LmluZGV4LmhyL3ZpamVzdGkvY2xhbmFrL3RveW90YS1yYXp2aWphLW5vdmktbW90b3ItbmEtdm9kaWsvMjI3MDcxMC5hc3B4In0sInBvc2l0aW9uIjo0fV19DQogICAgPC9zY3JpcHQ+DQogICAgPHNjcmlwdCB0eXBlPSJhcHBsaWNhdGlvbi9sZCtqc29uIj4NCiAgICAgICAgeyJAY29udGV4dCI6Imh0dHBzOi8vc2NoZW1hLm9yZyIsIkB0eXBlIjoiTmV3c0FydGljbGUiLCJuYW1lIjoiVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayIsImRlc2NyaXB0aW9uIjoiSkFQQU5TS0EgVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayBrYW8gZGlvIHN2b2cga29uY2VwdGEgc21hbmplbmphIGVtaXNpamUgc3Rha2xlbmnEjWtpaCBwbGlub3ZhLCBrYcW+ZSBzZSB1IHByaW9wxIdlbmp1IGtvcnBvcmFjaWplIG9iamF2bGplbm9tIGRhbmFzLiIsImltYWdlIjp7IkB0eXBlIjoiSW1hZ2VPYmplY3QiLCJ1cmwiOiJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci80YzU3MDVlNS00ZWY4LTQxN2YtYmNhZC1hMmVkNDU5MzViNzEuanBnIiwiaGVpZ2h0Ijo3MjQsIndpZHRoIjoxMjAwfSwibWFpbkVudGl0eU9mUGFnZSI6eyJAdHlwZSI6IldlYlBhZ2UiLCJuYW1lIjoiVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayIsImRlc2NyaXB0aW9uIjoiSkFQQU5TS0EgVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayBrYW8gZGlvIHN2b2cga29uY2VwdGEgc21hbmplbmphIGVtaXNpamUgc3Rha2xlbmnEjWtpaCBwbGlub3ZhLCBrYcW+ZSBzZSB1IHByaW9wxIdlbmp1IGtvcnBvcmFjaWplIG9iamF2bGplbm9tIGRhbmFzLiIsInVybCI6Imh0dHBzOi8vd3d3LmluZGV4LmhyL3ZpamVzdGkvY2xhbmFrL3RveW90YS1yYXp2aWphLW5vdmktbW90b3ItbmEtdm9kaWsvMjI3MDcxMC5hc3B4IiwicHVibGlzaGVyIjp7IkB0eXBlIjoiT3JnYW5pemF0aW9uIiwibmFtZSI6IkluZGV4LmhyIiwic2FtZUFzIjpbImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pbmRleC5oci8iLCJodHRwczovL3R3aXR0ZXIuY29tL2luZGV4aHIiLCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDVXA2SDRrbzMyWHFuVl82TU9QdW5CQSJdLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci8iLCJsb2dvIjp7IkB0eXBlIjoiSW1hZ2VPYmplY3QiLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci9Db250ZW50L2ltZy9sb2dvL2luZGV4X2xvZ29fMTEyeDExMi5wbmcifX19LCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci92aWplc3RpL2NsYW5hay90b3lvdGEtcmF6dmlqYS1ub3ZpLW1vdG9yLW5hLXZvZGlrLzIyNzA3MTAuYXNweCIsImF1dGhvciI6eyJAdHlwZSI6IlBlcnNvbiIsIm5hbWUiOiJIaW5hIn0sImRhdGVNb2RpZmllZCI6IjIwMjEtMDQtMjIiLCJkYXRlUHVibGlzaGVkIjoiMjAyMS0wNC0yMiIsImhlYWRsaW5lIjoiVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayIsImtleXdvcmRzIjoiVG95b3RhIiwicHVibGlzaGVyIjp7IkB0eXBlIjoiT3JnYW5pemF0aW9uIiwibmFtZSI6IkluZGV4LmhyIiwic2FtZUFzIjpbImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pbmRleC5oci8iLCJodHRwczovL3R3aXR0ZXIuY29tL2luZGV4aHIiLCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDVXA2SDRrbzMyWHFuVl82TU9QdW5CQSJdLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci8iLCJsb2dvIjp7IkB0eXBlIjoiSW1hZ2VPYmplY3QiLCJ1cmwiOiJodHRwczovL3d3dy5pbmRleC5oci9Db250ZW50L2ltZy9sb2dvL2luZGV4X2xvZ29fMTEyeDExMi5wbmcifX19DQogICAgPC9zY3JpcHQ+DQoNCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZmluZ2VycHJpbnRqczIvMS42LjEvZmluZ2VycHJpbnQyLm1pbi5qcyI+PC9zY3JpcHQ+DQoNCiAgICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBhcz0iaW1hZ2UiIGltYWdlc3Jjc2V0PSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci80YzU3MDVlNS00ZWY4LTQxN2YtYmNhZC1hMmVkNDU5MzViNzEuanBnP3dpZHRoPTc2NSZhbXA7aGVpZ2h0PTQ2MiI+DQoNCg0KPC9oZWFkPg0KPGJvZHk+DQogICAgPCEtLU9wZW5YLS0+DQogICAgPGlmcmFtZSBzcmM9Ii8vdS5vcGVueC5uZXQvdy8xLjAvcGQ/cGg9JmNiPTk1NjI0NjM0LTE2MzYtNGM5NS04OTRkLWJiMThmNzA5ZGEyNSZnZHByPTEmZ2Rwcl9jb25zZW50PTIiIHN0eWxlPSJkaXNwbGF5Om5vbmU7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6MDsgYm9yZGVyOm5vbmU7Ij48L2lmcmFtZT4NCg0KICAgICAgICANCg0KDQogICAgPGRpdiBpZD0iZmItcm9vdCI+PC9kaXY+DQogICAgPHNjcmlwdD4NCg0KICAgICAgICB2YXIgZmluaXNoZWRfcmVuZGVyaW5nID0gZnVuY3Rpb24gKG9iaikgew0KDQogICAgICAgICAgICAkKCIuZmItbG9hZGVyIikuYWRkQ2xhc3MoImRpc3BsYXktbm9uZSIpOw0KICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSAkKCIuZmItbG9hZGVyIikubmV4dCgnLmZiLWNvbW1lbnRzJykuY2hpbGRyZW4oKS5oZWlnaHQoKTsNCiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID09PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5mYi13YXJuLWxvZ2luLWhvbGRlcicpLnNob3coKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5mYi13YXJuLWxvZ2luLWhvbGRlcicpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LCA1MDApOw0KDQogICAgICAgIH0NCg0KICAgICAgICB3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBGQi5FdmVudC5zdWJzY3JpYmUoJ3hmYm1sLnJlbmRlcicsIGZpbmlzaGVkX3JlbmRlcmluZyk7DQogICAgICAgIH07DQoNCiAgICAgICAgKGZ1bmN0aW9uIChkLCBzLCBpZCkgew0KICAgICAgICAgICAgdmFyIGpzOw0KICAgICAgICAgICAgY29uc3QgZmpzID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXTsNCiAgICAgICAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkgcmV0dXJuOw0KICAgICAgICAgICAganMgPSBkLmNyZWF0ZUVsZW1lbnQocyk7DQogICAgICAgICAgICBqcy5pZCA9IGlkOw0KDQogICAgICAgICAgICAgICAgICAgICAgICBqcy5zcmMgPSAiLy9jb25uZWN0LmZhY2Vib29rLm5ldC9ocl9IUi9zZGsuanMjeGZibWw9MSZ2ZXJzaW9uPXY2LjAmYXBwSWQ9MjE2MDYwMTE1MjA5ODE5IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZqcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcywgZmpzKTsNCiAgICAgICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7DQogICAgPC9zY3JpcHQ+DQoNCg0KDQogICAgPGRpdiBjbGFzcz0ibWFpbi1jb250YWluZXIgbm8tcGFkZGluZyBtYWluLWNvbnRlbnQtYmciPg0KICAgICAgICAgICAgICAgIA0KDQoNCiAgICA8IS0tIC8yMTcwMzk1MDA4Ny9EQjFfaHIgLS0+DQogICAgPGRpdiBpZD0nREIxX2hyJyBjbGFzcz0ianMtc2xvdC1jb250YWluZXIiIGRhdGEtY3NzLWNsYXNzPSJnb29nbGUtYm94IGJvdHRvbS1tYXJnaW4tNDAiPg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyIGRiMVNsb3QgPSBnb29nbGV0YWcuZGVmaW5lU2xvdCgnLzIxNzAzOTUwMDg3L0RCMV9ocl9WaWplc3RpJywgW1s5NzAsIDI1MF0sIFs5NzAsIDUwMF0sIFsxMTQwLCAyNTBdLCBbMTE0MCwgNTAwXSwgWzEsIDFdXSwgJ0RCMV9ocicpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsNCg0KICAgICAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoJ0RCMV9ocicpOw0KICAgICAgICB9KTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCg0KICAgIA0KDQo8aGVhZGVyIGNsYXNzPSJtYWluLW1lbnUtY29udGFpbmVyIj4NCiAgICA8ZGl2IGNsYXNzPSJmbG9hdC1tZW51IG5vLWhlaWdodCIgbWVudS1maXgtdG9wPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLWNvbnRhaW5lciBuby1oZWlnaHQgY2xlYXJmaXgiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1tZW51IG5vLWhlaWdodCI+DQogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ianMtbG9nbyBsb2dvIHZpamVzdGktYmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImhvbWVwYWdlLWxpbmsiIGhyZWY9Ii8iIHRpdGxlPSJpbmRleC5ociI+IDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Im1haW4iIHNyYz0iL0NvbnRlbnQvaW1nL2xvZ28vaW5kZXhfbWFpbi5zdmciIGFsdD0iaW5kZXguaHIiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJzbWFsbCIgc3JjPSIvQ29udGVudC9pbWcvbG9nby9wYXByaWthX2xvZ28uc3ZnIiBhbHQ9ImluZGV4LmhyIiAvPg0KICAgICAgICAgICAgICAgICAgICA8L2gxPg0KICAgICAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1lbnUtaG9sZGVyIGNsZWFyZml4Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZW51LW5hc2xvdm5pY2EiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtYWluLXRleHQtaG92ZXIgbm8tZHJvcCIgaHJlZj0iLyI+IE5hc2xvdm5pY2E8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciB2aWplc3RpLXRleHQgIiBocmVmPSIvdmlqZXN0aSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWplc3RpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNwb3J0LXRleHQtaG92ZXIgICIgaHJlZj0iL3Nwb3J0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwb3J0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im1hZ2F6aW4tdGV4dC1ob3ZlciAgIiBocmVmPSIvbWFnYXppbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWdhemluDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im9nbGFzaS10ZXh0LWhvdmVyICAiIGhyZWY9Imh0dHA6Ly93d3cuaW5kZXguaHIvb2dsYXNpLyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPZ2xhc2kNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InJlY2VwdGktdGV4dC1ob3ZlciIgaHJlZj0iaHR0cHM6Ly9yZWNlcHRpLmluZGV4LmhyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVjZXB0aQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lbnUtb3N0YWxvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZXhwYW5kYWJsZSI+T3N0YWxvPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZHJvcGRvd24tY29udGVudCBvc3RhbG8gZGlzcGxheS1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibGFqa2hyLWJnLWhvdmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmluZGV4LmhyL2xhamsvIj5MYWprLmhyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYXV0by1iZy1ob3ZlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvYXV0byI+QXV0bzwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1hbWUtYmctaG92ZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL21hbWUiPk1hbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJsanViaW1jaS1iZy1ob3ZlciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbGp1YmltY2kiPkxqdWJpbWNpPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZml0LWJnLWhvdmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9maXQiPkZpdDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1haW4tYmctaG92ZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL3d3dy5pbmRleC5oci9pbmRleGZvcnVtLyI+Rm9ydW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYWluLWJnLWhvdmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbmZvL3RlY2FqIj5UZSYjeDEwRDthajwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1haW4tYmctaG92ZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2luZm8vdHYiPlRWIHByb2dyYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYWluLWJnLWhvdmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbmZvL2tpbm8iPktpbm88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtYWluLWJnLWhvdmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbmZvL3ZyaWplbWUiPlZyaWplbWU8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJpZ2h0LXBhcnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii90cmF6aS5hc3B4IiBjbGFzcz0iYnRuLW9wZW4tc2VhcmNoIj48aSBjbGFzcz0iaW5kZXgtbWFnbmlmaWVyIj48L2k+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCg0KDQogICAgPGRpdiBjbGFzcz0ic3ViLW1lbnUtY29udGFpbmVyIG1haW4tY29udGFpbmVyIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic3ViLW1lbnUtaG9sZGVyIHNjcm9sbC1tZW51LWFycm93cy1ob2xkZXIiIGRhdGEtYW5pbWF0ZS13aWR0aD0iMjAwIj4NCiAgICAgICAgICAgIDx1bCBjbGFzcz0ic3ViLW1lbnUgc2Nyb2xsLW1lbnUgY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1Yi1tZW51LWl0ZW0gc2Nyb2xsLW1lbnUtaXRlbSB2aWplc3RpLWJvcmRlci1ib3R0b20gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii92aWplc3RpIj5WaWplc3RpPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1Yi1tZW51LWl0ZW0gc2Nyb2xsLW1lbnUtaXRlbSB2aWplc3RpLWJvcmRlci1ib3R0b20gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii9uYWpub3ZpamU/a2F0ZWdvcmlqYT0zIj5OYWpub3ZpamU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViLW1lbnUtaXRlbSBzY3JvbGwtbWVudS1pdGVtIHZpamVzdGktYm9yZGVyLWJvdHRvbSAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IiIgaHJlZj0iL25hamNpdGFuaWplP2thdGVnb3JpamE9MyI+TmFqJiN4MTBEO2l0YW5pamU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViLW1lbnUtaXRlbSBzY3JvbGwtbWVudS1pdGVtIHZpamVzdGktYm9yZGVyLWJvdHRvbSAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IiIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS9ocnZhdHNrYS8yMi5hc3B4Ij5IcnZhdHNrYTwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWItbWVudS1pdGVtIHNjcm9sbC1tZW51LWl0ZW0gdmlqZXN0aS1ib3JkZXItYm90dG9tICI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL3phZ3JlYi8xNTUzLmFzcHgiPlphZ3JlYjwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWItbWVudS1pdGVtIHNjcm9sbC1tZW51LWl0ZW0gdmlqZXN0aS1ib3JkZXItYm90dG9tICI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL3JlZ2lqYS8xNTQwLmFzcHgiPlJlZ2lqYTwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzdWItbWVudS1pdGVtIHNjcm9sbC1tZW51LWl0ZW0gdmlqZXN0aS1ib3JkZXItYm90dG9tICI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL2V1LzUwNDAuYXNweCI+RVU8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViLW1lbnUtaXRlbSBzY3JvbGwtbWVudS1pdGVtIHZpamVzdGktYm9yZGVyLWJvdHRvbSAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IiIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS9zdmlqZXQvMjMuYXNweCI+U3ZpamV0PC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1Yi1tZW51LWl0ZW0gc2Nyb2xsLW1lbnUtaXRlbSB2aWplc3RpLWJvcmRlci1ib3R0b20gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2Evem5hbm9zdC8xNzIyLmFzcHgiPlpuYW5vc3Q8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic3ViLW1lbnUtaXRlbSBzY3JvbGwtbWVudS1pdGVtIHZpamVzdGktYm9yZGVyLWJvdHRvbSAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IiIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS9jcm5hLWtyb25pa2EvNDYuYXNweCI+Q3JuYSBrcm9uaWthPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1Yi1tZW51LWl0ZW0gc2Nyb2xsLW1lbnUtaXRlbSB2aWplc3RpLWJvcmRlci1ib3R0b20gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2Eva29tZW50YXJpLzE0MTMuYXNweCI+S29tZW50YXJpPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InN1Yi1tZW51LWl0ZW0gc2Nyb2xsLW1lbnUtaXRlbSB2aWplc3RpLWJvcmRlci1ib3R0b20gYWN0aXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2Evbm92YWMvMTU1NC5hc3B4Ij5Ob3ZhYzwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzY3JvbGwtbWVudS1hcnJvd3MgZGlzcGxheS1ub25lIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZpZ2F0aW9uLWFycm93IGxlZnQtYXJyb3cgZGlzYWJsZWQgdmlqZXN0aS10ZXh0LWhvdmVyIj48aSBjbGFzcz0iaW5kZXgtYXJyb3ctbGVmdCI+PC9pPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmlnYXRpb24tYXJyb3cgcmlnaHQtYXJyb3cgZGlzYWJsZWQgdmlqZXN0aS10ZXh0LWhvdmVyIj48aSBjbGFzcz0iaW5kZXgtYXJyb3ctcmlnaHQiPjwvaT48L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvaGVhZGVyPg0KDQoNCg0KICAgIA0KDQoNCg0KDQoNCiAgICA8IS0tIC8yMTcwMzk1MDA4Ny9EX09VUCAtLT4NCjxkaXYgaWQ9IkRfT1VQIj4NCiAgICA8c2NyaXB0Pg0KICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZU91dE9mUGFnZVNsb3QoJy8yMTcwMzk1MDA4Ny9EX09VUF9BTEwnLCAnRF9PVVAnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQoNCiAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KCdEX09VUCcpOw0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCjwvZGl2Pg0KICAgIDwhLS0gLzIxNzAzOTUwMDg3L0RfT1VQX3dhbGxwYXBlciAtLT4NCjxkaXYgaWQ9IkRfT1VQX3dhbGxwYXBlciI+DQogICAgPHNjcmlwdD4NCiAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGdvb2dsZXRhZy5kZWZpbmVPdXRPZlBhZ2VTbG90KCcvMjE3MDM5NTAwODcvRF9PVVBfd2FsbHBhcGVyJywgJ0RfT1VQX3dhbGxwYXBlcicpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsNCg0KICAgICAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoJ0RfT1VQX3dhbGxwYXBlcicpOw0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCjwvZGl2Pg0KICAgIA0KDQoNCjxkaXYgY2xhc3M9ImpzLXNsb3QtY29udGFpbmVyIiBkYXRhLWJvdHRvbS1zdGlja3k9InRydWUiPg0KICAgIDxkaXYgY2xhc3M9ImpzLXNsb3QtY2xvc2UtYnRuIGRmcC1jbG9zZS1idG4gZGlzcGxheS1ub25lIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iY2xvc2UtYnRuLWNyZWF0aXZlIj4NCiAgICAgICAgICAgIDxpIGNsYXNzPSJpbmRleC1jbG9zZSI+PC9pPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KICAgIDwhLS0gLzIxNzAzOTUwMDg3L0RfYm90dG9tX3N0aWNreSAtLT4NCiAgICA8ZGl2IGlkPSdEX2JvdHRvbV9zdGlja3knIGNsYXNzPSJqcy1zbG90LWhvbGRlciIgZGF0YS1jc3MtY2xhc3M9Imdvb2dsZS1ib3ggYm90dG9tLXN0aWNreSI+DQogICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5kZWZpbmVTbG90KCcvMjE3MDM5NTAwODcvRF9ib3R0b21fc3RpY2t5JywgW1s3MjgsOTBdLCBbOTcwLDkwXSwgWzEyMDAsMTUwXSwgWzEsIDFdXSwgJ0RfYm90dG9tX3N0aWNreScpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsNCg0KICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KCdEX2JvdHRvbV9zdGlja3knKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICA8L3NjcmlwdD4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQoNCg0KDQo8c3R5bGU+DQogICAgLm1haW4tY29udGFpbmVyIHsNCiAgICAgICAgbWF4LXdpZHRoOiAxMTQwcHg7DQogICAgfQ0KDQogICAgLmRmcC1sZWZ0LWNvbHVtbiB7DQogICAgICAgIG1hcmdpbi1yaWdodDogNTcwcHg7DQogICAgfQ0KDQogICAgLmRmcC1yaWdodC1jb2x1bW4gew0KICAgICAgICBtYXJnaW4tbGVmdDogNTcwcHg7DQogICAgfQ0KPC9zdHlsZT4NCg0KPGFydGljbGUgY2xhc3M9ImFydGljbGUtY29udGFpbmVyIj4NCiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWhlYWRlci1jb2RlIj4NCiAgICAgICAgDQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWhvbGRlciBtYWluLWNvbnRhaW5lciBtYWluLWNvbnRlbnQtYmcgIj4NCg0KDQoNCg0KICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXRpdGxlLWhvbGRlciI+DQogICAgICAgICAgICANCg0KDQo8aDEgY2xhc3M9InZpamVzdGktdGV4dC1wYXJzZWQgdGl0bGUiPlRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWs8L2gxPg0KPGRpdiBjbGFzcz0iYXJ0aWNsZS1pbmZvIGZsZXgiPg0KICAgIDxkaXYgY2xhc3M9ImF1dGhvci1ob2xkZXIiPg0KICAgICAgICA8c3BhbiBjbGFzcz0iYXV0aG9yIj5IaW5hPC9zcGFuPg0KICAgICAgICA8c3BhbiBjbGFzcz0idGltZSAiPg0KICAgICAgICAgICAgICAgIDxzcGFuPjIyLjQuMjAyMS48L3NwYW4+DQogICAgICAgIDwvc3Bhbj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJzb2NpYWwtaG9sZGVyIGZsZXgiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJmYi1zaGFyZS1idXR0b24gZmItc2hhcmUiIGRhdGEtaHJlZj0iaHR0cHM6Ly93d3cuaW5kZXguaHIvY2xhbmFrLmFzcHg/aWQ9MjI3MDcxMCIgZGF0YS1sYXlvdXQ9ImJ1dHRvbl9jb3VudCIgZGF0YS1zaXplPSJzbWFsbCI+PC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9Im90aGVyIj48aSBjbGFzcz0iaW5kZXgtc2hhcmUiPjwvaT48L2Rpdj4NCiAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0ic2hhcmUtYnV0dG9ucy1ob2xkZXIgZGlzcGxheS1ub25lIGNsZWFyZml4Ij4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgYXN5bmMgc3JjPSJodHRwczovL3BsYXRmb3JtLnR3aXR0ZXIuY29tL3dpZGdldHMuanMiPjwvc2NyaXB0Pg0KICAgIDxhIGNsYXNzPSJzaGFyZS1idXR0b24gdHdpdHRlci1iZyIgc2hhcmUtYnV0dG9uIGRhdGEtc2hhcmUtYWN0aW9uPSJ0d2l0dGVyIiBkYXRhLWFydGljbGUtaWQ9IjIyNzA3MTAiIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD1odHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwJnZpYT1pbmRleGhyJnRleHQ9VG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayZzaXplPWxhcmdlIj4NCiAgICAgICAgPGkgY2xhc3M9ImluZGV4LXR3aXR0ZXIiPjwvaT4NCiAgICA8L2E+DQoNCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCINCiAgICAgICAgICAgIGFzeW5jIGRlZmVyDQogICAgICAgICAgICBzcmM9Ii8vYXNzZXRzLnBpbnRlcmVzdC5jb20vanMvcGluaXQuanMiPjwvc2NyaXB0Pg0KDQogICAgPGEgY2xhc3M9InNoYXJlLWJ1dHRvbiBwaW50ZXJlc3QtYmcgcGluLWl0LWJ1dHRvbiIgc2hhcmUtYnV0dG9uIGRhdGEtc2hhcmUtYWN0aW9uPSJwaW50ZXJlc3QiIGRhdGEtYXJ0aWNsZS1pZD0iMjI3MDcxMCIgaHJlZj0iaHR0cDovL3BpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vP3VybD1odHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwJm1lZGlhPWh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzRjNTcwNWU1LTRlZjgtNDE3Zi1iY2FkLWEyZWQ0NTkzNWI3MS5qcGcmZGVzY3JpcHRpb249VG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayIgZGF0YS1waW4tY3VzdG9tPSJ0cnVlIj4NCiAgICAgICAgPGkgY2xhc3M9ImluZGV4LXBpbnRlcmVzdCI+PC9pPg0KICAgIDwvYT4NCg0KICAgIDxhIGNsYXNzPSJzaGFyZS1idXR0b24gZ3BsdXMtYmciIHNoYXJlLWJ1dHRvbiBkYXRhLXNoYXJlLWFjdGlvbj0iZ3BsdXMiIGRhdGEtYXJ0aWNsZS1pZD0iMjI3MDcxMCIgaHJlZj0iaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vc2hhcmU/dXJsPWh0dHBzOi8vd3d3LmluZGV4LmhyL2NsYW5hay5hc3B4P2lkPTIyNzA3MTAiIG9uY2xpY2s9ImphdmFzY3JpcHQ6d2luZG93Lm9wZW4odGhpcy5ocmVmLCcnLCAnbWVudWJhcj1ubyx0b29sYmFyPW5vLHJlc2l6YWJsZT15ZXMsc2Nyb2xsYmFycz15ZXMsaGVpZ2h0PTYwMCx3aWR0aD00MDAnKTtyZXR1cm4gZmFsc2U7Ij4NCiAgICAgICAgPGkgY2xhc3M9ImluZGV4LWdwbHVzIj48L2k+DQogICAgPC9hPg0KDQogICAgPGEgY2xhc3M9InNoYXJlLWJ1dHRvbiBsaW5rZWRpbi1iZyIgc2hhcmUtYnV0dG9uIGRhdGEtc2hhcmUtYWN0aW9uPSJsaW5rZWRpbiIgZGF0YS1hcnRpY2xlLWlkPSIyMjcwNzEwIiBocmVmPSJodHRwczovL3d3dy5saW5rZWRpbi5jb20vc2hhcmVBcnRpY2xlP21pbmk9dHJ1ZSZ1cmw9aHR0cHM6Ly93d3cuaW5kZXguaHIvY2xhbmFrLmFzcHg/aWQ9MjI3MDcxMCZ0aXRsZT1Ub3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrJnN1bW1hcnk9SkFQQU5TS0EgVG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayBrYW8gZGlvIHN2b2cga29uY2VwdGEgc21hbmplbmphIGVtaXNpamUgc3Rha2xlbmkmI3gxMEQ7a2loIHBsaW5vdmEsIGthJiN4MTdFO2Ugc2UgdSBwcmlvcCYjeDEwNztlbmp1IGtvcnBvcmFjaWplIG9iamF2bGplbm9tIGRhbmFzLiZzb3VyY2U9SW5kZXguaHIiIG9uY2xpY2s9ImphdmFzY3JpcHQ6d2luZG93Lm9wZW4odGhpcy5ocmVmLCcnLCAnbWVudWJhcj1ubyx0b29sYmFyPW5vLHJlc2l6YWJsZT15ZXMsc2Nyb2xsYmFycz15ZXMsaGVpZ2h0PTQwMCx3aWR0aD02MDAnKTtyZXR1cm4gZmFsc2U7Ij4NCiAgICAgICAgPGkgY2xhc3M9ImluZGV4LWxpbmtlZEluIj48L2k+DQogICAgPC9hPg0KDQogICAgPGEgY2xhc3M9InNoYXJlLWJ1dHRvbiBtYWlsLWJnIiBzaGFyZS1idXR0b24gZGF0YS1zaGFyZS1hY3Rpb249Im1haWwiIGRhdGEtYXJ0aWNsZS1pZD0iMjI3MDcxMCIgaHJlZj0ibWFpbHRvOj9zdWJqZWN0PVRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsmYm9keT1odHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwIiB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC1tYWlsIj48L2k+DQogICAgPC9hPg0KDQogICAgPGRpdiBjbGFzcz0ic2hhcmUtYnV0dG9uIGJ0bi1jbG9zZSI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC1jbG9zZSI+PC9pPg0KICAgIDwvZGl2Pg0KPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KICAgICAgICA8L2Rpdj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtcGFydCBmbGV4Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtcGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCjxmaWd1cmUgY2xhc3M9ImltZy1jb250YWluZXIiPg0KICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiIHN0eWxlPSJwYWRkaW5nLWJvdHRvbTogNjAuMzklOyI+DQogICAgICAgIDxpbWcgY2xhc3M9ImltZy1yZXNwb25zaXZlIiBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzRjNTcwNWU1LTRlZjgtNDE3Zi1iY2FkLWEyZWQ0NTkzNWI3MS5qcGc/d2lkdGg9NzY1JmFtcDtoZWlnaHQ9NDYyIiBhbHQ9IlRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsiIC8+DQogICAgPC9kaXY+DQoNCg0KICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz0ibWFpbi1pbWctZGVzYyBjbGVhcmZpeCI+DQogICAgICAgICAgICA8c3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNyZWRpdHMiPkZvdG86IEVQQTwvc3Bhbj4NCiAgICAgICAgPC9maWdjYXB0aW9uPg0KPC9maWd1cmU+DQoNCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KICAgIDwhLS0gLzIxNzAzOTUwMDg3L0RJQV9kaXJla3RuYSAtLT4NCiAgICA8ZGl2IGNsYXNzPSJqcy1zbG90LWNvbnRhaW5lciIgZGF0YS1jc3MtY2xhc3M9ImRmcC1pbmFydGljbGUiIGRhdGEtZGlzY2xhaW1lcj0idHJ1ZSI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJqcy1zbG90LWRpc2NsYWltZXIgYWQtdW5pdC10ZXh0IGRpc3BsYXktbm9uZSI+DQogICAgICAgICAgICBUZWtzdCBzZSBuYXN0YXZsamEgaXNwb2Qgb2dsYXNhDQogICAgICAgIDwvc3Bhbj4NCg0KICAgICAgICA8ZGl2IGlkPSJkZnAtRElBX2RpcmVrdG5hIj4NCiAgICAgICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZVNsb3QoJy8yMTcwMzk1MDA4Ny9ESUFfZGlyZWt0bmFfVmlqZXN0aScsIFtbNjIwLCAyNTBdLCBbNjIwLCAzNTBdLCBbNzYwLCAxNTBdLCBbNzYwLCAyMDBdLCBbMzAwLCAyNTBdXSwgJ2RmcC1ESUFfZGlyZWt0bmEnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoJ2RmcC1ESUFfZGlyZWt0bmEnKTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIDwvc2NyaXB0Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KPGRpdiBjbGFzcz0idGV4dCB2aWplc3RpLWxpbmstdW5kZXJsaW5lIj4NCiAgICA8cD5KQVBBTlNLQSBUb3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrJm5ic3A7a2FvIGRpbyBzdm9nIGtvbmNlcHRhIHNtYW5qZW5qYSBlbWlzaWplIHN0YWtsZW5pxI1raWggcGxpbm92YSwga2HFvmUgc2UgdSBwcmlvcMSHZW5qdSBrb3Jwb3JhY2lqZSBvYmphdmxqZW5vbSBkYW5hcy48L3A+Cgo8cD5Ob3ZpIHZvZGlrb3YmbmJzcDt0dXJib21vdG9yIGJpdCDEh2UgdHJvY2lsaW5kcmHFoSB6YXByZW1pbmUgMS42IGxpdGFyYS4gVSZuYnNwO3ByaW5jaXB1IGplIHNsacSNYW4gYmVuemluc2tvbSBtb3RvcnUsIGFsaSBvc2ltIHpib2cmbmJzcDt6YW5lbWFyaXZlIHBvdHJvxaFuamUgbW90b3Jub2cgdWxqYSwmbmJzcDtuZcSHZSBlbWl0aXJhdGkgbmlrYWt2ZSBzdGFrbGVuacSNa2UgcGxpbm92ZSwga2HFvnUgdSBUb3lvdGkuJm5ic3A7PC9wPgoKPHA+RG9kYWp1IGRhIGplIGl6Z2FyYW5qZSB2b2Rpa2EgYnLFvmUmbmJzcDtuZWdvIGl6Z2FyYW5qZSBiZW56aW5hLCDFoXRvIHBveml0aXZubyB1dGplxI1lIG5hIGRpbmFtaWt1IGF1dG9tb2JpbGEuPC9wPgoKPHA+VG95b3RhIG/EjWVrdWplIGRhIMSHZSBtb3RvciB0ZXN0aXJhdGkgdSBzdmlibmp1IHRpamVrb20gamVkbmUgb2QgZXRhcGEgbG9rYWxuZSB1dHJrZSBuYSBzdGF6aSB1IHByZWZla3R1cmkgU2hpenVva2EuPC9wPgoKPHA+VG95b3RhIHZlxIcgaW1hIGlza3VzdHZhIHUgaXpyYWRpIHZvZGlrb3ZpaCBtb3RvcmEuIFR2cnRrYSBqZSAyMDE0LiBwcmVkc3RhdmlsYSBwcnZpIHN2amV0c2tpIHNlcmlqc2tpIGF1dG9tb2JpbCBuYSB0dSB2cnN0dSZuYnNwO2dvcml2YSwgTWlyYWkuIE1lxJF1dGltLCB1IG5qZWdhIGplIHUgb3Nub3ZpIHVncmHEkWVuIGVsZWt0cmnEjW5pIG1vdG9yIGtvamkgZG9iaXZhIGVuZXJnaWp1IHBvdHJlYm51IHphIHBva3JldGFuamUgc3Ryb2phIGl6IGtlbWlqc2tlIHJlYWtjaWplIHZvZGlrYSBpIGtpc2lrYSwmbmJzcDthIG51c3Byb2l6dm9kIGplIHZvZGEuPC9wPjxkaXYgY2xhc3M9ImpzLXNsb3QtY29udGFpbmVyIHJlc2VydmUtaGVpZ2h0LXdpdGgtZGlzY2xhaW1lciIgZGF0YS1jc3MtY2xhc3M9ImRmcC1pbmFydGljbGUiIGRhdGEtZGlzY2xhaW1lcj0idHJ1ZSIgZGF0YS1jc3MtcmVtb3ZlLWFmdGVyLXJlbmRlcj0icmVzZXJ2ZS1oZWlnaHQtd2l0aC1kaXNjbGFpbWVyIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpzLXNsb3QtbG9hZGVyIG1haW4tbG9hZGVyIGNlbnRlci1hbGlnbmVyIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkZXItYW5pbWF0aW9uIj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjwvZGl2Pg0KDQoNCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICA8c3BhbiBjbGFzcz0ianMtc2xvdC1kaXNjbGFpbWVyIGFkLXVuaXQtdGV4dCBkaXNwbGF5LW5vbmUiPg0KICAgICAgICAgICAgICAgIFRla3N0IHNlIG5hc3RhdmxqYSBpc3BvZCBvZ2xhc2ENCiAgICAgICAgICAgIDwvc3Bhbj4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4IG5vLW1hcmdpbiBkb3VibGUiPg0KICAgICAgICAgICAgPCEtLSAvMjE3MDM5NTAwODcvREFfTCAtLT4NCiAgICAgICAgPGRpdiBpZD0iREFfTCIgY2xhc3M9Im5vLW1hcmdpbiI+DQogICAgICAgICAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gZ29vZ2xldGFnLmRlZmluZVNsb3QoJy8yMTcwMzk1MDA4Ny9EQV9WaWplc3RpX0wnLCBbWzMwMCwgMjUwXSwgWzEsIDFdXSwgJ0RBX0wnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCdUcnVlJyA9PSAnVHJ1ZScpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90LnNldENvbGxhcHNlRW1wdHlEaXYodHJ1ZSwgZmFsc2UpOyAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoJ0RBX0wnKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPCEtLSAvMjE3MDM5NTAwODcvREFfUiAtLT4NCiAgICAgICAgPGRpdiBpZD0iREFfUiIgY2xhc3M9Im5vLW1hcmdpbiI+DQogICAgICAgICAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gZ29vZ2xldGFnLmRlZmluZVNsb3QoJy8yMTcwMzk1MDA4Ny9EQV9WaWplc3RpX1InLCBbWzMwMCwgMjUwXSwgWzEsIDFdXSwgJ0RBX1InKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCdUcnVlJyA9PSAnVHJ1ZScpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90LnNldENvbGxhcHNlRW1wdHlEaXYodHJ1ZSwgZmFsc2UpOyAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoJ0RBX1InKTsNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+Cgo8cD5VbmF0b8SNIG5lZGF2bm9tIHBvxI1ldGt1IHByb2RhamUmbmJzcDtkcnVnZSZuYnNwO2dlbmVyYWNpamUgdG9nIGF1dG9tb2JpbGEsIE1pcmFpIG5pamUgcHJldmnFoWUgdHJhxb5lbiB1IEphcGFudS4gVSZuYnNwO3ByaWxvZyBtdSBuZSBpZHUmbmJzcDt2aXNva2EmbmJzcDtjaWplbmEmbmJzcDtpIG5lZG9zdGF0bm8mbmJzcDtyYXp2aWplbmEmbmJzcDttcmXFvmEgcHVuaW9uaWNhIHZvZGlrb20uPC9wPgoKPHA+SmFwYW5za2EgdmxhZGEgcG90a3JhaiBwcm/FoWxlIGdvZGluZSBvZG9icmlsYSBqZSBwbGFuIHphIHNtYW5qZW5qZSBlbWlzaWphIHN0YWtsZW5pxI1raWggcGxpbm92YSZuYnNwO2tvamkmbmJzcDtpem1lxJF1IG9zdGFsb2cmbmJzcDtwb3N0YXZsamEgY2lsaiBwb3N0dXBub2cgcHJlc3RhbmthIHByb2l6dm9kbmplIHN2aWggYmVuemluc2tpaCBpIGRpemVsc2tpaCB2b3ppbGEgZG8gc3JlZGluZSAyMDMwLWloIGdvZGluYS48L3A+Cgo8cD5QcmVtYSBqYXBhbnNrb2ogdmxhZGksIHRhIHJhenZvam5hIHN0cmF0ZWdpamEgdHJlYmFsYSBiaSBwb3Rha251dGkgcHJpdnJlZHUgaSBzdHZvcml0aSBla29ub21za2kgdcSNaW5hayBvZCBnb3Rvdm8gOTAwIG1pbGlqYXJkaSBkb2xhcmEgZG8gMjAzMC4gZ29kaW5lIGkgdmnFoWUgb2QgMS44IGJpbGlqdW5hIHUgc2xqZWRlxIdpaCAyMCBnb2RpbmEuPC9wPgoNCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KPGRpdiBjbGFzcz0iYXJ0aWNsZS1yZXBvcnQtY29udGFpbmVyIj4NCiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJlcG9ydC10cmlnZ2VyIiBkYXRhLWFydGljbGUtaWQ9IjIyNzA3MTAiPlpuYXRlIGxpIG5lxaF0byB2acWhZSBvIHRlbWkgaWxpIMW+ZWxpdGUgcHJpamF2aXRpIGdyZcWha3UgdSB0ZWtzdHU/PC9kaXY+DQogICAgPGRpdiBjbGFzcz0icG9wdXAtaG9sZGVyIHJlcG9ydC1ob2xkZXIgZGlzcGxheS1ub25lIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZy1jb250YWluZXIiPg0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImltZy1oZWxwZXIiPjwvc3Bhbj4NCiAgICAgICAgICAgIDxpbWcgc3JjPSIvQ29udGVudC9pbWcvbG9hZGVyXzQwcHguZ2lmIiAvPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KDQogICAgPCEtLSAvMjE3MDM5NTAwODcvRElBIC0tPg0KICAgIDxkaXYgaWQ9ImRmcC1ESUEiPg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBnb29nbGV0YWcuZGVmaW5lU2xvdCgnLzIxNzAzOTUwMDg3L0RJQV92aWplc3RpJywgWydmbHVpZCcsIFs3NjEsIDE1Ml0sIFs3NjAsIDIwMF0sIFszMDAsIDI1MF0sIFs2MjAsIDM1MF0sIFs3NjAsIDE1MF0sIFsxLCAxXV0sICdkZnAtRElBJykuYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpOw0KICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KCdkZnAtRElBJyk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgPC9zY3JpcHQ+DQogICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPGRpdiBjbGFzcz0icmVhY3Rpb25zLWNvbnRhaW5lciBjbGVhcmZpeCI+DQogICAgPGRpdiBjbGFzcz0ic29jaWFsLWhvbGRlciBzb2NpYWwtYm90dG9tIGZsZXgiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJmYi1zaGFyZS1idXR0b24gZmItc2hhcmUiIHN0eWxlPSJwYWRkaW5nOjA7IiBkYXRhLWhyZWY9Imh0dHBzOi8vd3d3LmluZGV4LmhyL2NsYW5hay5hc3B4P2lkPTIyNzA3MTAiIGRhdGEtbGF5b3V0PSJidXR0b25fY291bnQiIGRhdGEtc2l6ZT0ic21hbGwiPjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJvdGhlciI+PGkgY2xhc3M9ImluZGV4LXNoYXJlIj48L2k+PC9kaXY+DQogICAgICAgIA0KDQoNCjxkaXYgY2xhc3M9InNoYXJlLWJ1dHRvbnMtaG9sZGVyIGRpc3BsYXktbm9uZSBjbGVhcmZpeCI+DQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jIHNyYz0iaHR0cHM6Ly9wbGF0Zm9ybS50d2l0dGVyLmNvbS93aWRnZXRzLmpzIj48L3NjcmlwdD4NCiAgICA8YSBjbGFzcz0ic2hhcmUtYnV0dG9uIHR3aXR0ZXItYmciIHNoYXJlLWJ1dHRvbiBkYXRhLXNoYXJlLWFjdGlvbj0idHdpdHRlciIgZGF0YS1hcnRpY2xlLWlkPSIyMjcwNzEwIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD91cmw9aHR0cHM6Ly93d3cuaW5kZXguaHIvY2xhbmFrLmFzcHg/aWQ9MjI3MDcxMCZ2aWE9aW5kZXhociZ0ZXh0PVRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsmc2l6ZT1sYXJnZSI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC10d2l0dGVyIj48L2k+DQogICAgPC9hPg0KDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiDQogICAgICAgICAgICBhc3luYyBkZWZlcg0KICAgICAgICAgICAgc3JjPSIvL2Fzc2V0cy5waW50ZXJlc3QuY29tL2pzL3Bpbml0LmpzIj48L3NjcmlwdD4NCg0KICAgIDxhIGNsYXNzPSJzaGFyZS1idXR0b24gcGludGVyZXN0LWJnIHBpbi1pdC1idXR0b24iIHNoYXJlLWJ1dHRvbiBkYXRhLXNoYXJlLWFjdGlvbj0icGludGVyZXN0IiBkYXRhLWFydGljbGUtaWQ9IjIyNzA3MTAiIGhyZWY9Imh0dHA6Ly9waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLz91cmw9aHR0cHM6Ly93d3cuaW5kZXguaHIvY2xhbmFrLmFzcHg/aWQ9MjI3MDcxMCZtZWRpYT1odHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci80YzU3MDVlNS00ZWY4LTQxN2YtYmNhZC1hMmVkNDU5MzViNzEuanBnJmRlc2NyaXB0aW9uPVRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsiIGRhdGEtcGluLWN1c3RvbT0idHJ1ZSI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC1waW50ZXJlc3QiPjwvaT4NCiAgICA8L2E+DQoNCiAgICA8YSBjbGFzcz0ic2hhcmUtYnV0dG9uIGdwbHVzLWJnIiBzaGFyZS1idXR0b24gZGF0YS1zaGFyZS1hY3Rpb249ImdwbHVzIiBkYXRhLWFydGljbGUtaWQ9IjIyNzA3MTAiIGhyZWY9Imh0dHBzOi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD1odHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwIiBvbmNsaWNrPSJqYXZhc2NyaXB0OndpbmRvdy5vcGVuKHRoaXMuaHJlZiwnJywgJ21lbnViYXI9bm8sdG9vbGJhcj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9eWVzLGhlaWdodD02MDAsd2lkdGg9NDAwJyk7cmV0dXJuIGZhbHNlOyI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC1ncGx1cyI+PC9pPg0KICAgIDwvYT4NCg0KICAgIDxhIGNsYXNzPSJzaGFyZS1idXR0b24gbGlua2VkaW4tYmciIHNoYXJlLWJ1dHRvbiBkYXRhLXNoYXJlLWFjdGlvbj0ibGlua2VkaW4iIGRhdGEtYXJ0aWNsZS1pZD0iMjI3MDcxMCIgaHJlZj0iaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL3NoYXJlQXJ0aWNsZT9taW5pPXRydWUmdXJsPWh0dHBzOi8vd3d3LmluZGV4LmhyL2NsYW5hay5hc3B4P2lkPTIyNzA3MTAmdGl0bGU9VG95b3RhIHJhenZpamEgbm92aSBtb3RvciBuYSB2b2RpayZzdW1tYXJ5PUpBUEFOU0tBIFRveW90YSByYXp2aWphIG5vdmkgbW90b3IgbmEgdm9kaWsga2FvIGRpbyBzdm9nIGtvbmNlcHRhIHNtYW5qZW5qYSBlbWlzaWplIHN0YWtsZW5pJiN4MTBEO2tpaCBwbGlub3ZhLCBrYSYjeDE3RTtlIHNlIHUgcHJpb3AmI3gxMDc7ZW5qdSBrb3Jwb3JhY2lqZSBvYmphdmxqZW5vbSBkYW5hcy4mc291cmNlPUluZGV4LmhyIiBvbmNsaWNrPSJqYXZhc2NyaXB0OndpbmRvdy5vcGVuKHRoaXMuaHJlZiwnJywgJ21lbnViYXI9bm8sdG9vbGJhcj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9eWVzLGhlaWdodD00MDAsd2lkdGg9NjAwJyk7cmV0dXJuIGZhbHNlOyI+DQogICAgICAgIDxpIGNsYXNzPSJpbmRleC1saW5rZWRJbiI+PC9pPg0KICAgIDwvYT4NCg0KICAgIDxhIGNsYXNzPSJzaGFyZS1idXR0b24gbWFpbC1iZyIgc2hhcmUtYnV0dG9uIGRhdGEtc2hhcmUtYWN0aW9uPSJtYWlsIiBkYXRhLWFydGljbGUtaWQ9IjIyNzA3MTAiIGhyZWY9Im1haWx0bzo/c3ViamVjdD1Ub3lvdGEgcmF6dmlqYSBub3ZpIG1vdG9yIG5hIHZvZGlrJmJvZHk9aHR0cHM6Ly93d3cuaW5kZXguaHIvY2xhbmFrLmFzcHg/aWQ9MjI3MDcxMCIgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICA8aSBjbGFzcz0iaW5kZXgtbWFpbCI+PC9pPg0KICAgIDwvYT4NCg0KICAgIDxkaXYgY2xhc3M9InNoYXJlLWJ1dHRvbiBidG4tY2xvc2UiPg0KICAgICAgICA8aSBjbGFzcz0iaW5kZXgtY2xvc2UiPjwvaT4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCg0KPGRpdiBjbGFzcz0idGFncy1ob2xkZXIiPg0KICAgICAgICA8YSBocmVmPSIvdGFnLzU5NTUvdG95b3RhLmFzcHgiIGNsYXNzPSJ2aWplc3RpLWJnLWhvdmVyIHRhZy1pdGVtIj4NCiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ2aWplc3RpLXRleHQgaGFzaHRhZyI+Izwvc3Bhbj5Ub3lvdGENCiAgICAgICAgPC9hPg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8YXNpZGUgY2xhc3M9InJpZ2h0LXBhcnQgZGlyZWN0aW9uLWNvbHVtbiBmbGV4Ij4NCiAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgDQoNCg0KPCEtLSAvMjE3MDM5NTAwODcvQm94MSAtLT4NCjxkaXYgaWQ9J0JveDEnIGNsYXNzPSJqcy1zbG90LWNvbnRhaW5lciIgZGF0YS1jc3MtY2xhc3M9Imdvb2dsZS1ib3ggYm90dG9tLW1hcmdpbi01MCI+DQogICAgPHNjcmlwdD4NCiAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZVNsb3QoJy8yMTcwMzk1MDA4Ny9Cb3gxX3ZpamVzdGlfaHInLCBbWzMwMCwgMjUwXSwgWzMwMCwgNjAwXSwgWzE2MCwgNjAwXSwgWzMwMCwgMjAwXSwgWzEsIDFdXSwgJ0JveDEnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQoNCiAgICAgICAgICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgnQm94MScpOw0KICAgICAgICAgICAgfSk7DQogICAgPC9zY3JpcHQ+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgIA0KDQo8ZGl2IGNsYXNzPSJob21lLWN1YmUtYmlnLXRpbWVsaW5lIj4NCiAgICA8dWwgY2xhc3M9Im5hdiB0aW1lbGluZS10YWIiIHRpbWVsaW5lLXRhYiByb2xlPSJ0YWJsaXN0IiBkYXRhLWNhdGVnb3J5PSJ2aWplc3RpIiBkYXRhLWNhdGVnb3J5LWlkPSIzIj4NCiAgICAgICAgPGxpIHJvbGU9InByZXNlbnRhdGlvbiIgY2xhc3M9ImFjdGl2ZSBsYXRlc3QiPjxhIGhyZWY9IiN0YWItY29udGVudC1sYXRlc3QiIGFyaWEtY29udHJvbHM9InRhYi1jb250ZW50LWxhdGVzdCIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIj4gTmFqbm92aWplPC9hPjwvbGk+DQogICAgICAgIDxsaSByb2xlPSJwcmVzZW50YXRpb24iIGNsYXNzPSJtb3N0LXJlYWQiPjxhIGhyZWY9IiN0YWItY29udGVudC1tb3N0LXJlYWQiIGFyaWEtY29udHJvbHM9InRhYi1jb250ZW50LW1vc3QtcmVhZCIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIj4gTmFqxI1pdGFuaWplPC9hPjwvbGk+DQogICAgICAgIDxsaSByb2xlPSJwcmVzZW50YXRpb24iIGNsYXNzPSJyZWxhdGVkIj48YSBocmVmPSIjdGFiLWNvbnRlbnQtcmVsYXRlZCIgZGF0YS1pZD0idGFiLWNvbnRlbnQtcmVsYXRlZCIgYXJpYS1jb250cm9scz0idGFiLWNvbnRlbnQtcmVsYXRlZCIgcm9sZT0idGFiIiBkYXRhLXRvZ2dsZT0idGFiIj4gVmV6YW5vPC9hPjwvbGk+DQogICAgICAgIDxociBjbGFzcz0idmlqZXN0aS1iZyIgLz4NCiAgICA8L3VsPg0KICAgIDxkaXYgY2xhc3M9InRhYi1jb250ZW50Ij4NCiAgICAgICAgPGRpdiByb2xlPSJ0YWJwYW5lbCIgY2xhc3M9InRhYi1wYW5lIGFjdGl2ZSIgaWQ9InRhYi1jb250ZW50LWxhdGVzdCI+DQogICAgICAgICAgICANCg0KICAgIDxkaXYgY2xhc3M9InRpbWVsaW5lLWNvbnRlbnQgbGF0ZXN0Ij4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjI8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGVzYyI+bWluPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9oZHotb2JqYXZpby1mb3RvbW9udGF6dS1taWxhbm92aWNhLXV2aWplay1zYS1zdm9qaW0tbWFsaXNhbmltYS8yMzM3MTM5LmFzcHg/aW5kZXhfcmVmPWNsYW5ha192aWplc3RpX25ham5vdmlqZV9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIRFogb2JqYXZpbyBmb3RvbW9udGHFvnUgTWlsYW5vdmnEh2E6ICJVdmlqZWsgc2Egc3ZvamltIG1hbGnFoWFuaW1hISINCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZS1jb250ZW50IHRleHQtY2VudGVyIHZpamVzdGktdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibnVtIj41PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRlc2MiPm1pbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLWJveCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvZnJhbm8tbHVldGljLW9zdGFqZS1kaXJla3Rvci1kdWJyb3ZhY2tvZy1hZXJvZHJvbWEvMjMzNzEzNy5hc3B4P2luZGV4X3JlZj1jbGFuYWtfdmlqZXN0aV9uYWpub3ZpamVfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJhbm8gTHVldGnEhyBvc3RhamUgZGlyZWt0b3IgZHVicm92YcSNa29nIGFlcm9kcm9tYQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjY8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGVzYyI+bWluPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9vYmphdmxqZW5pLWRldGFsamktbmFwYWRhLW5hLXZvZGp1LWlzaXNhLWJpZGVuLWRpZ2FvLWplLXUtenJhay12bGFzdGl0dS1vYml0ZWxqLzIzMzcwOTkuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3ZpamVzdGlfbmFqbm92aWplX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamF2bGplbmkgZGV0YWxqaSBuYXBhZGEgbmEgdm/EkXUgSVNJUy1hLiBCaWRlbjogRGlnYW8gamUgdSB6cmFrIHZsYXN0aXR1IG9iaXRlbGoNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZS1jb250ZW50IHRleHQtY2VudGVyIGRpc2FibGVkLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im51bSI+Mzk8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGVzYyI+bWluPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay93aG8tcG9kdnJzdGEtb21pa3JvbmEtcHJvbmFkamVuYS1qZS11LXBldC1hZnJpY2tpaC16ZW1hbGphLzIzMzcxMjcuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3ZpamVzdGlfbmFqbm92aWplX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdITzogUG9kdnJzdGEgb21pa3JvbmEgcHJvbmHEkWVuYSBqZSB1IHBldCBhZnJpxI1raWggemVtYWxqYQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgZGlzYWJsZWQtdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibnVtIj40MDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkZXNjIj5taW48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3N0dWRpamEtYnJvai16YXJhemVuaWgtZGFuYWNhLWR1cGxvLWplLXZlY2ktb2Qtc2x1emJlbmloLWJyb2praS8yMzM3MTI4LmFzcHg/aW5kZXhfcmVmPWNsYW5ha192aWplc3RpX25ham5vdmlqZV9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHVkaWphOiBCcm9qIHphcmHFvmVuaWggRGFuYWNhIGR1cGxvIGplIHZlxIdpIG9kIHNsdcW+YmVuaWggYnJvamtpDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgIDwvdWw+DQogICAgICAgIDxhIGNsYXNzPSJtb3JlLW5ld3MiIGhyZWY9Ii9uYWpub3ZpamU/a2F0ZWdvcmlqYT0zIj5QcmlrYcW+aSBqb8WhIHZpamVzdGk8L2E+DQogICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgcm9sZT0idGFicGFuZWwiIGNsYXNzPSJ0YWItcGFuZSIgaWQ9InRhYi1jb250ZW50LW1vc3QtcmVhZCI+DQogICAgICAgICAgICANCg0KICAgIDxkaXYgY2xhc3M9InRpbWVsaW5lLWNvbnRlbnQgbW9zdC1yZWFkIj4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL29iamF2bGplbmktZGV0YWxqaS1uYXBhZGEtbmEtdm9kanUtaXNpc2EtYmlkZW4tZGlnYW8tamUtdS16cmFrLXZsYXN0aXR1LW9iaXRlbGovMjMzNzA5OS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfdmlqZXN0aV9uYWpjaXRhbmlqZV9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmphdmxqZW5pIGRldGFsamkgbmFwYWRhIG5hIHZvxJF1IElTSVMtYS4gQmlkZW46IERpZ2FvIGplIHUgenJhayB2bGFzdGl0dSBvYml0ZWxqDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaW5lIiBzdHlsZT0id2lkdGg6IDkwJTsiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjI8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2Nvdmplay1pemFzYW8taXota3VjZS1kYW4tcHJpamUta3JhamEtc2Ftb2l6b2xhY2lqZS1rYXpuYS1qZS1vZ3JvbW5hLzIzMzcwODQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3ZpamVzdGlfbmFqY2l0YW5pamVfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgxIxvdmplayBpemHFoWFvIGl6IGt1xIdlIGRhbiBwcmlqZSBrcmFqYSBzYW1vaXpvbGFjaWplLCBrYXpuYSBqZSBvZ3JvbW5hDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaW5lIiBzdHlsZT0id2lkdGg6IDcyJTsiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY2xlYXJmaXgiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlLWNvbnRlbnQgdGV4dC1jZW50ZXIgdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJudW0iPjM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1ib3giPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2xvcG92aS1wcm92YWxqdWp1LXUtc3Rhbm92ZS11LWNlbnRydS16YWRyYS1uYS12cmF0aW1hLW9zdGF2ZS1wb3NlYmFuLXpuYWsvMjMzNjk2MS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfdmlqZXN0aV9uYWpjaXRhbmlqZV9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb3BvdmkgcHJvdmFsanVqdSB1IHN0YW5vdmUgdSBjZW50cnUgWmFkcmEsIG5hIHZyYXRpbWEgb3N0YXZlIHBvc2ViYW4gem5haw0KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGluZSIgc3R5bGU9IndpZHRoOiA1NCU7Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZS1jb250ZW50IHRleHQtY2VudGVyIHZpamVzdGktdGV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibnVtIj40PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtYm94Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay91Z29zdGl0ZWxqaS12ZWMtcG9za3VwamVsaS1hLW5la2ktY2UtdGVrLWV2by1rb2xpa28tc3Utc2t1cGxqaS1rb2xhY2ktamVsYS1rYXZhLzIzMzcwNTguYXNweD9pbmRleF9yZWY9Y2xhbmFrX3ZpamVzdGlfbmFqY2l0YW5pamVfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVWdvc3RpdGVsamkgdmXEhyBwb3NrdXBqZWxpLCBhIG5la2kgxIdlIHRlazogRXZvIGtvbGlrbyBzdSBza3VwbGppIGtvbGHEjWksIGplbGEsIGthdmENCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxpbmUiIHN0eWxlPSJ3aWR0aDogMzYlOyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjbGVhcmZpeCI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGUtY29udGVudCB0ZXh0LWNlbnRlciB2aWplc3RpLXRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im51bSI+NTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLWJveCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvcGxlbmtvdmljLXR2cmRpLWRhLXN1LW9wdHV6YmUtenZpemRhY2ljZS1oYWprYS1pLWhhcmFuZ2Etb25hLW11LW9kZ292b3JpbGEvMjMzNzAyNC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfdmlqZXN0aV9uYWpjaXRhbmlqZV9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbGVua292acSHIHR2cmRpIGRhIHN1IG9wdHXFvmJlIHp2acW+ZGHEjWljZSBoYWprYSBpIGhhcmFuZ2EuIE9uYSBtdSBvZGdvdm9yaWxhDQogICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsaW5lIiBzdHlsZT0id2lkdGg6IDE4JTsiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICA8L3VsPg0KICAgICAgICA8YSBjbGFzcz0ibW9yZS1uZXdzIiBocmVmPSIvbmFqY2l0YW5pamU/a2F0ZWdvcmlqYT0zIj5QcmlrYcW+aSBqb8WhIHZpamVzdGk8L2E+DQogICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgcm9sZT0idGFicGFuZWwiIGNsYXNzPSJ0YWItcGFuZSIgaWQ9InRhYi1jb250ZW50LXJlbGF0ZWQiPg0KICAgICAgICAgICAgPGltZyBjbGFzcz0ibG9hZGluZy1pbWciIHNyYz0iL0NvbnRlbnQvaW1nL2xvYWRlcl80MHB4LmdpZiIgLz4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KDQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNlcGFyYXRvci00NSI+PC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm90dG9tLXBhcnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0aWNreSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KDQoNCg0KPCEtLSAvMjE3MDM5NTAwODcvQm94MiAtLT4NCjxkaXYgaWQ9J0JveDInIGNsYXNzPSJqcy1zbG90LWNvbnRhaW5lciIgZGF0YS1jc3MtY2xhc3M9Imdvb2dsZS1ib3ggYm90dG9tLW1hcmdpbi01MCI+DQogICAgPHNjcmlwdD4NCiAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGdvb2dsZXRhZy5kZWZpbmVTbG90KCcvMjE3MDM5NTAwODcvQm94Ml92aWplc3RpX2hyJywgW1szMDAsIDI1MF0sIFszMDAsIDYwMF0sIFsxNjAsIDYwMF0sIFszMDAsIDIwMF0sIFsxLCAxXV0sICdCb3gyJykuYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpOw0KDQogICAgICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgnQm94MicpOw0KICAgICAgICB9KTsNCiAgICA8L3NjcmlwdD4NCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPC9hc2lkZT4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICANCg0KPGRpdiBjbGFzcz0iYXJ0aWNsZS1yZWFkLW1vcmUtY29udGFpbmVyIG1haW4tY29udGVudC1iZyBtYWluLWNvbnRhaW5lciBuby1wYWRkaW5nIj4NCiAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLXJlYWQtbW9yZS1ob2xkZXIgbWFpbi1jb250YWluZXIgbWFpbi1jb250ZW50LWJnIj4NCiAgICAgICAgICAgIDxoMiBjbGFzcz0ibWFpbi10aXRsZSI+UHJvJiN4MTBEO2l0YWp0ZSBqbyYjeDE2MTs8L2gyPg0KDQogICAgICAgIDxkaXYgY2xhc3M9InZpamVzdGkgc2xpZGVyICI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZWFkLW1vcmUtc2xpZGVyIHN3aXBlci1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci13cmFwcGVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwOTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvb2JqYXZsamVuaS1kZXRhbGppLW5hcGFkYS1uYS12b2RqdS1pc2lzYS1iaWRlbi1kaWdhby1qZS11LXpyYWstdmxhc3RpdHUtb2JpdGVsai8yMzM3MDk5LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyL2ZmNGRlYmE2LTc3MzUtNDJiZS04NzM1LTFiZGZmM2NmNDBlMS5naWY/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5PYmphdmxqZW5pIGRldGFsamkgbmFwYWRhIG5hIHZvxJF1IElTSVMtYS4gQmlkZW46IERpZ2FvIGplIHUgenJhayB2bGFzdGl0dSBvYml0ZWxqPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTExIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2l6LXZlbGlrZS1nb3JpY2UtbmVzdGFvLW92YWotbXVza2FyYWMtamVzdGUtbGktZ2EtdmlkamVsaS8yMzM3MTExLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzc2MTI0NzI1LTAyOTgtNGZmNS1hZmFjLWUwOTlmYTcyZTFiMC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5JeiBWZWxpa2UgR29yaWNlIG5lc3RhbyBvdmFqIG11xaFrYXJhYy4gSmVzdGUgbGkgZ2EgdmlkamVsaT88L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvdHVnYS11LWdsaW5pLWxqdWJhLWplLWltYWxhLXZydC1kdmlqZS16YXJ1bGplLWktdm9ja2UtaS1lcHNrdS1ib3JidS1zLXB1aG92aW1hLzIzMzcxMTMuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNzIxNDUzMmUtZGQ4Ny00ZTExLWFjY2ItMGVhZDdmZjhkNGQ1LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlR1Z2EgdSBHbGluaTogIkxqdWJhIGplIGltYWxhIHZydCwgZHZpamUgxb5hcnVsamUgaSB2b8SHa2UuIEkgZXBza3UgYm9yYnUgcyBwdWhvdmltYSI8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvaXphc2FvLWl6LXNhbW9pem9sYWNpamUtZG9iaW8tZ29sZW11LWthem51LWhyZWJhay1uYXByYXZpby1pc3RvLWktc3Bhc2lvLXBsZW5rb3ZpY2EvMjMzNzEyMy5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci80MDFhZDc3NS01NGI1LTQzY2MtYWU1My1iYzY0ODU0MzNiZGIuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+SXphxaFhbyBpeiBzYW1vaXpvbGFjaWplLCBkb2JpbyBnb2xlbXUga2F6bnUuIEhyZWJhayBuYXByYXZpbyBpc3RvIGkgc3Bhc2lvIFBsZW5rb3ZpxIdhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTI3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3doby1wb2R2cnN0YS1vbWlrcm9uYS1wcm9uYWRqZW5hLWplLXUtcGV0LWFmcmlja2loLXplbWFsamEvMjMzNzEyNy5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci82MThiNTJjNy0yMTZlLTQwNWEtYWQ3OC02N2I4NDQzOTg0NTguanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+V0hPOiBQb2R2cnN0YSBvbWlrcm9uYSBwcm9uYcSRZW5hIGplIHUgcGV0IGFmcmnEjWtpaCB6ZW1hbGphPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTAxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL292by1qZS1ub3ZhLWtvcm9uYWthcnRhLWV1cm9wZS1vZHJlZGp1amUtc2UtZHJ1Z2FjaWplLWV2by1rYWt2YS1qZS1zaXR1YWNpamEvMjMzNzEwMS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci81MmI0OWUwZC1kYTk2LTQ5ODUtYTU5MS1hZWI4NzY3NjhhMGEuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImluZGV4LXBob3RvLWNpcmNsZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWJnIHZpamVzdGktYmciPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pk92byBqZSBub3ZhIGtvcm9uYS1rYXJ0YSBFdXJvcGUsIG9kcmXEkXVqZSBzZSBkcnVnYcSNaWplLiBFdm8ga2FrdmEgamUgc2l0dWFjaWphPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTI4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3N0dWRpamEtYnJvai16YXJhemVuaWgtZGFuYWNhLWR1cGxvLWplLXZlY2ktb2Qtc2x1emJlbmloLWJyb2praS8yMzM3MTI4LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzQ1OWZiNGM1LThkZTItNGRmZC04ZTU4LTVjNDFhM2Q2MDMyNC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5TdHVkaWphOiBCcm9qIHphcmHFvmVuaWggRGFuYWNhIGR1cGxvIGplIHZlxIdpIG9kIHNsdcW+YmVuaWggYnJvamtpPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTA5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3J1c2lqYS1zZS1vc3ZlY3VqZS16YWJyYW5qdWplLWRldXRzY2hlLXdlbGxlLzIzMzcxMDkuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYWZkZWRhYjYtNWRhMS00ZWM5LWIzZTUtYjQ0N2I0NGU4NzdhLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlJ1c2lqYSBzZSBvc3ZlxId1amUsIHphYnJhbmp1amUgRGV1dHNjaGUgV2VsbGU8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwODQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvY292amVrLWl6YXNhby1pei1rdWNlLWRhbi1wcmlqZS1rcmFqYS1zYW1vaXpvbGFjaWplLWthem5hLWplLW9ncm9tbmEvMjMzNzA4NC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci8yNWI0MjYxOC0yZTNlLTRlOTktYjY1OC0yN2U3YTkwMWMyY2QuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+xIxvdmplayBpemHFoWFvIGl6IGt1xIdlIGRhbiBwcmlqZSBrcmFqYSBzYW1vaXpvbGFjaWplLCBrYXpuYSBqZSBvZ3JvbW5hPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM2OTc1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3N0b3plci00Mi11bXJsYS0yMTA4LXphcmF6ZW5paC1ob3NwaXRhbGl6aXJhbm8tMTk0LW5hLXJlc3BpcmF0b3J1LzIzMzY5NzUuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvZjMxNjBlYWMtOGQwMC00MzU3LTgzMGMtZGFmOTFkMDcxZDRlLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlN0b8W+ZXI6IDQyIHVtcmxhLiAyMTA4IHphcmHFvmVuaWggaG9zcGl0YWxpemlyYW5vLCAxOTQgbmEgcmVzcGlyYXRvcnU8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvbXJ0YXYtcGlqYW4tYmV6LXJ1a2UtaS12b3phY2tlLXZvemlvLW5lcmVnaXN0cmlyYW5pLWF1dG8tb3ZvLWplLXByZXN1ZGEvMjMzNzEwMC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci82YjQyZjE4NC0xYzIzLTRjOTMtODAzZS0zZDM2ZjYyMzVhMjguanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+TXJ0YXYgcGlqYW4sIGJleiBydWtlIGkgdm96YcSNa2Ugdm96aW8gbmVyZWdpc3RyaXJhbmkgYXV0by4gT3ZvIGplIHByZXN1ZGE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMjQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvZXUtcHJlZGxhemUtbm92YS1wcmF2aWxhLW8tY292aWRwb3R2cmRhbWEtaS1wcm9kdWxqZW5qZS1uamlob3ZvZy10cmFqYW5qYS8yMzM3MTI0LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzFhM2JmNGQ1LWM1NjItNGVkYS1hNWE0LWU2YmQyNmZiMThlNC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5FVSBwcmVkbGHFvmUgbm92YSBwcmF2aWxhIG8gY292aWQtcG90dnJkYW1hIGkgcHJvZHVsamVuamUgbmppaG92b2cgdHJhamFuamE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwNjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvaHJ2YXQtYm9zbmphY2tpbS1wb2xpdGljYXJpbWEtY2l0YW8taXpqYXZ1LXBhLXBpdGFvLXpuYXRlLWxpLXN0by1zdGUtc2FkYS1wcml6bmFsaS8yMzM3MDYyLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyL2I5NmMxZTA4LWY2NzEtNDE4Ni1iN2MxLThhNDVhYTM2ZTExMC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW5kZXgtdmlkZW8tY2lyY2xlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tYmcgdmlqZXN0aS1iZyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+SHJ2YXQgYm/FoW5qYcSNa2ltIHBvbGl0acSNYXJpbWEgxI1pdGFvIGl6amF2dSBwYSBwaXRhbzogWm5hdGUgbGkgxaF0byBzdGUgc2FkYSBwcml6bmFsaT88L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvdmVsaWtpLWxhbmFjLXBvdmxhY2ktc2xhZG9sZWQtdS1rb2plbS1qZS1vdGtyaXZlbi1wZXN0aWNpZC8yMzM3MTE3LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzc0ZWNhMWQwLTNmZjQtNDI1MC1hYWRkLTNlMjM5ZTBlZDM0Mi5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5WZWxpa2kgbGFuYWMgcG92bGHEjWkgc2xhZG9sZWQgdSBrb2plbSBqZSBvdGtyaXZlbiBwZXN0aWNpZDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA1OCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay91Z29zdGl0ZWxqaS12ZWMtcG9za3VwamVsaS1hLW5la2ktY2UtdGVrLWV2by1rb2xpa28tc3Utc2t1cGxqaS1rb2xhY2ktamVsYS1rYXZhLzIzMzcwNTguYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvZDlhMDc5ZTEtMmMxMi00OWIxLTg5NDMtYTJmMTY4NTMyNTU1LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlVnb3N0aXRlbGppIHZlxIcgcG9za3VwamVsaSwgYSBuZWtpIMSHZSB0ZWs6IEV2byBrb2xpa28gc3Ugc2t1cGxqaSBrb2xhxI1pLCBqZWxhLCBrYXZhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2hyZWJhay1wbGluYXJhLXBvc2t1cGxqZW5qZS1wbGluYS1wcmViYWNpbGEtbmEtdXN0YW5vdmUtaXp2YW4temFncmViYS10dXppdC1jZW1vLWplLzIzMzcxMTYuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYmRkNjE1YzktMGFjYi00OTdmLTkzZjctMmEzNjVkYmY0MmQ3LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PkhyZWJhazogUGxpbmFyYSBwb3NrdXBsamVuamUgcGxpbmEgcHJlYmFjaWxhIG5hIHVzdGFub3ZlIGl6dmFuIFphZ3JlYmEsIHR1xb5pdCDEh2VtbyBqZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA4NiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9ibGl6YW5jaS1yYWRpbGkta2Fvcy11LWthZmljdS1qbS10aS1tYXRlci1yYXpiaXQtY3UtdGViZS1sb2thbC1pLW1pbGFub3ZpY2EvMjMzNzA4Ni5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9iYjc0NDFiNi05NDNjLTQyYzktYWFmNS1lMmVkY2U2MDY5YTYuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+QmxpemFuY2kgcmFkaWxpIGthb3MgdSBrYWZpxId1OiAiSi4uLm0gdGkgbWF0ZXIsIHJhemJpdCDEh3UgdGViZSwgbG9rYWwgaSBNaWxhbm92acSHYSI8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwODAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvZm90by1vdm8tc3UtaGVsaWtvcHRlcmktYmxhY2staGF3ay1rb2plLXNtby1kb2JpbGktYmFub3ppYy1nbHVtaS1waWxvdGEvMjMzNzA4MC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci8wNzQwODgxNC01MjAyLTRhMjktODVhMS05M2JiZjg5ZTYyNzEuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1pY29uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImluZGV4LXBob3RvLWNpcmNsZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpY29uLWJnIHZpamVzdGktYmciPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PjxzcGFuIGNsYXNzPSd0aXRsZS1wYXJzZWQtdGV4dCc+Rk9UTzwvc3Bhbj4gIE92byBzdSBoZWxpa29wdGVyaSBCbGFjayBIYXdrIGtvamUgc21vIGRvYmlsaSwgQmFub8W+acSHIGdsdW1pIHBpbG90YTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA4NyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9uaXotemVtYWxqYS1ldXJvcGUtdWtpZGEtc3ZlLW1qZXJlLXdoby11bGF6aW1vLXUtZHVnby1taXJuby1yYXpkb2JsamUtcGFuZGVtaWplLzIzMzcwODcuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYjkyZDdhNDItODIwMy00Y2U2LTg3OTgtYjA4MmVlN2I0YjAyLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pk5peiB6ZW1hbGphIEV1cm9wZSB1a2lkYSBzdmUgbWplcmUuIFdITzogVWxhemltbyB1IGR1Z28gbWlybm8gcmF6ZG9ibGplIHBhbmRlbWlqZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA1OSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9zZWtzLXR1emlvLWhydmF0c2t1LWV1cm9wc2tpLXN1ZC1nYS1vZGJpby1vdm8tamUtb2JyYXpsb3plbmplLzIzMzcwNTkuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvMmFlNTc3MTUtNTc2ZC00MmQyLWIyYTEtMTQ5MTUyZTBjYTViLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PsWgZWtzIHR1xb5pbyBIcnZhdHNrdSwgRXVyb3Bza2kgc3VkIGdhIG9kYmlvLiBPdm8gamUgb2JyYXpsb8W+ZW5qZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzAyNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9wbGVua292aWMtdHZyZGktZGEtc3Utb3B0dXpiZS16dml6ZGFjaWNlLWhhamthLWktaGFyYW5nYS1vbmEtbXUtb2Rnb3ZvcmlsYS8yMzM3MDI0LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyL2IzMTVhZjcxLWI3NWItNDI2My04MjRkLWY3ZGVlODc2MzcyYS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5QbGVua292acSHIHR2cmRpIGRhIHN1IG9wdHXFvmJlIHp2acW+ZGHEjWljZSBoYWprYSBpIGhhcmFuZ2EuIE9uYSBtdSBvZGdvdm9yaWxhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDk2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3ZpZGVvLW1lZHZlZC1wb2NlbGEtamUtZ3JhZG5qYS1rdWNhLWhvcnZhdC1uaWplLWFsaS1tZWR2ZWQtbmlqZS1rcml2by1yZWthby8yMzM3MDk2LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzdlMDVmMWEwLTc0MjktNGNjMi05ZjYwLWU1YjEyM2IxODIwYi5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW5kZXgtdmlkZW8tY2lyY2xlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tYmcgdmlqZXN0aS1iZyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+PHNwYW4gY2xhc3M9J3RpdGxlLXBhcnNlZC10ZXh0Jz5WSURFTzwvc3Bhbj4gIE1lZHZlZDogUG/EjWVsYSBqZSBncmFkbmphIGt1xIdhLiBIb3J2YXQ6IE5pamUsIGFsaSBNZWR2ZWQgbmlqZSBrcml2byByZWthbzwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzExNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9jZXNrYS1pLXBvbGpza2EtcmlqZXNpbGUtc3Bvci11LXZlemktcy1ydWRuaWtvbS1uYS1ncmFuaWNpLzIzMzcxMTQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvZWY2ZDM4NTctOTdiMC00YTc1LTg5YmQtMmE2NmY4NTY3NzkwLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PsSMZcWha2EgaSBQb2xqc2thIHJpamXFoWlsZSBzcG9yIHUgdmV6aSBzIHJ1ZG5pa29tIG5hIGdyYW5pY2k8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwOTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvb3ZvLW90cm92bm8tdnVsa2Fuc2tvLWplemVyby1wb2thenVqZS1kYS1qZS1uYS1tYXJzdS1tb2dsby1iaXRpLXppdm90YS8yMzM3MDk0LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyL2M4NGUyMzgxLTQ3YjEtNDRlNS1hZjk3LWQ0YzA1YWZkOTFhMS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5Pdm8gb3Ryb3ZubyB2dWxrYW5za28gamV6ZXJvIHBva2F6dWplIGRhIGplIG5hIE1hcnN1IG1vZ2xvIGJpdGkgxb5pdm90YTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzEzNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9mcmFuby1sdWV0aWMtb3N0YWplLWRpcmVrdG9yLWR1YnJvdmFja29nLWFlcm9kcm9tYS8yMzM3MTM3LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzA4NGNjZmJjLTRlYzItNDY5Ni1iODI3LTgxODE5M2E3ZmU2YS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5GcmFubyBMdWV0acSHIG9zdGFqZSBkaXJla3RvciBkdWJyb3ZhxI1rb2cgYWVyb2Ryb21hPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2tvc29yLXBhLWdyYWJhcmtpdGFyb3ZpYy1qZS1jaW0tamUtZG9zbGEtcGlzYWxhLW1pbGFub3ZpY3UtZGEtZGEtb3N0YXZrdS8yMzM3MDQ0LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzA0MThiZGVjLWI2OTAtNDE2Ni04N2Y0LTNjYTRhZTBiZGVjMy5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5Lb3NvcjogUGEgR3JhYmFyLUtpdGFyb3ZpxIcgamUsIMSNaW0gamUgZG/FoWxhLCBwaXNhbGEgTWlsYW5vdmnEh3UgZGEgZGEgb3N0YXZrdTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzAxNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9nb3Rvdi1vY2V2aWQtcG96YXJhLWt1Y2UtYmFrZS1sanViZS1uYWRqZW5pLXN1LWZyYWdtZW50aS1rb2ppLWl6Z2xlZGFqdS1rYW8ta29zdGkvMjMzNzAxNS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci85N2MwYTNhZS1mNWJhLTQ3YTctODBmNy1jNThmMjRlYTA2MGEuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+R290b3Ygb8SNZXZpZCBwb8W+YXJhIGt1xIdlIGJha2UgTGp1YmU6ICJOYcSRZW5pIHN1IGZyYWdtZW50aSBrb2ppIGl6Z2xlZGFqdSBrYW8ga29zdGkiPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTAzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL21pbGFub3ZpYy1vZGxpa292YW8tcGlsb3RhLWJvcm92aWNhLXphLXBydmktcHJlbGV0LW1pZ29tLW5hLWhydmF0c2t1LXN0cmFudS8yMzM3MTAzLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzhmNGEwNzgyLTQ0MTUtNGJmOC04NTE2LTZiYTI0ODFlM2M2NS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW5kZXgtdmlkZW8tY2lyY2xlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tYmcgdmlqZXN0aS1iZyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+TWlsYW5vdmnEhyBvZGxpa292YW8gcGlsb3RhIEJvcm92acSHYSB6YSBwcnZpIHByZWxldCBNaUctb20gbmEgaHJ2YXRza3Ugc3RyYW51PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDQ2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL21qZXN0YW5pLXRlcm9yLWFtaWNhLXRyYWplLWRlc2V0bGplY2ltYS1tbGF0ZS1uYXMtaW1hanUtdmlsZS1vcnV6amEtdS1hdXR1LzIzMzcwNDYuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNDFjMDIwMGEtMTIyMi00NzRkLWIzZWUtYzYxYWM4ZGJjNjRhLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pk1qZcWhdGFuaTogVGVyb3IgQW1pxIdhIHRyYWplIGRlc2V0bGplxIdpbWEuIE1sYXRlIG5hcywgaW1hanUgdmlsZSwgb3J1xb5qYSB1IGF1dHUuLi48L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMDIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsva3JpemEtdS1jcm5vai1nb3JpLXByZW1pamVyLW5lLXplbGktZGF0aS1vc3Rhdmt1LWlha28tb2Nla3VqZS1wYWQtdmxhZGUvMjMzNzEwMi5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci85OGY1NDVhZi04ODY2LTQ3MDItYjllOC00YWUyNWQxMzExZjkuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+S3JpemEgdSBDcm5vaiBHb3JpOiBQcmVtaWplciBuZSDFvmVsaSBkYXRpIG9zdGF2a3UgaWFrbyBvxI1la3VqZSBwYWQgdmxhZGU8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNsaWRlci1uYXZpZ2F0aW9uIHZpamVzdGktdGV4dCI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyLXByZXYgbWFpbi1jb250ZW50LWJnIHZpamVzdGktYmctaG92ZXIiPjxpIGNsYXNzPSJpbmRleC1hcnJvdy1sZWZ0Ij48L2k+PC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyLW5leHQgbWFpbi1jb250ZW50LWJnIHZpamVzdGktYmctaG92ZXIiPjxpIGNsYXNzPSJpbmRleC1hcnJvdy1yaWdodCI+PC9pPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgDQoNCjxpZnJhbWUgZnJhbWVib3JkZXI9IjAiIGhlaWdodD0iMCIgd2lkdGg9IjAiIHNyYz0iaHR0cHM6Ly93d3cuaW5kZXguaHIvY2RuLTEvbWlkYXMtdHJhY2tpbmcvNTc3Ij48L2lmcmFtZT4NCg0KPGRpdiBpZD0ibWlkYXNXaWRnZXRfXzU3NyIgY2xhc3M9Im1pZGFzLWNvbnRhaW5lciI+PC9kaXY+DQoNCjxzY3JpcHQgYXN5bmMgc3JjPSIvL2Nkbi5taWRhcy1uZXR3b3JrLmNvbS9XaWRnZXQvSW5kZXhBc3luYy8yP3BvcnRhbFdpZGdldElkPTU3NyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQogICAgICAgIA0KDQoNCjxkaXYgaWQ9ImNvbW1lbnRzLWNvbnRhaW5lciIgY2xhc3M9ImNvbW1lbnRzLWNvbnRhaW5lciBzZWNvbmRhcnktY29udGVudC1iZyI+DQogICAgPGRpdiBjbGFzcz0iY29tbWVudHMtaG9sZGVyIG1haW4tY29udGFpbmVyIHNlY29uZGFyeS1jb250ZW50LWJnIGZsZXgiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LXBhcnQiPg0KDQogICAgICAgICAgICANCg0KPHN0eWxlPg0KICAgIC5mYi1jb21tZW50cyBpZnJhbWUgew0KICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjxkaXYgY2xhc3M9ImZiLWNvbW1lbnRzLWhvbGRlciIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2Y1ZjVmNSI+DQogICAgPGRpdiBjbGFzcz0iZmItd2Fybi1sb2dpbi1ob2xkZXIiPg0KICAgICAgICA8aDQgY2xhc3M9ImZiLXdhcm4tbG9naW4tdGl0bGUiPktvbWVudGFyaTwvaDQ+DQogICAgICAgIFVrb2xpa28gbmUgdmlkaXRlIGtvbWVudGFyZSwgbmUgYnJpbml0ZSwgbmlzbW8gaWggdWtpbnVsaS4gWmFodmFsanVqdcSHaSBicml6aSBFVSB6YSB2YcWhdSBwcml2YXRub3N0LCBwb3RyZWJubyBqZSBuYXByYXZpdGkgc2xqZWRlxIdlOg0KICAgICAgICA8b2w+DQogICAgICAgICAgICA8bGk+TG9naXJhdGkgc2UgbmEgRmFjZWJvb2sgdSBvdm9tIGJyb3dzZXJ1IGkgb21vZ3XEh2l0aSBrb3JpxaF0ZW5qZSBrb2xhxI1pxIdhIChjb29raWVzKS4gVG8gbW/FvmV0ZSB1xI1pbml0aSA8YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2V0dGluZ3MvY29va2llIiB0YXJnZXQ9Il9ibGFuayI+b3ZkamU8L2E+LjwvbGk+DQogICAgICAgICAgICA8bGk+VWtsanXEjWl0aSB0aGlyZCBwYXJ0eSBjb29raWVzIHUgc3ZvbSBicm93c2VydS4gQWtvIGtvcmlzdGl0ZSBDaHJvbWUgdG8gbW/FvmV0ZSB1xI1pbml0aSBuYSBjaHJvbWU6Ly9zZXR0aW5ncy9jb29raWVzLjwvbGk+DQogICAgICAgIDwvb2w+ICAgICAgDQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibG9hZGVyIGZiLWxvYWRlciI+DQogICAgICAgIDxpbWcgY2xhc3M9ImxvYWRpbmctaW1nIiBzcmM9Ii9Db250ZW50L2ltZy9sb2FkZXJfNDBweF9ncmV5LmdpZiIgLz4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxvYWRpbmctdGV4dCI+DQogICAgICAgICAgICAgICAgVcSNaXRhdmFuamUga29tZW50YXJhDQogICAgICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGNsYXNzPSJmYi1jb21tZW50cyIgZGF0YS13aWR0aD0iMTAwJSIgZGF0YS1ocmVmPSJodHRwczovL3d3dy5pbmRleC5oci9jbGFuYWsuYXNweD9pZD0yMjcwNzEwIiBkYXRhLW51bXBvc3RzPSIxMCIgZGF0YS1vcmRlci1ieT0icmV2ZXJzZV90aW1lIj48L2Rpdj4NCjwvZGl2Pg0KDQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1wYXJ0Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGlja3kiPg0KICAgICAgICAgICAgICAgICAgICANCg0KDQo8IS0tIC8yMTcwMzk1MDA4Ny9EQTMgLS0+DQo8ZGl2IGlkPSdEQTMnPg0KICAgIDxzY3JpcHQ+DQogICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBnb29nbGV0YWcuZGVmaW5lU2xvdCgnLzIxNzAzOTUwMDg3L0RBM19WaWplc3RpJywgW1szMDAsIDYwMF0sIFszMDAsIDI1MF0sIFsxLCAxXV0sICdEQTMnKS5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7DQogICAgICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgnREEzJyk7DQogICAgICAgIH0pOw0KICAgIDwvc2NyaXB0Pg0KPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQogICAgICAgIA0KDQo8ZGl2IGNsYXNzPSJhcnRpY2xlLXJlYWQtbW9yZS1jb250YWluZXIgbWFpbi1jb250ZW50LWJnIG1haW4tY29udGFpbmVyIG5vLXBhZGRpbmciPg0KICAgIDxkaXYgY2xhc3M9ImFydGljbGUtcmVhZC1tb3JlLWhvbGRlciBtYWluLWNvbnRhaW5lciBtYWluLWNvbnRlbnQtYmciPg0KICAgICAgICAgICAgPGgyIGNsYXNzPSJtYWluLXRpdGxlIj5Qcm8mI3gxMEQ7aXRhanRlIGpvJiN4MTYxOzwvaDI+DQoNCiAgICAgICAgPGRpdiBjbGFzcz0idmlqZXN0aSBzbGlkZXIgIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlYWQtbW9yZS1zbGlkZXIgc3dpcGVyLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXdyYXBwZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA5OSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9vYmphdmxqZW5pLWRldGFsamktbmFwYWRhLW5hLXZvZGp1LWlzaXNhLWJpZGVuLWRpZ2FvLWplLXUtenJhay12bGFzdGl0dS1vYml0ZWxqLzIzMzcwOTkuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvZmY0ZGViYTYtNzczNS00MmJlLTg3MzUtMWJkZmYzY2Y0MGUxLmdpZj93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pk9iamF2bGplbmkgZGV0YWxqaSBuYXBhZGEgbmEgdm/EkXUgSVNJUy1hLiBCaWRlbjogRGlnYW8gamUgdSB6cmFrIHZsYXN0aXR1IG9iaXRlbGo8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvaXotdmVsaWtlLWdvcmljZS1uZXN0YW8tb3Zhai1tdXNrYXJhYy1qZXN0ZS1saS1nYS12aWRqZWxpLzIzMzcxMTEuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNzYxMjQ3MjUtMDI5OC00ZmY1LWFmYWMtZTA5OWZhNzJlMWIwLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pkl6IFZlbGlrZSBHb3JpY2UgbmVzdGFvIG92YWogbXXFoWthcmFjLiBKZXN0ZSBsaSBnYSB2aWRqZWxpPzwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzExMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay90dWdhLXUtZ2xpbmktbGp1YmEtamUtaW1hbGEtdnJ0LWR2aWplLXphcnVsamUtaS12b2NrZS1pLWVwc2t1LWJvcmJ1LXMtcHVob3ZpbWEvMjMzNzExMy5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci83MjE0NTMyZS1kZDg3LTRlMTEtYWNjYi0wZWFkN2ZmOGQ0ZDUuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+VHVnYSB1IEdsaW5pOiAiTGp1YmEgamUgaW1hbGEgdnJ0LCBkdmlqZSDFvmFydWxqZSBpIHZvxIdrZS4gSSBlcHNrdSBib3JidSBzIHB1aG92aW1hIjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzEyMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9pemFzYW8taXotc2Ftb2l6b2xhY2lqZS1kb2Jpby1nb2xlbXUta2F6bnUtaHJlYmFrLW5hcHJhdmlvLWlzdG8taS1zcGFzaW8tcGxlbmtvdmljYS8yMzM3MTIzLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzQwMWFkNzc1LTU0YjUtNDNjYy1hZTUzLWJjNjQ4NTQzM2JkYi5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5JemHFoWFvIGl6IHNhbW9pem9sYWNpamUsIGRvYmlvIGdvbGVtdSBrYXpudS4gSHJlYmFrIG5hcHJhdmlvIGlzdG8gaSBzcGFzaW8gUGxlbmtvdmnEh2E8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMjciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvd2hvLXBvZHZyc3RhLW9taWtyb25hLXByb25hZGplbmEtamUtdS1wZXQtYWZyaWNraWgtemVtYWxqYS8yMzM3MTI3LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzYxOGI1MmM3LTIxNmUtNDA1YS1hZDc4LTY3Yjg0NDM5ODQ1OC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5XSE86IFBvZHZyc3RhIG9taWtyb25hIHByb25hxJFlbmEgamUgdSBwZXQgYWZyacSNa2loIHplbWFsamE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMDEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvb3ZvLWplLW5vdmEta29yb25ha2FydGEtZXVyb3BlLW9kcmVkanVqZS1zZS1kcnVnYWNpamUtZXZvLWtha3ZhLWplLXNpdHVhY2lqYS8yMzM3MTAxLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzUyYjQ5ZTBkLWRhOTYtNDk4NS1hNTkxLWFlYjg3Njc2OGEwYS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW5kZXgtcGhvdG8tY2lyY2xlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tYmcgdmlqZXN0aS1iZyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+T3ZvIGplIG5vdmEga29yb25hLWthcnRhIEV1cm9wZSwgb2RyZcSRdWplIHNlIGRydWdhxI1pamUuIEV2byBrYWt2YSBqZSBzaXR1YWNpamE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMjgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvc3R1ZGlqYS1icm9qLXphcmF6ZW5paC1kYW5hY2EtZHVwbG8tamUtdmVjaS1vZC1zbHV6YmVuaWgtYnJvamtpLzIzMzcxMjguYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNDU5ZmI0YzUtOGRlMi00ZGZkLThlNTgtNWM0MWEzZDYwMzI0LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlN0dWRpamE6IEJyb2ogemFyYcW+ZW5paCBEYW5hY2EgZHVwbG8gamUgdmXEh2kgb2Qgc2x1xb5iZW5paCBicm9qa2k8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMDkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvcnVzaWphLXNlLW9zdmVjdWplLXphYnJhbmp1amUtZGV1dHNjaGUtd2VsbGUvMjMzNzEwOS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9hZmRlZGFiNi01ZGExLTRlYzktYjNlNS1iNDQ3YjQ0ZTg3N2EuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+UnVzaWphIHNlIG9zdmXEh3VqZSwgemFicmFuanVqZSBEZXV0c2NoZSBXZWxsZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA4NCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9jb3ZqZWstaXphc2FvLWl6LWt1Y2UtZGFuLXByaWplLWtyYWphLXNhbW9pem9sYWNpamUta2F6bmEtamUtb2dyb21uYS8yMzM3MDg0LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzI1YjQyNjE4LTJlM2UtNGU5OS1iNjU4LTI3ZTdhOTAxYzJjZC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD7EjG92amVrIGl6YcWhYW8gaXoga3XEh2UgZGFuIHByaWplIGtyYWphIHNhbW9pem9sYWNpamUsIGthem5hIGplIG9ncm9tbmE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzY5NzUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvc3RvemVyLTQyLXVtcmxhLTIxMDgtemFyYXplbmloLWhvc3BpdGFsaXppcmFuby0xOTQtbmEtcmVzcGlyYXRvcnUvMjMzNjk3NS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9mMzE2MGVhYy04ZDAwLTQzNTctODMwYy1kYWY5MWQwNzFkNGUuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+U3Rvxb5lcjogNDIgdW1ybGEuIDIxMDggemFyYcW+ZW5paCBob3NwaXRhbGl6aXJhbm8sIDE5NCBuYSByZXNwaXJhdG9ydTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzEwMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9tcnRhdi1waWphbi1iZXotcnVrZS1pLXZvemFja2Utdm96aW8tbmVyZWdpc3RyaXJhbmktYXV0by1vdm8tamUtcHJlc3VkYS8yMzM3MTAwLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzZiNDJmMTg0LTFjMjMtNGM5My04MDNlLTNkMzZmNjIzNWEyOC5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5NcnRhdiBwaWphbiwgYmV6IHJ1a2UgaSB2b3phxI1rZSB2b3ppbyBuZXJlZ2lzdHJpcmFuaSBhdXRvLiBPdm8gamUgcHJlc3VkYTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzEyNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9ldS1wcmVkbGF6ZS1ub3ZhLXByYXZpbGEtby1jb3ZpZHBvdHZyZGFtYS1pLXByb2R1bGplbmplLW5qaWhvdm9nLXRyYWphbmphLzIzMzcxMjQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvMWEzYmY0ZDUtYzU2Mi00ZWRhLWE1YTQtZTZiZDI2ZmIxOGU0LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PkVVIHByZWRsYcW+ZSBub3ZhIHByYXZpbGEgbyBjb3ZpZC1wb3R2cmRhbWEgaSBwcm9kdWxqZW5qZSBuamlob3ZvZyB0cmFqYW5qYTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA2MiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9ocnZhdC1ib3NuamFja2ltLXBvbGl0aWNhcmltYS1jaXRhby1pemphdnUtcGEtcGl0YW8tem5hdGUtbGktc3RvLXN0ZS1zYWRhLXByaXpuYWxpLzIzMzcwNjIuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYjk2YzFlMDgtZjY3MS00MTg2LWI3YzEtOGE0NWFhMzZlMTEwLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpbmRleC12aWRlby1jaXJjbGUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi1iZyB2aWplc3RpLWJnIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5IcnZhdCBib8WhbmphxI1raW0gcG9saXRpxI1hcmltYSDEjWl0YW8gaXpqYXZ1IHBhIHBpdGFvOiBabmF0ZSBsaSDFoXRvIHN0ZSBzYWRhIHByaXpuYWxpPzwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzExNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay92ZWxpa2ktbGFuYWMtcG92bGFjaS1zbGFkb2xlZC11LWtvamVtLWplLW90a3JpdmVuLXBlc3RpY2lkLzIzMzcxMTcuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvNzRlY2ExZDAtM2ZmNC00MjUwLWFhZGQtM2UyMzllMGVkMzQyLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlZlbGlraSBsYW5hYyBwb3ZsYcSNaSBzbGFkb2xlZCB1IGtvamVtIGplIG90a3JpdmVuIHBlc3RpY2lkPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDU4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3Vnb3N0aXRlbGppLXZlYy1wb3NrdXBqZWxpLWEtbmVraS1jZS10ZWstZXZvLWtvbGlrby1zdS1za3VwbGppLWtvbGFjaS1qZWxhLWthdmEvMjMzNzA1OC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9kOWEwNzllMS0yYzEyLTQ5YjEtODk0My1hMmYxNjg1MzI1NTUuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+VWdvc3RpdGVsamkgdmXEhyBwb3NrdXBqZWxpLCBhIG5la2kgxIdlIHRlazogRXZvIGtvbGlrbyBzdSBza3VwbGppIGtvbGHEjWksIGplbGEsIGthdmE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvaHJlYmFrLXBsaW5hcmEtcG9za3VwbGplbmplLXBsaW5hLXByZWJhY2lsYS1uYS11c3Rhbm92ZS1penZhbi16YWdyZWJhLXR1eml0LWNlbW8tamUvMjMzNzExNi5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9iZGQ2MTVjOS0wYWNiLTQ5N2YtOTNmNy0yYTM2NWRiZjQyZDcuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+SHJlYmFrOiBQbGluYXJhIHBvc2t1cGxqZW5qZSBwbGluYSBwcmViYWNpbGEgbmEgdXN0YW5vdmUgaXp2YW4gWmFncmViYSwgdHXFvml0IMSHZW1vIGplPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDg2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2JsaXphbmNpLXJhZGlsaS1rYW9zLXUta2FmaWN1LWptLXRpLW1hdGVyLXJhemJpdC1jdS10ZWJlLWxva2FsLWktbWlsYW5vdmljYS8yMzM3MDg2LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyL2JiNzQ0MWI2LTk0M2MtNDJjOS1hYWY1LWUyZWRjZTYwNjlhNi5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5CbGl6YW5jaSByYWRpbGkga2FvcyB1IGthZmnEh3U6ICJKLi4ubSB0aSBtYXRlciwgcmF6Yml0IMSHdSB0ZWJlLCBsb2thbCBpIE1pbGFub3ZpxIdhIjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA4MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9mb3RvLW92by1zdS1oZWxpa29wdGVyaS1ibGFjay1oYXdrLWtvamUtc21vLWRvYmlsaS1iYW5vemljLWdsdW1pLXBpbG90YS8yMzM3MDgwLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzA3NDA4ODE0LTUyMDItNGEyOS04NWExLTkzYmJmODllNjI3MS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcnRpY2xlLWljb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaW5kZXgtcGhvdG8tY2lyY2xlIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24tYmcgdmlqZXN0aS1iZyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+PHNwYW4gY2xhc3M9J3RpdGxlLXBhcnNlZC10ZXh0Jz5GT1RPPC9zcGFuPiAgT3ZvIHN1IGhlbGlrb3B0ZXJpIEJsYWNrIEhhd2sga29qZSBzbW8gZG9iaWxpLCBCYW5vxb5pxIcgZ2x1bWkgcGlsb3RhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDg3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL25pei16ZW1hbGphLWV1cm9wZS11a2lkYS1zdmUtbWplcmUtd2hvLXVsYXppbW8tdS1kdWdvLW1pcm5vLXJhemRvYmxqZS1wYW5kZW1pamUvMjMzNzA4Ny5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9iOTJkN2E0Mi04MjAzLTRjZTYtODc5OC1iMDgyZWU3YjRiMDIuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+Tml6IHplbWFsamEgRXVyb3BlIHVraWRhIHN2ZSBtamVyZS4gV0hPOiBVbGF6aW1vIHUgZHVnbyBtaXJubyByYXpkb2JsamUgcGFuZGVtaWplPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDU5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3Nla3MtdHV6aW8taHJ2YXRza3UtZXVyb3Bza2ktc3VkLWdhLW9kYmlvLW92by1qZS1vYnJhemxvemVuamUvMjMzNzA1OS5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci8yYWU1NzcxNS01NzZkLTQyZDItYjJhMS0xNDkxNTJlMGNhNWIuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+xaBla3MgdHXFvmlvIEhydmF0c2t1LCBFdXJvcHNraSBzdWQgZ2Egb2RiaW8uIE92byBqZSBvYnJhemxvxb5lbmplPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL3BsZW5rb3ZpYy10dnJkaS1kYS1zdS1vcHR1emJlLXp2aXpkYWNpY2UtaGFqa2EtaS1oYXJhbmdhLW9uYS1tdS1vZGdvdm9yaWxhLzIzMzcwMjQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYjMxNWFmNzEtYjc1Yi00MjYzLTgyNGQtZjdkZWU4NzYzNzJhLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PlBsZW5rb3ZpxIcgdHZyZGkgZGEgc3Ugb3B0dcW+YmUgenZpxb5kYcSNaWNlIGhhamthIGkgaGFyYW5nYS4gT25hIG11IG9kZ292b3JpbGE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwOTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvdmlkZW8tbWVkdmVkLXBvY2VsYS1qZS1ncmFkbmphLWt1Y2EtaG9ydmF0LW5pamUtYWxpLW1lZHZlZC1uaWplLWtyaXZvLXJla2FvLzIzMzcwOTYuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvN2UwNWYxYTAtNzQyOS00Y2MyLTlmNjAtZTViMTIzYjE4MjBiLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpbmRleC12aWRlby1jaXJjbGUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi1iZyB2aWplc3RpLWJnIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD48c3BhbiBjbGFzcz0ndGl0bGUtcGFyc2VkLXRleHQnPlZJREVPPC9zcGFuPiAgTWVkdmVkOiBQb8SNZWxhIGplIGdyYWRuamEga3XEh2EuIEhvcnZhdDogTmlqZSwgYWxpIE1lZHZlZCBuaWplIGtyaXZvIHJla2FvPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTE0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2Nlc2thLWktcG9sanNrYS1yaWplc2lsZS1zcG9yLXUtdmV6aS1zLXJ1ZG5pa29tLW5hLWdyYW5pY2kvMjMzNzExNC5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci9lZjZkMzg1Ny05N2IwLTRhNzUtODliZC0yYTY2Zjg1Njc3OTAuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+xIxlxaFrYSBpIFBvbGpza2EgcmlqZcWhaWxlIHNwb3IgdSB2ZXppIHMgcnVkbmlrb20gbmEgZ3JhbmljaTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzA5NCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9vdm8tb3Ryb3Zuby12dWxrYW5za28tamV6ZXJvLXBva2F6dWplLWRhLWplLW5hLW1hcnN1LW1vZ2xvLWJpdGkteml2b3RhLzIzMzcwOTQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvYzg0ZTIzODEtNDdiMS00NGU1LWFmOTctZDRjMDVhZmQ5MWExLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pk92byBvdHJvdm5vIHZ1bGthbnNrbyBqZXplcm8gcG9rYXp1amUgZGEgamUgbmEgTWFyc3UgbW9nbG8gYml0aSDFvml2b3RhPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MTM3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2ZyYW5vLWx1ZXRpYy1vc3RhamUtZGlyZWt0b3ItZHVicm92YWNrb2ctYWVyb2Ryb21hLzIzMzcxMzcuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvMDg0Y2NmYmMtNGVjMi00Njk2LWI4MjctODE4MTkzYTdmZTZhLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90PkZyYW5vIEx1ZXRpxIcgb3N0YWplIGRpcmVrdG9yIGR1YnJvdmHEjWtvZyBhZXJvZHJvbWE8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwNDQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsva29zb3ItcGEtZ3JhYmFya2l0YXJvdmljLWplLWNpbS1qZS1kb3NsYS1waXNhbGEtbWlsYW5vdmljdS1kYS1kYS1vc3Rhdmt1LzIzMzcwNDQuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvMDQxOGJkZWMtYjY5MC00MTY2LTg3ZjQtM2NhNGFlMGJkZWMzLmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRpdGxlIiBkb3QtZG90Pktvc29yOiBQYSBHcmFiYXItS2l0YXJvdmnEhyBqZSwgxI1pbSBqZSBkb8WhbGEsIHBpc2FsYSBNaWxhbm92acSHdSBkYSBkYSBvc3Rhdmt1PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZSBzbGlkZXItaXRlbSIgZGF0YS1leGNsdWRlLWlkPSIyMzM3MDE1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIHNjYWxlLWltZy1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvY2xhbmFrL2dvdG92LW9jZXZpZC1wb3phcmEta3VjZS1iYWtlLWxqdWJlLW5hZGplbmktc3UtZnJhZ21lbnRpLWtvamktaXpnbGVkYWp1LWthby1rb3N0aS8yMzM3MDE1LmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzk3YzBhM2FlLWY1YmEtNDdhNy04MGY3LWM1OGYyNGVhMDYwYS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5Hb3RvdiBvxI1ldmlkIHBvxb5hcmEga3XEh2UgYmFrZSBManViZTogIk5hxJFlbmkgc3UgZnJhZ21lbnRpIGtvamkgaXpnbGVkYWp1IGthbyBrb3N0aSI8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcxMDMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvbWlsYW5vdmljLW9kbGlrb3Zhby1waWxvdGEtYm9yb3ZpY2EtemEtcHJ2aS1wcmVsZXQtbWlnb20tbmEtaHJ2YXRza3Utc3RyYW51LzIzMzcxMDMuYXNweD9pbmRleF9yZWY9Y2xhbmFrX3Byb2NpdGFqX2pvc19kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1nLWhvbGRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly9pcC5pbmRleC5oci9yZW1vdGUvaW5kZXhuZXcuczMuaW5kZXguaHIvOGY0YTA3ODItNDQxNS00YmY4LTg1MTYtNmJhMjQ4MWUzYzY1LmpwZz93aWR0aD0yNzAmaGVpZ2h0PTE4NSZtb2RlPWNyb3AmYW5jaG9yPXRvcGNlbnRlciZzY2FsZT1ib3RoIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFydGljbGUtaWNvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpbmRleC12aWRlby1jaXJjbGUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbi1iZyB2aWplc3RpLWJnIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5NaWxhbm92acSHIG9kbGlrb3ZhbyBwaWxvdGEgQm9yb3ZpxIdhIHphIHBydmkgcHJlbGV0IE1pRy1vbSBuYSBocnZhdHNrdSBzdHJhbnU8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlIHNsaWRlci1pdGVtIiBkYXRhLWV4Y2x1ZGUtaWQ9IjIzMzcwNDYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIgc2NhbGUtaW1nLWhvdmVyIiBocmVmPSIvdmlqZXN0aS9jbGFuYWsvbWplc3RhbmktdGVyb3ItYW1pY2EtdHJhamUtZGVzZXRsamVjaW1hLW1sYXRlLW5hcy1pbWFqdS12aWxlLW9ydXpqYS11LWF1dHUvMjMzNzA0Ni5hc3B4P2luZGV4X3JlZj1jbGFuYWtfcHJvY2l0YWpfam9zX2QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctaG9sZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2lwLmluZGV4LmhyL3JlbW90ZS9pbmRleG5ldy5zMy5pbmRleC5oci80MWMwMjAwYS0xMjIyLTQ3NGQtYjNlZS1jNjFhYzhkYmM2NGEuanBnP3dpZHRoPTI3MCZoZWlnaHQ9MTg1Jm1vZGU9Y3JvcCZhbmNob3I9dG9wY2VudGVyJnNjYWxlPWJvdGgiIC8+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGl0bGUiIGRvdC1kb3Q+TWplxaF0YW5pOiBUZXJvciBBbWnEh2EgdHJhamUgZGVzZXRsamXEh2ltYS4gTWxhdGUgbmFzLCBpbWFqdSB2aWxlLCBvcnXFvmphIHUgYXV0dS4uLjwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUgc2xpZGVyLWl0ZW0iIGRhdGEtZXhjbHVkZS1pZD0iMjMzNzEwMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciBzY2FsZS1pbWctaG92ZXIiIGhyZWY9Ii92aWplc3RpL2NsYW5hay9rcml6YS11LWNybm9qLWdvcmktcHJlbWlqZXItbmUtemVsaS1kYXRpLW9zdGF2a3UtaWFrby1vY2VrdWplLXBhZC12bGFkZS8yMzM3MTAyLmFzcHg/aW5kZXhfcmVmPWNsYW5ha19wcm9jaXRhal9qb3NfZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltZy1ob2xkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaXAuaW5kZXguaHIvcmVtb3RlL2luZGV4bmV3LnMzLmluZGV4LmhyLzk4ZjU0NWFmLTg4NjYtNDcwMi1iOWU4LTRhZTI1ZDEzMTFmOS5qcGc/d2lkdGg9MjcwJmhlaWdodD0xODUmbW9kZT1jcm9wJmFuY2hvcj10b3BjZW50ZXImc2NhbGU9Ym90aCIgLz4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJ0aXRsZSIgZG90LWRvdD5Lcml6YSB1IENybm9qIEdvcmk6IFByZW1pamVyIG5lIMW+ZWxpIGRhdGkgb3N0YXZrdSBpYWtvIG/EjWVrdWplIHBhZCB2bGFkZTwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpZGVyLW5hdmlnYXRpb24gdmlqZXN0aS10ZXh0Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZXItcHJldiBtYWluLWNvbnRlbnQtYmcgdmlqZXN0aS1iZy1ob3ZlciI+PGkgY2xhc3M9ImluZGV4LWFycm93LWxlZnQiPjwvaT48L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzbGlkZXItbmV4dCBtYWluLWNvbnRlbnQtYmcgdmlqZXN0aS1iZy1ob3ZlciI+PGkgY2xhc3M9ImluZGV4LWFycm93LXJpZ2h0Ij48L2k+PC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICA8L2Rpdj4NCjwvZGl2Pg0KICAgICAgICAgICAgDQoNCg0KPCEtLSAvMjE3MDM5NTAwODcvREE0IC0tPg0KPGRpdiBpZD0nREE0JyBzdHlsZT0iYmFja2dyb3VuZDp3aGl0ZSIgY2xhc3M9ImpzLXNsb3QtY29udGFpbmVyIiBkYXRhLWNzcy1jbGFzcz0ibWFpbi1jb250YWluZXIgZ29vZ2xlLWJveCBtYXJnaW4tYm90dG9tLTUwIj4NCiAgICA8c2NyaXB0Pg0KICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZVNsb3QoJy8yMTcwMzk1MDA4Ny9EQTRfVmlqZXN0aScsIFtbOTcwLCA5MF0sIFs3MjgsIDkwXSwgWzk3MCwgMjUwXSwgWzk3MCwgNTAwXSwgWzEsIDFdXSwgJ0RBNCcpLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsNCiAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KCdEQTQnKTsNCiAgICAgICAgfSk7DQogICAgPC9zY3JpcHQ+DQo8L2Rpdj4NCg0KDQogICAgPGRpdiBjbGFzcz0iYXJ0aWNsZS1mb290ZXItY29kZSI+DQogICAgICAgIA0KICAgIDwvZGl2Pg0KPC9hcnRpY2xlPg0KDQoNCg0KDQogICAgPGZvb3Rlcj4NCiAgICAgICAgDQo8Zm9vdGVyIGNsYXNzPSJtYWluLWZvb3RlciBtYWluLWNvbnRhaW5lciBtYWluLWNvbnRlbnQtYmcgY2xlYXJmaXgiPg0KICAgIDxhIGNsYXNzPSJsb2dvIiBocmVmPSIvIj48aW1nIGNsYXNzPSJsb2dvLWltZyIgc3JjPSIvQ29udGVudC9pbWcvbG9nby9sb2dvX2Zvb3Rlcl8xOTZ4Mjkuc3ZnIiAvPjwvYT4NCiAgICA8bmF2IGNsYXNzPSJsaXN0LWhvbGRlciBmbGV4Ij4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJoZWFkaW5nIj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aSI+DQogICAgICAgICAgICAgICAgICAgIFZpamVzdGkNCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2EvaHJ2YXRza2EvMjIuYXNweCI+SHJ2YXRza2E8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS96YWdyZWIvMTU1My5hc3B4Ij5aYWdyZWI8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS9yZWdpamEvMTU0MC5hc3B4Ij5SZWdpamE8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InZpamVzdGktdGV4dC1ob3ZlciIgaHJlZj0iL3ZpamVzdGkvcnVicmlrYS9ldS81MDQwLmFzcHgiPkVVPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2Evc3ZpamV0LzIzLmFzcHgiPlN2aWpldDwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL3puYW5vc3QvMTcyMi5hc3B4Ij5abmFub3N0PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJ2aWplc3RpLXRleHQtaG92ZXIiIGhyZWY9Ii92aWplc3RpL3J1YnJpa2EvY3JuYS1rcm9uaWthLzQ2LmFzcHgiPkNybmEga3JvbmlrYTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL2tvbWVudGFyaS8xNDEzLmFzcHgiPktvbWVudGFyaTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0idmlqZXN0aS10ZXh0LWhvdmVyIiBocmVmPSIvdmlqZXN0aS9ydWJyaWthL25vdmFjLzE1NTQuYXNweCI+Tm92YWM8L2E+PC9saT4NCiAgICAgICAgPC91bD4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJoZWFkaW5nIj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0Ij4NCiAgICAgICAgICAgICAgICAgICAgU3BvcnQNCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJzcG9ydC10ZXh0LWhvdmVyIiBocmVmPSIvc3BvcnQvcnVicmlrYS9ub2dvbWV0LzE2MzguYXNweCI+Tm9nb21ldDwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0L3J1YnJpa2Eva29yb25hdmlydXMvNTA0NC5hc3B4Ij5Lb3JvbmF2aXJ1czwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0L3J1YnJpa2EvdHJhbnNmZXJpLzE2NTAuYXNweCI+VHJhbnNmZXJpPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJzcG9ydC10ZXh0LWhvdmVyIiBocmVmPSIvc3BvcnQvcnVicmlrYS9rb3NhcmthLzE2MzkuYXNweCI+S28mI3gxNjE7YXJrYTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0L3J1YnJpa2EvdGVuaXMvMTY0MC5hc3B4Ij5UZW5pczwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0L3J1YnJpa2EvcnVrb21ldC81MDUzLmFzcHgiPlJ1a29tZXQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InNwb3J0LXRleHQtaG92ZXIiIGhyZWY9Ii9zcG9ydC9ydWJyaWthL3JlZ2lqYS8xNjkyLmFzcHgiPlJlZ2lqYTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ic3BvcnQtdGV4dC1ob3ZlciIgaHJlZj0iL3Nwb3J0L3J1YnJpa2Eva29tZW50YXJpLzE3MzguYXNweCI+S29tZW50YXJpPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJzcG9ydC10ZXh0LWhvdmVyIiBocmVmPSIvc3BvcnQvcnVicmlrYS9ib3JpbGFja2ktc3BvcnRvdmkvMTY2Mi5hc3B4Ij5Cb3JpbGEmI3gxMEQ7a2kgc3BvcnRvdmk8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InNwb3J0LXRleHQtaG92ZXIiIGhyZWY9Ii9zcG9ydC9ydWJyaWthL29zdGFsaS1zcG9ydG92aS8xNjQxLmFzcHgiPk9zdGFsaSBzcG9ydG92aTwvYT48L2xpPg0KICAgICAgICA8L3VsPg0KICAgICAgICA8dWw+DQogICAgICAgICAgICA8bGkgY2xhc3M9ImhlYWRpbmciPg0KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJtYWdhemluLXRleHQtaG92ZXIiIGhyZWY9Ii9tYWdhemluIj4NCiAgICAgICAgICAgICAgICAgICAgTWFnYXppbg0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgIDwvbGk+DQoNCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1hZ2F6aW4tdGV4dC1ob3ZlciIgaHJlZj0iL21hZ2F6aW4vcnVicmlrYS90di1maWxtLzE1MjUuYXNweCI+VFYgJmFtcDsgRmlsbTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFnYXppbi10ZXh0LWhvdmVyIiBocmVmPSIvbWFnYXppbi9ydWJyaWthL2dsYXpiYS8xNTI2LmFzcHgiPkdsYXpiYTwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFnYXppbi10ZXh0LWhvdmVyIiBocmVmPSIvbWFnYXppbi9ydWJyaWthL3RlY2gtZ2FkZ2V0LzE1MjguYXNweCI+VGVjaCAmYW1wOyBHYWRnZXQ8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1hZ2F6aW4tdGV4dC1ob3ZlciIgaHJlZj0iL21hZ2F6aW4vcnVicmlrYS9saWZlc3R5bGUvMTUyOS5hc3B4Ij5MaWZlc3R5bGU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1hZ2F6aW4tdGV4dC1ob3ZlciIgaHJlZj0iL21hZ2F6aW4vcnVicmlrYS9zaG93Yml6LzE1MjcuYXNweCI+U2hvd2JpejwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFnYXppbi10ZXh0LWhvdmVyIiBocmVmPSIvbWFnYXppbi9ydWJyaWthL3phbmltbGppdm9zdGkvMTUzMC5hc3B4Ij5aYW5pbWxqaXZvc3RpPC9hPjwvbGk+DQogICAgICAgICAgICAgICAgPGxpPjxhIGNsYXNzPSJtYWdhemluLXRleHQtaG92ZXIiIGhyZWY9Ii9tYWdhemluL3J1YnJpa2EvaG9yb3Nrb3AvNTA1MS5hc3B4Ij5Ib3Jvc2tvcDwvYT48L2xpPg0KICAgICAgICA8L3VsPg0KICAgICAgICA8dWw+DQogICAgICAgICAgICA8bGkgY2xhc3M9ImhlYWRpbmciPg0KICAgICAgICAgICAgICAgIFBsdXMNCiAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im9nbGFzaS10ZXh0LWhvdmVyIiBocmVmPSJodHRwczovL3d3dy5pbmRleC5oci9vZ2xhc2kvIj5PZ2xhc2k8L2E+PC9saT4NCiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0icmVjZXB0aS10ZXh0LWhvdmVyIiBocmVmPSJodHRwczovL3JlY2VwdGkuaW5kZXguaHIvIj5SZWNlcHRpPC9hPjwvbGk+DQogICAgICAgICAgICA8bGk+PGEgY2xhc3M9Imxhamtoci10ZXh0LWhvdmVyIiBocmVmPSJodHRwOi8vd3d3LmluZGV4LmhyL2xhamsvIj5MYWprLmhyPC9hPjwvbGk+DQogICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1haW4tdGV4dC1ob3ZlciIgaHJlZj0iaHR0cDovL3d3dy5pbmRleC5oci9pbmRleGZvcnVtLyI+Rm9ydW08L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImF1dG8tdGV4dC1ob3ZlciIgaHJlZj0iL2F1dG8iPkF1dG88L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1hbWUtdGV4dC1ob3ZlciIgaHJlZj0iL21hbWUiPk1hbWU8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImxqdWJpbWNpLXRleHQtaG92ZXIiIGhyZWY9Ii9sanViaW1jaSI+TGp1YmltY2k8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9ImZpdC10ZXh0LWhvdmVyIiBocmVmPSIvZml0Ij5GaXQ8L2E+PC9saT4NCiAgICAgICAgPC91bD4NCiAgICAgICAgPHVsPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJoZWFkaW5nIj4NCiAgICAgICAgICAgICAgICBJbmZvDQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFpbi10ZXh0LWhvdmVyIiBocmVmPSIvaW5mby90ZWNhaiI+VGUmI3gxMEQ7YWo8L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1haW4tdGV4dC1ob3ZlciIgaHJlZj0iL2luZm8vdHYiPlRWIHByb2dyYW08L2E+PC9saT4NCiAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9Im1haW4tdGV4dC1ob3ZlciIgaHJlZj0iL2luZm8va2lubyI+S2lubzwvYT48L2xpPg0KICAgICAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFpbi10ZXh0LWhvdmVyIiBocmVmPSIvaW5mby92cmlqZW1lIj5WcmlqZW1lPC9hPjwvbGk+DQoNCiAgICAgICAgICAgIDxsaT48YSBjbGFzcz0ibWFpbi10ZXh0LWhvdmVyIiBocmVmPSIvcnNzL2luZm8iPlJTUzwvYT48L2xpPg0KICAgICAgICA8L3VsPg0KICAgICAgICA8dWw+DQogICAgICAgICAgICA8bGkgY2xhc3M9ImhlYWRpbmciPg0KICAgICAgICAgICAgICAgIFBSQVRJVEUgTkFTDQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9pbmRleC5oci8iIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibWFpbi10ZXh0LWhvdmVyIj48aSBjbGFzcz0iZmFjZWJvb2sgaW5kZXgtZmFjZWJvb2siPjwvaT5GYWNlYm9vazwvYT4NCiAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ1VwNkg0a28zMlhxblZfNk1PUHVuQkEiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0ibWFpbi10ZXh0LWhvdmVyIj48aSBjbGFzcz0ieW91dHViZSBpbmRleC15b3V0dWJlIj48L2k+WW91dHViZTwvYT4NCiAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9pbnN0YWdyYW0uY29tL2luZGV4LmhyIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9Im1haW4tdGV4dC1ob3ZlciI+PGkgY2xhc3M9Imluc3RhZ3JhbSBpbmRleC1pbnN0YWdyYW0iPjwvaT5JbnN0YWdyYW08L2E+DQogICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9wb3NhbGppdGUtcHJpY3UiIGNsYXNzPSJtYWluLXRleHQtaG92ZXIiPlBvxaFhbGppdGUgbmFtIHByacSNdSA8L2E+PC9saT4NCiAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcG9zYWxqaXRlLXByaWN1LWZvdG8tdmlkZW8iIGNsYXNzPSJtYWluLXRleHQtaG92ZXIiPlBvxaFhbGppdGUgbmFtIGZvdG8vdmlkZW88L2E+PC9saT4NCiAgICAgICAgICAgIDxsaT48YSBocmVmPSIvbmV3c2xldHRlciIgY2xhc3M9Im1haW4tdGV4dC1ob3ZlciI+TmV3c2xldHRlcjwvYT48L2xpPg0KICAgICAgICA8L3VsPg0KICAgIDwvbmF2Pg0KICAgIDx1bCBjbGFzcz0iaW1wcmVzc3VtIj4NCiAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHBzOi8vY2plbmlrLmluZGV4LmhyIj5PZ2xhxaFhdmFuamU8L2E+PC9saT4NCiAgICAgICAgPGxpPjxhIGhyZWY9Ii9rb250YWt0Ij5Lb250YWt0PC9hPjwvbGk+DQogICAgICAgIDxsaT48YSBocmVmPSIvaW1wcmVzc3VtIj5JbXByZXNzdW08L2E+PC9saT4NCiAgICAgICAgPGxpPjxhIGhyZWY9Ii91dmpldGkta29yaXN0ZW5qYSI+VXZqZXRpIGtvcmnFoXRlbmphPC9hPjwvbGk+DQogICAgICAgIDxsaT4NCiAgICAgICAgICAgIMKpIDIwMjIgSW5kZXgNCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZiLWxpa2UiIGRhdGEtaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2luZGV4LmhyLyIgZGF0YS1sYXlvdXQ9ImJ1dHRvbl9jb3VudCIgZGF0YS1hY3Rpb249Imxpa2UiIGRhdGEtc2l6ZT0ic21hbGwiIGRhdGEtc2hvdy1mYWNlcz0iZmFsc2UiIGRhdGEtc2hhcmU9ImZhbHNlIj48L2Rpdj4NCiAgICAgICAgPC9saT4NCiAgICA8L3VsPg0KPC9mb290ZXI+DQoNCiAgICA8L2Zvb3Rlcj4NCg0KICAgIA0KICAgIA0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgLyogPCFbQ0RBVEFbICovDQogICAgKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgd2luZG93LmRtID0gd2luZG93LmRtIHx8IHsgQWpheERhdGE6IFtdIH07DQogICAgICAgIHdpbmRvdy5kbS5BamF4RXZlbnQgPSBmdW5jdGlvbiAoZXQsIGQsIHNzaWQsIGFkKSB7DQogICAgICAgICAgICBkbS5BamF4RGF0YS5wdXNoKHsgZXQ6IGV0LCBkOiBkLCBzc2lkOiBzc2lkLCBhZDogYWQgfSk7DQogICAgICAgICAgICB3aW5kb3cuRG90TWV0cmljc09iaiAmJiBEb3RNZXRyaWNzT2JqLm9uQWpheERhdGFVcGRhdGUoKTsNCiAgICAgICAgfTsNCiAgICAgICAgdmFyIGQgPSBkb2N1bWVudCwNCiAgICAgICAgICAgIGggPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sDQogICAgICAgICAgICBzID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsNCiAgICAgICAgcy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7DQogICAgICAgIHMuYXN5bmMgPSB0cnVlOw0KICAgICAgICBzLnNyYyA9ICdodHRwczovL3NjcmlwdC5kb3RtZXRyaWNzLm5ldC9kb29yLmpzP2lkPTEyMjY5JzsNCiAgICAgICAgaC5hcHBlbmRDaGlsZChzKTsNCiAgICB9KCkpOw0KICAgIC8qIF1dPiAqLw0KPC9zY3JpcHQ+DQoNCg0KICAgIDxzY3JpcHQ+DQogICAgICAgIC8vIEdvb2dsZSBhbmFseXRpY3MgY3VzdG9tIGRpbWVuc2lvbnMgLy8NCiAgICAgICAgdmFyIGtleXdvcmRzID0gKFt7ImlkIjo1OTU1LCJpbmRleGVkS2V5d29yZCI6InRveW90YSIsImtleVdvcmQiOiJUb3lvdGEiLCJzbHVnIjoidG95b3RhIiwiYXJ0aWNsZUNvdW50Ijo4Nzh9XSkubWFwKGZ1bmN0aW9uIChtKSB7DQogICAgICAgICAgICByZXR1cm4gJ2tleXdvcmRJZC0nICsgbS5pZDsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgdmFyIGtleXdvcmRzTmFtZSA9IChbeyJpZCI6NTk1NSwiaW5kZXhlZEtleXdvcmQiOiJ0b3lvdGEiLCJrZXlXb3JkIjoiVG95b3RhIiwic2x1ZyI6InRveW90YSIsImFydGljbGVDb3VudCI6ODc4fV0pLm1hcChmdW5jdGlvbiAobSkgew0KICAgICAgICAgICAgcmV0dXJuICdrZXl3b3JkTmFtZS0nICsgbS5rZXlXb3JkOw0KICAgICAgICB9KTsNCg0KICAgICAgICB2YXIgYXV0aG9ycyA9IChbeyJpZCI6MTQxfV0pLm1hcChmdW5jdGlvbiAobSkgew0KICAgICAgICAgICAgcmV0dXJuICdhdXRob3JJZC0nICsgbS5pZDsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgdmFyIHJvb3RDYXRlZ29yeUlkID0gJzMnOw0KICAgICAgICB2YXIgYXJ0aWNsZUlkID0gJzIyNzA3MTAnOw0KICAgICAgICB2YXIgcHVibGlzaERhdGUgPSAnMjIuMDQuMjAyMS4nOw0KICAgICAgICB2YXIgcHVibGlzaERhdGVNZXRyaWMgPSAxNjE5MDQ5NjAwOw0KICAgICAgICB2YXIgdGV4dFR5cGVJZCA9ICcnOw0KDQogICAgICAgIHZhciBjYXRlZ29yeSA9ICd2aWplc3RpJzsNCg0KICAgICAgICB2YXIgcmVsYXRlZEFydGljbGVzVXJsID0gJy9BcnRpY2xlL1JlbGF0ZWRBcnRpY2xlcz9hcnRpY2xlSWQ9MjI3MDcxMCZ0YWdJZD01OTU1JnRhZ1NsdWc9dG95b3RhJzsNCg0KICAgICAgICB2YXIgcmVwb3J0VXJsID0gJy9hcnRpY2xlLXJlcG9ydC1mb3JtJzsNCg0KICAgICAgICB2YXIgc291cmNlVHlwZSA9IDI7DQogICAgICAgIGFydGljbGVTdGF0c1NlcnZpY2UuQ291bnRBcnRpY2xlVmlldyhhcnRpY2xlSWQsIHNvdXJjZVR5cGUpOw0KICAgICAgICBhcnRpY2xlU2VydmljZS5Jbml0QWxsKCk7DQoNCiAgICAgICAgdGV4dFNlcnZpY2UuRGlzcGxheUVtYmVkQ29udGVudCgpOw0KICAgIDwvc2NyaXB0Pg0KDQoNCg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgYXJ0aWNsZVNlcnZpY2UuTG9nb1NocmluaygpOw0KICAgICAgICA8L3NjcmlwdD4NCg0KDQoNCg0KDQoNCiAgICA8c2NyaXB0Pg0KICAgICAgICAvLyBHb29nbGUgYW5hbHl0aWNzIHRyYWNraW5nDQogICAgICAgIGdhKCdzZXQnLCAnYW5vbnltaXplSXAnLCB0cnVlKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAncGFnZXZpZXcnKTsNCiAgICAgICAgZ2EoJ3NlbmQnLCAnZXZlbnQnLCAiYWJfZmlmdHktZmlmdHkiLCAnJyk7DQoNCiAgICAgICAgLy8gaWYgYWQgYmxvY2sgZGV0ZWN0ZWQgc2VuZCBldmVudA0KICAgICAgICBpZiAod2luZG93LmluZGV4Q2FuUnVuQWRzID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIGdhKCdzZW5kJywgJ2V2ZW50JywgImFkX2Jsb2NrX2RldGVjdGVkIiwgJ3RydWUnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBhYkNvb2tpZVVybCA9ICcvc2V0YWJjb29raWUnOw0KDQogICAgICAgIGltYWdlTGF6eUxvYWRTZXJ2aWNlLkluaXQoKTsNCiAgICAgICAgZ2xvYmFsRGlyZWN0aXZlcy5Jbml0QWxsKCk7DQogICAgICAgIGxheW91dFNlcnZpY2UuSW5pdEFsbCgpOw0KICAgIDwvc2NyaXB0Pg0KICAgIA0KDQogICAgPHNjcmlwdCBzcmM9Ii9TY3JpcHRzL2ludmFsaWRDbGllbnREZXRlY3QvaW52Q2xpZW50RGV0ZWN0b3IuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBkZWZlciBzcmM9Imh0dHBzOi8vc3RhdGljLmNsb3VkZmxhcmVpbnNpZ2h0cy5jb20vYmVhY29uLm1pbi5qcy92NjUyZWFjZTE2OTJhNDBjZmEzNzYzZGY2NjlkNzQzOWMxNjM5MDc5NzE3MTk0IiBpbnRlZ3JpdHk9InNoYTUxMi1HaTd4cEpSOHRTa3JwRjdhb3JkUFpRbFcyREx0elVsWmN1bVM4ZE1RandESEVudzlJN1pMeWlPai82dFpTdFJCR3RHZ042Y2VONmNNSDh6N2V0UEdsdz09IiBkYXRhLWNmLWJlYWNvbj0neyJyYXlJZCI6IjZkN2NjOTEyZWFlODQxYTIiLCJ0b2tlbiI6IjQ0MzVhYTZmMGQ1ODRjMjFhOGEwM2M1YzZjZDU4MWU3IiwidmVyc2lvbiI6IjIwMjEuMTIuMCIsInNpIjoxMDB9JyBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4KPC9ib2R5Pg0KPC9odG1sPg=="}
